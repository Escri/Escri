<?php
require ('../xajax/xajax_core/xajax.inc.php');

$xajax = new xajax();

include ('joined_functions.php');

function reader(){
	$answer = new xajaxResponse();
	mysql_connect("localhost","root","gpds");
	$user=apache_getenv("REMOTE_user");
	mysql_select_db($user);
	$result2=mysql_query("select * from selected_tab_ic");
	$row2=mysql_fetch_array($result2);
	$ic="/".$row2["path"];
	if ($ic!="/"){
		$answer->assign('fi_representation','innerHTML','<div id="mapcontainer" style="width: 1000px; height: 600px;">');
		$result=mysql_query("select * from selected_tab_fi");
		$row=mysql_fetch_array($result);
		$fi="/".$row["path"];
	      	$handle = fopen($fi, "r");
	      	$contenido = fread ($handle, filesize ($fi));
		$line=explode("\n",$contenido);
		for ($i=0;$i<count($line);$i++){
			if (strlen($line[$i])>2){
				if ($i==0){
					$total=substr($line[$i],0,strlen(rtrim($line[$i])));
				}else{
					$total.="||".substr($line[$i],0,strlen(rtrim($line[$i])));
				}
			}
		}	
		/*for ($i=0;$i<count($line);$i++){
			$temp=ltrim($line[$i]);
			while (strlen($temp)>1){
				if (($i==0)&&(strlen($temp)==strlen($line[$i]))){
					$total=substr($temp,0,strpos($temp,">")+1);
					$temp=ltrim(substr($temp,strpos($temp,">")+1,strrpos($line[$i],">")+1-strpos($temp,">")));
				}else{				
					$total.="||".substr($temp,0,strpos($temp,">")+1);
					$temp=ltrim(substr($temp,strpos($temp,">")+1,strrpos($line[$i],">")+1-strpos($temp,">")));
				}
			}
		}
		fclose($handle);*/
		$answer->script("FI='$total'");
		$result2=mysql_query("select * from selected_tab_ic");
		$row2=mysql_fetch_array($result2);
		$ic="/".$row2["path"];
	      	$handle2 = fopen($ic, "r");
	      	$contenido2 = fread ($handle2, filesize ($ic));
		$line2=explode("\n",$contenido2);
		for ($i=0;$i<count($line2);$i++){
			if (strlen($line2[$i])>2){
				if ($i==0){
					$total2=substr($line2[$i],0,strrpos($line2[$i],">")+1);
				}else{
					$total2.="||".substr($line2[$i],0,strrpos($line2[$i],">")+1);
				}
			}
		}
		fclose($handle2);
		$answer->script("IC='$total2'");
		$answer->script("parser();");
	}else{
		$answer->alert("You must select one Initial Condition in order to represent the Flight Intent");
	}
	return $answer;
}

function find_points($points){
	$answer = new xajaxResponse();
	$archivo = "/var/www/NewAdam/root4/repository_ocm/operational_context.xml";
      	$handle = fopen($archivo, "r");
      	$contenido = fread ($handle, filesize ($archivo));
	$line=explode("\n",$contenido);
	$point=explode("||",$points);
	for ($i=0;$i<count($line);$i++){
		for($j=0;$j<count($point);$j++){
			$point2=explode(",",$point[$j]);
			if ((strpos($line[$i],"<aixm:name>".$point2[0]."</aixm:name>"))||(strpos($line[$i],"<aixm:designator>".$point2[0]."</aixm:designator>"))){
				$found=false;
				while ($found==false){
					$i+=1;
					if(strpos($line[$i],"<gml:coordinates")!==false){
						$temp1=substr($line[$i],strpos($line[$i],">")+1,strpos($line[$i],"</gml:coordinates>")-1-strpos($line[$i],">"));
						$temp2=explode(",",$temp1);
						$answer->script("flight_segments['$point2[1]']['$point2[2]'][1]=new Array();");
						$answer->script("flight_segments['$point2[1]']['$point2[2]'][2]=new Array();");
						$answer->script("flight_segments['$point2[1]']['$point2[2]'][3]=new Array();");
						$answer->script("flight_segments['$point2[1]']['$point2[2]'][1][0]='latitude';");
						$answer->script("flight_segments['$point2[1]']['$point2[2]'][2][0]='longitude';");
						$answer->script("flight_segments['$point2[1]']['$point2[2]'][3][0]='distance';");
						$answer->script("flight_segments['$point2[1]']['$point2[2]'][1][1]='[deg]';");
						$answer->script("flight_segments['$point2[1]']['$point2[2]'][2][1]='[deg]';");
						$answer->script("flight_segments['$point2[1]']['$point2[2]'][3][1]='[m]';");
						$answer->script("flight_segments['$point2[1]']['$point2[2]'][1][2]='$temp2[1]';");
						$answer->script("flight_segments['$point2[1]']['$point2[2]'][2][2]='$temp2[0]';");
						$answer->script("flight_segments['$point2[1]']['$point2[2]'][3][2]='1250';");
						$found=true;
					}
				}
			}
		}
	}
	fclose($handle);
	return $answer;
}

function modify_ic($text){
	$answer = new xajaxResponse();
	mysql_connect("localhost","root","gpds");
	$user=apache_getenv("REMOTE_user");
	mysql_select_db($user);
	$result=mysql_query("select * from selected_tab_ic");
	$row2=mysql_fetch_array($result);
	$ic="/".$row2["path"];
	$handle = fopen($ic, "w+");
	$text=implode("\n",explode("||",$text));
	fwrite($handle, $text);
	fclose($handle);
	return $answer;
}

function modify_fi($text){
	$answer = new xajaxResponse();
	mysql_connect("localhost","root","gpds");
	$user=apache_getenv("REMOTE_user");
	mysql_select_db($user);
	$result=mysql_query("select * from selected_tab_fi");
	$row2=mysql_fetch_array($result);
	$fi="/".$row2["path"];
	$handle = fopen($fi, "w+");
	$text=implode("\n",explode("||",$text));
	fwrite($handle, $text);
	fclose($handle);
	return $answer;
}

function show_button_fidoSegment(){
	$answer = new xajaxResponse();
	$output='<input type="button" id="showMarkers_segments" name="showMarkers_segments_button" value="Activate Flight Segments" onclick="show_markers_fidoSegment();">';
	$answer->assign("markers_fidoSegment","innerHTML",$output);
	return $answer;
}

function hide_button_fidoSegment(){
	$answer = new xajaxResponse();
	$output='<input type="button" id="hideMarkers_segments" name="hideMarkers_segments_button" value="Defuse Flight Segments" onclick="hide_markers_fidoSegment();">';
	$answer->assign("markers_fidoSegment","innerHTML",$output);
	return $answer;
}

function show_button_initial(){
	$answer = new xajaxResponse();
	$output='<input type="button" id="showMarkers_initial" name="showMarkers_initial_button" value="Activate Initial Point" onclick="show_marker_initial();">';
	$answer->assign("marker_initial","innerHTML",$output);
	return $answer;
}

function hide_button_initial(){
	$answer = new xajaxResponse();
	$output='<input type="button" id="hideMarkers_initial" name="hideMarkers_initial_button" value="Defuse Initial Point" onclick="hide_marker_initial();">';
	$answer->assign("marker_initial","innerHTML",$output);
	return $answer;
}

function show_select_fidoConstraint($total_constraints){
	$answer = new xajaxResponse();
	$index=1;
	for($i=$total_constraints;$i>0;$i--){
		$option_value.="<option value=".$index.">Constraint ".$index."</option>";
		$index++;
	}
	$output="<select id='select_constraint' name='select_constraint_select' onchange='select_fidoConstraint()'><option value=0>---Select one constraint---</option>".$option_value."</select><br>";
	$answer->assign("markers_selectConstraint","innerHTML",$output);
	return $answer;
}

function show_select_fidoConstraint_fields($total_constraints){
	$answer = new xajaxResponse();
	$index=1;
	for($i=$total_constraints;$i>0;$i--){
		$option_value.="<option value=".$index.">Constraint ".$index."</option>";
		$index++;
	}
	$output="<select id='select_constraint_n' name='select_constraint_select' onchange='select_fidoConstraint()'><option value=0>---Select one constraint---</option>".$option_value."</select><br>";
	$answer->assign("markers_selectConstraint","innerHTML",$output);
	return $answer;
}

function div_fidoConstraint_null(){
	$answer = new xajaxResponse();
	$output='';
	$answer->assign("markers_fidoConstraint","innerHTML",$output);
	return $answer;
}

function show_button_fidoConstraint(){
	$answer = new xajaxResponse();
	$output='<input type="button" id="showMarkers_constraint" name="showMarkers_constraint_button" value="Show Constraint Points" onclick="show_markers_fidoConstraint();">';
	$answer->assign("markers_fidoConstraint","innerHTML",$output);
	return $answer;
}

function show_button_fidoConstraint_fields(){
	$answer = new xajaxResponse();
	$output='<input type="button" id="showMarkers_constraint_n" name="showMarkers_constraint_button" value="Show Constraint Points" onclick="show_markers_fidoConstraint();">';
	$answer->assign("markers_fidoConstraint","innerHTML",$output);
	return $answer;
}

function hide_button_fidoConstraint(){
	$answer = new xajaxResponse();
	$output='<input type="button" id="hideMarkers_constraint" name="hideMarkers_constraint_button" value="Hide Constraint Points" onclick="hide_markers_fidoConstraint();">';
	$answer->assign("markers_fidoConstraint","innerHTML",$output);
	return $answer;
}

function hide_button_fidoConstraint_fields(){
	$answer = new xajaxResponse();
	$output='<input type="button" id="hideMarkers_constraint_n" name="hideMarkers_constraint_button" value="Hide Constraint Points" onclick="hide_markers_fidoConstraint();">';
	$answer->assign("markers_fidoConstraint","innerHTML",$output);
	return $answer;
}

function anchor_button(){
   $answer = new xajaxResponse();
   $answer->script("anchor();");
   return $answer; 
}

function fido_translate($nameFileFI,$nameFileIC,$nameBro){
    $answer = new xajaxResponse();
    $user=apache_getenv("REMOTE_user");
    mysql_connect("localhost","root","gpds");
    mysql_select_db($user);
    $result=mysql_query("select * from selected_tab_ocm");
    $row=mysql_fetch_array($result);
    $result2=mysql_query("select * from fi");
    $row2=mysql_fetch_array($result);
    if($row==""){
        $answer->script("alert('You have to select OCM');");
    }else{
        $ocm="/".$row["path"];
        $fact="var/www/NewAdam/FACT/".$nameBro;
        $fi_FACT="var/www/NewAdam/".$user."/repository_fi/".$nameFileFI.".xml";
        $ic_FACT="var/www/NewAdam/".$user."/repository_ic/".$nameFileIC.".xml";
        $shell=shell_exec("bash fido_translator.sh '--oc ".$ocm." --fact /".$fact." --output_ic /".$ic_FACT." --output_fi /".$fi_FACT."'");
        $resultFACT=mysql_query("insert into fi values('".$nameFileFI.".xml','".$fi_FACT."')");
        $resultFACT2=mysql_query("insert into ic values('".$nameFileIC.".xml','".$ic_FACT."')");
        $result3=mysql_query("select * from fi order by name");
        $result4=mysql_query("select * from ic order by name");
        $answer->script("alert('Convert FACT File added succesfully');");
        $answer->script("xajax_show_repository('fi');");
    }
    return $answer;
}

$xajax->registerFunction("fido_translate");
$xajax->registerFunction("call_download");
$xajax->registerFunction("anchor_button");
$xajax->registerFunction("reader");
$xajax->registerFunction("find_points");
$xajax->registerFunction("show_button_fidoSegment");
$xajax->registerFunction("hide_button_fidoSegment");
$xajax->registerFunction("show_button_initial");
$xajax->registerFunction("hide_button_initial");
$xajax->registerFunction("show_select_fidoConstraint");
$xajax->registerFunction("show_select_fidoConstraint_fields");
$xajax->registerFunction("div_fidoConstraint_null");
$xajax->registerFunction("show_button_fidoConstraint");
$xajax->registerFunction("show_button_fidoConstraint_fields");
$xajax->registerFunction("hide_button_fidoConstraint");
$xajax->registerFunction("hide_button_fidoConstraint_fields");
$xajax->registerFunction("show_repository");
$xajax->registerFunction("add_repository");
$xajax->registerFunction("save_repository");
$xajax->registerFunction("remove_repository");
$xajax->registerFunction("change_add_button");
$xajax->registerFunction("check_generate");
$xajax->registerFunction("truncate_table");
$xajax->registerFunction("generate_AI_TRA");
$xajax->registerFunction("display_generating");
$xajax->registerFunction("hide_generating");
$xajax->registerFunction("clean_ai_tra_names");
$xajax->registerFunction("open_log");
$xajax->registerFunction("logout");
$xajax->registerFunction("modify_ic");
$xajax->registerFunction("modify_fi");
$xajax->processRequest();

?>

<?php
/*
** If we haven't started a session, we start it, and we inicializate we tables which will show us the seleted repository. 
*/
session_start();
$user=apache_getenv("REMOTE_user");
mysql_connect("localhost","root","gpds");
if (!(isset($_SESSION['connect']))){
	$_SESSION['connect'] = 1;
	mysql_select_db($user);
	mysql_query("truncate table selected_tab_fi");
	mysql_query("truncate table selected_tab_ic");
	mysql_query("truncate table selected_tab_ocm");
	mysql_query("truncate table selected_tab_ocm_simplified");
	mysql_query("truncate table selected_tab_upm");
	mysql_query("truncate table selected_tab_ai");
	mysql_query("truncate table selected_tab_wm");
	mysql_query("truncate table selected_tab_apm");
	mysql_query("truncate table selected_tab_trajectory");
}
?>


<html>
    <head>
        <title>ADAM Project</title>
        <link rel="stylesheet" type="text/css" href="style.css"/>
        <?php
        $xajax->printJavascript("/../xajax");
        ?>
        <script type="text/javascript">
            var button=0;
            var type;
                /* 
                **The purpose of this function is to allow the creation of a new Flight Intent
                */
                function new_fp(but,name_fi,fi_fi,add,edit,repo_fi,remove,show,generate,view_log){
                        button=but;
                        type="new";
                        if(button=='fi'){
                            // Seleccionado previamente fi
                            if((document.getElementsByTagName('DIV')[5]).id=="fp_name"){
                                document.getElementById("name_fp").disabled=false;
                                document.getElementById("name_fp").value='';
                                document.getElementById("fp_fp").disabled=false;
                                document.getElementById("fp_fp").value='';
                            }else{
                                xajax_truncate_table('fi');                      
                                xajax_clean_ai_tra_names();                       
                                xajax_check_generate('fi');
                                document.getElementById("repo_fi").value=0;
                                document.getElementById(name_fi).disabled=false;
                                document.getElementById(name_fi).value='';
                                document.getElementById(fi_fi).disabled=false;
                                document.getElementById(fi_fi).value='';
                            }
                        }
                        else if(button=='ic'){
                            // Seleccionado previamente ic
                            if((document.getElementsByTagName('DIV')[5]).id=="fp_name"){
                                document.getElementById("name_fp").disabled=false;
                                document.getElementById("name_fp").value='';
                                document.getElementById("fp_fp").disabled=false;
                                document.getElementById("fp_fp").value='';
                            }else{
                                xajax_truncate_table('ic');
                                xajax_check_generate('ic');
                                xajax_clean_ai_tra_names();
                                document.getElementById("repo_ic_new").value=0;
                                document.getElementById(name_fi).disabled=false;
                                document.getElementById(name_fi).value='';
                                document.getElementById(fi_fi).disabled=false;
                                document.getElementById(fi_fi).value='';
                            }
                        }
                        document.getElementById(remove).disabled=true;
                        document.getElementById(view_log).disabled=true;
                        document.getElementById(add).disabled=false;
                        document.getElementById(add).value="Add File";
                        document.getElementById("mapGen").style.display="none";
                        showXML();
                }

                /*
                **The purpose of this function is to allow the edition of the Flight Intent selected
                */
                function edit_fp(but,fi_fi,show,add,generate,view_log,name_ai,name_tra,view_log){
                        document.getElementById(fi_fi).disabled=false;
                        document.getElementById(add).disabled=false;
                        document.getElementById(add).value="Save File";
                        document.getElementById(generate).disabled=true;
                        document.getElementById(view_log).disabled=true;
                        document.getElementById(name_ai).disabled=true;
                        document.getElementById(name_tra).disabled=true;
                        document.getElementById(view_log).disabled=true;
                        xajax_clean_ai_tra_names();
                        button=but;
                        type="edit";
                }
                
                /*
                ** The purpose of this function is to show an alert if the real function is not implemented yet	
                */
                function not_yet(){
                        alert('Function not implemented yet');
                }
                /*
                ** Confirmation to delete the repository.
                */
                function confirm_delete(input){
                        var ok=confirm('Are you sure you want to delete this file?');
                        if (ok){
                            document.getElementById("mapGen").style.display="none";
                            if(((document.getElementsByTagName('DIV')[5]).id=="fi_name")||(button=='fi')){
                                xajax_remove_repository('fi',input);
                            }
                            if(((document.getElementsByTagName('DIV')[5]).id=="ic_name")||(button=='ic')){
                                
                                xajax_remove_repository('ic',input);
                            }
                        }
                }
                /*
                ** The purpose of this function is to block the key enter.
                */
                function block(e){
                        key=(document.all) ? e.keyCode : e.which;
                        if(key==13) return false;
                }
                /*
                ** The purpose of this function is to anchor the map.
                */
                function anchor(){
                    //Ocultamos el mapa
                    document.getElementById("mapGen").style.display="none";
                    //Ventana que abre la calse Window.php
                    var ventana = window.open('window.php',"my_window","width=1050,height=685");
                    ventana.document.close();
                }
                
                <?php
                $folder = '/var/www/NewAdam/FACT';
                $files  = scandir($folder);
                ?>
                function browser(){
                    var file_FACT = new Array();
                    <?php
                      for ($i = 0; $i < count($files); $i ++){
                          echo "\n file_FACT[$i] = '$files[$i]';"; 
                      }
                    ?> 
                    file_FACT.splice(0, 2)
                    document.getElementById("browser").style.display="block";
                    var x = document.getElementById("selectBro");
                    for(var i=0;i<file_FACT.length;i++){
                        var final=file_FACT[i].length;
                        if((file_FACT[i][final-1])=="t"){
                            var option14 = document.createElement("option");
                            option14.text = file_FACT[i];
                            x.add(option14);
                        }
                    }
                }
                
                function handleFileSelect(nameFI,nameIC,nameFACT) {
                    if(((nameFACT[nameFACT.length-1])!='t')&&((nameFACT[nameFACT.length-2])!='a')&&(nameFACT[nameFACT.length-3])!='d'){
                        alert("File type not valid.");
                    } else {
                        xajax_fido_translate(nameFI,nameIC,nameFACT);
                    }
                }

        </script>
            
        <script>
   /*
    * The porpose of this funtion is to write textarea
    */     
     var lineArr;
     var writeSB = new Array();
     var p2=-1;
     var p1=-1;
     var finalP=-1;
     var finalT=1;
     var nCons;
     var cont=0;
     var dCons=0;
     var par=0;
     var error=-1;
     var cDel=0;
     var m=0;
     var firstS=0;
     var user ="<?php echo $user; ?>";

     function getData(){
         document.getElementById("check").style.display="block";
        var xmlhttp;

       if(window.XMLHttpRequest){
           xmlhttp = new XMLHttpRequest();
       }else{
           xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
       }
       xmlhttp.onreadystatechange = function(){
           if(xmlhttp.readyState == 4){

             var lines = xmlhttp.responseText;   

             intoArray(lines);     
           }
       }
       var url=user+"/log.log";
         xmlhttp.open("GET", url, true);
         xmlhttp.send();
    }

    function intoArray(lines){
        nCons=0;
        lineArr = lines.split('\n');
        lineE2 = lines.split(' ');
        
        p1=lineE2.indexOf("process");
        p2=lineE2.indexOf("optimization");
        finalP = lineE2.indexOf("finished");
        error = lineE2.indexOf("couldn't");
        
        // Consigue el número de restricciones
        for (var ib=0;ib<lineE2.length;ib++){
            if(lineE2[ib]=="maintain"){
                nCons++;
            }
        }
        // Deja vacío el array writeSB
        for(var ic=0;ic<6;ic++){
            if(writeSB[ic]==null){
                writeSB[ic]="";
            }
            if(firstS==0){
                writeSB[0]="";
                writeSB[1]="";
                writeSB[2]="";
                writeSB[3]="";
                writeSB[4]="";
                writeSB[5]="";
                firstS++;
            }
        }
        
        var cont2=0;
        // Comprueba cuantas restricciones ha completado
        for(i=0;i<lineArr.length;i++){
            // Escribe en Status Bar
            if(lineArr[i].indexOf("INFO")!=-1){
                if(cont2==0){
                    writeSB[0]=lineArr[0];
                    cont2++;
                }
                else if(cont2==1){
                    writeSB[1]=lineArr[i];
                    cont2++;
                }
                else if(cont2==2){
                    writeSB[2]=lineArr[i];
                    cont2++;
                }
                else if(cont2==3){
                    writeSB[3]=lineArr[i];
                    cont2++;
                }
                else if(cont2==4){
                    writeSB[4]=lineArr[i];
                    cont2++;
                }
                else if(cont2==5){
                    writeSB[5]=lineArr[i];
                    cont2++;
                }                
            }
            // Busca las restricciones cumplidas
            if(lineArr[i].indexOf("unresolved")!=-1){
                if(i>cont){
                    if((par==0)||(par%2==0)){
                        txt1 = lineArr[i].replace(/\D/g,'');
                        cons1=parseInt(txt1[0]);
                        cons2=parseInt(txt1[1]);
                        sum=cons1+cons2;
                        dCons=nCons-sum;
                    }
                    cont=i;
                    par++;
                }
            }
        }   
        // Escribe en el TextArea
        document.getElementById("image").style.display="block";
        document.getElementById("textC").value=writeSB[0];
        document.getElementById("textC").value+='\n'+writeSB[1];
        document.getElementById("textC").value+='\n'+writeSB[2];
        document.getElementById("textC").value+='\n'+writeSB[3];
        document.getElementById("textC").value+='\n'+writeSB[4];
        document.getElementById("textC").value+='\n'+writeSB[5];

        // Comprueba si ha llegado al final si no vuelve a arrancar
        if((finalP!=-1)||(error!=-1)){
            finalP=0;
            cont=0;
            if(error!=-1){
                alert("Generation has failed. See log details.");
            }
            if(finalT==0){
                setTimeout("end()",500);
            }   
        }else{
            setTimeout("getData();", 200);
        }
    }

        //progreso actual
        var currProgress = 0;
        //progreso actual2
        var currProgress2 = 0;
        //esta la tarea completa
        var done = false;
        //cantidad total de progreso
        var total = 100;
        //controla la primera vez
        var contf=0;
        
        var prBar4;
        
        var ant=-1;
        
        //funcion para actualizar el progreso
        function startProgress() {
        
            document.getElementById("progB").style.display="block";
            document.getElementById("lock").style.display="block";
            //recuperamos el elemento de progreso
            var prBar = document.getElementById("prog2");

            //recuperamos el valor del texto
            var val = document.getElementById("numValue2");
            
            //recuperamos el elemento de progreso
            var prBar2 = document.getElementById("prog3");

            //recuperamos el valor del texto
            var val2 = document.getElementById("numValue3");
            
            prBar4 = document.getElementById("prog4");
            
            if(contf==0){
                prBar.value =0;
                prBar2.value =0;
                prBar4.value =0;
                val.innerHTML = 0+"%";
                val2.innerHTML = 0+"%";
            }
            contf++;
            //actualiza la barra de progreso
            prBar.value = currProgress;           
            
            if((currProgress>ant)&&(currProgress>10)){
                if(currProgress<20){
                    prBar4.value = (currProgress-9);
                }else if(currProgress<40){
                    prBar4.value = (currProgress-7);
                }
                else if(currProgress<60){
                    prBar4.value = (currProgress-5);
                }
                else if(currProgress<70){
                    prBar4.value = currProgress-4;
                }
                else if(currProgress<=90){
                    prBar4.value = currProgress-2;
                }
                ant=currProgress;
            }

            //actualizamos el indicador visual con el texto
            val.innerHTML = Math.round((currProgress/total)*100)+"%";
            //actualiza la barra de progreso
            prBar2.value = currProgress2;
            //actualizamos el indicador visual con el texto
            val2.innerHTML = Math.round((currProgress2/total)*100)+"%";
            //incrementamos el valor del progreso cada vez que la función se ejecuta
            move();
            
            //comprobamos si hemos terminado
            if((currProgress2>=98)&&(currProgress>=98)){
                done = true;
                finalT=0;
            }             
            
            //Sino hemos terminado, volvemos a llamar a la función después de un tiempo
            if(!done){
              setTimeout("startProgress()", 200);
            //Tarea terminada, quitar las barras
            }else{
              prBar.value =100;
              prBar2.value =100;
              val.innerHTML = 100+"%";
              val2.innerHTML = 100+"%";
              currProgress=0;
              currProgress2=0;
              done = false;
              if(finalP==0){
                setTimeout("end()",500);
              }
            }
        }
        
        // Mueve la Progress Bar
        function move(){
            del=80/nCons;
            
            if(finalP==0){
                currProgress=100;
                currProgress2=100;
            }
            else if(p2!=-1){
                if(m==0){
                    currProgress=90;
                    currProgress2=90;            
                }else{
                    currProgress++;
                    currProgress2++;
                    prBar4.style.display="none";
                }
                m++;
            }
            else if(p1!=-1){
                if(cDel==0){
                    currProgress2=10;
                    currProgress=10;
                }else{
                    currProgress=10+(dCons*del);
                    prBar4.style.display="block";
                }
                
                currProgress2=10;
                cDel++;
                //prBar1.style.color="";
            }
            else{
                if(currProgress>10){
                    currProgress=10;
                }else{
                    currProgress++;
                }
                if(currProgress2>10){
                    currProgress2=10;
                }else{
                    currProgress2++;
                } 
            }
            if(currProgress>98){
                currProgress=98;
            }
            if(currProgress2>98){
                currProgress2=98;
            }
        }

        //Para el temporizador y quita la status bar y la progress bar
        function end(){
            par=0;
            cont=0;
            sum=0;
            p2=-1;
            p1=-1;
            finalP=-1;
            finalT=1;
            error=-1;
            cDel=0;
            m=0;
            contf=0;
            ant=-1;
            firstS=0;
            document.getElementById("image").style.display="none";
            document.getElementById("check").style.display="none";
            document.getElementById("progB").style.display="none";
            document.getElementById("lock").style.display="none";
            xajax_hide_generating();
        }
        function download(){
            window.location.href="download.php?file=/var/www/NewAdam/"+user+"/log.log";
	}
</script>
        
        <script type="text/javascript">
    var FI;
    var IC;
    var gc_constraints;
    var flight_segments;
    var initial_condition;

    function parser(){
            document.getElementById('mapGen').style.display="block";
            /*
            ** First, read the file that is saved in the variable IC.
            */
            var ic=IC.split("||");
            initial_condition=new Array();
            for(var i=0;i<ic.length;i++){
                    if (ic[i].indexOf("<gc:lambda")!=-1){
                            initial_condition[1]=new Array();
                            var temp1=ic[i].split('"');
                            initial_condition[1][0]="lambda";
                            initial_condition[1][1]=temp1[1];
                            initial_condition[1][2]=temp1[3];
                    }else if (ic[i].indexOf("<gc:phi")!=-1){
                            initial_condition[0]=new Array();
                            var temp1=ic[i].split('"');
                            initial_condition[0][0]="phi";
                            initial_condition[0][1]=temp1[1];
                            initial_condition[0][2]=temp1[3];
                    }
            }

            /*
            ** First, read the file that is saved in the variable FI.
            */
            var line=FI.split("||");
            /*
            ** Then, find how many flight segments and constraints there are, and locate them.
            */
            var flight_segment=0;
            var constraint=0;
            var index_fido=0;
            var index_constraint=0;
            constraints=new Array();
            var modificable=false;
            flight_segments=new Array();

            /*
            ** Separamos las lineas en caso de que esten unidas
            */
            /*var enter=new Array();
            var index_enter=0;
            for(var i=0;i<line.length;i++){
                    var temp1=line[i].split(">");
                    for (var j=0; j<temp1.length; j++){
                            if (temp1[j].length>0){
                                    enter[index_enter]=temp1[j]+">";
                                    index_enter+=1;
                            }
                    }
            }
            line=new Array();
            for (var i=0; i<enter.length; i++){
                    line[i]=enter[i];
            }*/


            /*
            ** Localizamos los comentarios para luego omitirlos
            */
            var comment=0;
            var index_comment=0;
            var comments=new Array();
            for (var i=0;i<line.length;i++){
                    if ((line[i].replace(/^\s+|\s+$/g,"").indexOf("<!--")!=-1)&&(comment==0)){
                            comments[index_comment]=new Array();
                            comments[index_comment][0]=i;
                            comment=1;
                    }
                    if ((comment==1)&&(line[i].replace(/^\s+|\s+$/g,"").indexOf("-->")!=-1)){
                            comments[index_comment][1]=i;
                            comment=0;
                            if(comments[index_comment][0]!=comments[index_comment][1]) index_comment+=1;
                    }
            }

            var new_comments=new Array();
            for (var i=0;i<comments.length;i++){
                    for (var j=comments[i][0];j<=comments[i][1];j++){
                            new_comments.push(j);
                    }
            }

            /*
            ** Localizamos los FS y las restricciones
            */
            for (var i=0;i<line.length;i++){
                    if ((line[i].indexOf("<fido:flight_segment id")!=-1)&&(flight_segment==0)&&(new_comments.indexOf(i)==-1)){
                            flight_segments[index_fido]=new Array();
                            flight_segments[index_fido][0]=i;
                            flight_segment=1;
                    }
                    if ((line[i].indexOf("<fido:constraint id")!=-1)&&(constraint==0)&&(new_comments.indexOf(i)==-1)){
                            constraints[index_constraint]=new Array();
                            constraints[index_constraint][0]=i;
                            constraint=1;
                    }
                    if ((flight_segment==1)&&(line[i].indexOf("</fido:flight_segment>")!=-1)){
                            flight_segments[index_fido][1]=i;
                            flight_segment=0;
                            index_fido+=1;
                    }
                    if ((constraint==1)&&(line[i].indexOf("</fido:constraint>")!=-1)){
                            constraints[index_constraint][1]=i;
                            constraint=0;
                            index_constraint+=1;
                    }
            }
            /*
            ** FLIGHT SEGMENTS: 
            */
            for (var i=0;i<flight_segments.length;i++){

                    for (var j=flight_segments[i][0];j<=flight_segments[i][1];j++){
                            if (line[j].indexOf("<codo:composite description")!=-1){
                                    var temp1=line[j].split('"');
                                    flight_segments[i][2]=temp1[1];
                                    flight_segments[i][3]=temp1[3];
                                    j+=2;
                                    if (line[j].indexOf('<codo:parameter name="track_spec_list"')!=-1){
                                            var temp2=line[j].split('"');
                                            flight_segments[i][4]=temp2[3];
                                            j+=2;
                                            var index_point=0;
                                            flight_segments[i][5]=new Array();
                                            while(line[j].indexOf("</codo:parameter>")==-1){
                                                    flight_segments[i][5][index_point]=new Array();
                                                    if(line[j].indexOf("<spi:point")!=-1){
                                                            var temp4=line[j].split('"');
                                                            flight_segments[i][5][index_point][0]=temp4[1];
                                                            while(line[j].indexOf("</spi:point>")==-1){
                                                                    var temp3=line[j].split('"');
                                                                    if (line[j].indexOf("<gc:latitude")!=-1){
                                                                            flight_segments[i][5][index_point][1]=new Array();
                                                                            flight_segments[i][5][index_point][1][0]=(line[j].replace(/^\s+/,"")).substr(4,(line[j].replace(/^\s+/,"")).indexOf(" ")-4);
                                                                            flight_segments[i][5][index_point][1][1]=temp3[1];
                                                                            flight_segments[i][5][index_point][1][2]=temp3[3];
                                                                    }else if(line[j].indexOf("<gc:longitude")!=-1){
                                                                            flight_segments[i][5][index_point][2]=new Array();
                                                                            flight_segments[i][5][index_point][2][0]=(line[j].replace(/^\s+/,"")).substr(4,(line[j].replace(/^\s+/,"")).indexOf(" ")-4);
                                                                            flight_segments[i][5][index_point][2][1]=temp3[1];
                                                                            flight_segments[i][5][index_point][2][2]=temp3[3];
                                                                    }else if(line[j].indexOf("<gc:distance")!=-1){
                                                                            flight_segments[i][5][index_point][3]=new Array();
                                                                            flight_segments[i][5][index_point][3][0]=(line[j].replace(/^\s+/,"")).substr(4,(line[j].replace(/^\s+/,"")).indexOf(" ")-4);
                                                                            flight_segments[i][5][index_point][3][1]=temp3[1];
                                                                            flight_segments[i][5][index_point][3][2]=temp3[3];
                                                                    }
                                                                    j++;
                                                            }
                                                            if(flight_segments[i][5][index_point].length==3){
                                                                    flight_segments[i][5][index_point][3]=new Array();
                                                                    flight_segments[i][5][index_point][3][0]="distance";
                                                                    flight_segments[i][5][index_point][3][1]="[m]";
                                                                    flight_segments[i][5][index_point][3][2]="1250";
                                                            }
                                                            index_point+=1;
                                                    }
                                                    j++;
                                            }
                                            j++;
                                            if(line[j].indexOf('<codo:parameter name="clock_list"')!=-1){
                                                    var temp5=line[j].split('"');
                                                    flight_segments[i][6]=temp4[3];
                                                    j++;
                                            }
                                    }
                                    if(line[j].indexOf("<codo:twaypoint")!=-1){
                                            j++;
                                            var temp6=line[j].split('"');
                                            flight_segments[i][7]=new Array();
                                            flight_segments[i][7][0]=temp6[1];
                                            while(line[j].indexOf("</codo:twaypoint>")==-1){
                                                    var temp7=line[j].split('"');
                                                    if (line[j].indexOf("<gc:latitude")!=-1){
                                                            flight_segments[i][7][1]=new Array();
                                                            flight_segments[i][7][1][0]=(line[j].replace(/^\s+/,"")).substr(4,(line[j].replace(/^\s+/,"")).indexOf(" ")-4);
                                                            flight_segments[i][7][1][1]=temp7[1];
                                                            flight_segments[i][7][1][2]=temp7[3];
                                                    }else if(line[j].indexOf("<gc:longitude")!=-1){
                                                            flight_segments[i][7][2]=new Array();
                                                            flight_segments[i][7][2][0]=(line[j].replace(/^\s+/,"")).substr(4,(line[j].replace(/^\s+/,"")).indexOf(" ")-4);
                                                            flight_segments[i][7][2][1]=temp7[1];
                                                            flight_segments[i][7][2][2]=temp7[3];
                                                    }else if(line[j].indexOf("<gc:distance")!=-1){
                                                            flight_segments[i][7][3]=new Array();
                                                            flight_segments[i][7][3][0]=(line[j].replace(/^\s+/,"")).substr(4,(line[j].replace(/^\s+/,"")).indexOf(" ")-4);
                                                            flight_segments[i][7][3][1]=temp7[1];
                                                            flight_segments[i][7][3][2]=temp7[3];
                                                    }
                                                    j++;
                                            }
                                            if(flight_segments[i][7].length==3){
                                                    flight_segments[i][7][3]=new Array();
                                                    flight_segments[i][7][3][0]="distance";
                                                    flight_segments[i][7][3][1]="[m]";
                                                    flight_segments[i][7][3][2]="1250";
                                            }
                                    }
                            }
                            if (line[j].indexOf("<fido:fs_trigger>")!=-1){
                                    j++;
                                    if(line[j].indexOf("<codo:twaypoint")!=-1){
                                            j++;
                                            var temp8=line[j].split('"');
                                            flight_segments[i][8]=new Array();
                                            flight_segments[i][8][0]=temp8[1];
                                            while(line[j].indexOf("</codo:twaypoint>")==-1){
                                                    var temp9=line[j].split('"');
                                                    if (line[j].indexOf("<gc:latitude")!=-1){
                                                            flight_segments[i][8][1]=new Array();
                                                            flight_segments[i][8][1][0]=(line[j].replace(/^\s+/,"")).substr(4,(line[j].replace(/^\s+/,"")).indexOf(" ")-4);
                                                            flight_segments[i][8][1][1]=temp9[1];
                                                            flight_segments[i][8][1][2]=temp9[3];
                                                    }else if(line[j].indexOf("<gc:longitude")!=-1){
                                                            flight_segments[i][8][2]=new Array();
                                                            flight_segments[i][8][2][0]=(line[j].replace(/^\s+/,"")).substr(4,(line[j].replace(/^\s+/,"")).indexOf(" ")-4);
                                                            flight_segments[i][8][2][1]=temp9[1];
                                                            flight_segments[i][8][2][2]=temp9[3];
                                                    }else if(line[j].indexOf("<gc:distance")!=-1){
                                                            flight_segments[i][8][3]=new Array();
                                                            flight_segments[i][8][3][0]=(line[j].replace(/^\s+/,"")).substr(4,(line[j].replace(/^\s+/,"")).indexOf(" ")-4);
                                                            flight_segments[i][8][3][1]=temp9[1];
                                                            flight_segments[i][8][3][2]=temp9[3];
                                                    }
                                                    j++;
                                            }
                                            if(flight_segments[i][8].length==3){
                                                    flight_segments[i][8][3]=new Array();
                                                    flight_segments[i][8][3][0]="distance";
                                                    flight_segments[i][8][3][1]="[m]";
                                                    flight_segments[i][8][3][2]="1250";
                                            }
                                    }
                            }
                    }
            }

            /*
            ** If the fligh segment doesn't contain coordinates, we look into de OCM to find them for each point name.
            */
            var arg_find="";
            for (var i=0;i<flight_segments.length;i++){
                    if (flight_segments[i][7]!=null){
                            if (flight_segments[i][7].length==1){
                                    if (i==0){
                                            arg_find+=flight_segments[i][7][0]+','+i+',7';
                                    }
                                    else{
                                            arg_find+="||"+flight_segments[i][7][0]+','+i+',7';
                                    }
                            }
                    }
                    if (flight_segments[i][8]!=null){
                            if (flight_segments[i][8].length==1){
                                    if (i==0){
                                            arg_find+=flight_segments[i][8][0]+','+i+',8';
                                    }
                                    else{
                                            arg_find+="||"+flight_segments[i][8][0]+','+i+',8';
                                    }
                            }
                    }
            }
            if (arg_find!="") xajax_find_points(arg_find);


            /*
            ** CONSTRAINTS: first step, locate each inequation and extract data (type of restriction, g1 and g2).
            */
            gc_constraints=new Array();
            gc_constraints[0]=new Array(); // This will be for inequations
            gc_constraints[1]=new Array(); // This will be for the application area
            /* Array con las N restricciones.
            **
            **  	[[restriction_type_1	[restriction_type_2	[restriction_type_N
            **	  g1_1		    ,    g1_2		  ....   g1_N
            **	  g2_1		  ]	 g2_2		 ]  	 g2_N		 ]
            **	 [app_area_1			
            **	  min_Hp_1
            **	  max_Hp_1
            **	  [NAME_1,[latitude_1 
            **		  longitude_1 
            **		  distance_1]
            **	   NAME_2,[latitude_2
            **		  longitude_2
            **		  distance_2]
            **	   ..		   ..
            **	   ..		   ..
            **	   ..		   ..
            **	   NAME_N,[latitude_N
            **		   longitude_N
            **		   distance_N]]
            */
            var index_spiPoint;
            var found_spiPoint;
            var spiPoint=new Array();
            for (var i=0;i<constraints.length;i++){
                    gc_constraints[0][i]=new Array();
                    gc_constraints[1][i]=new Array();
                    spiPoint[i]=new Array();
                    index_spiPoint=0;
                    found_spiPoint=0;
                    for (var j=constraints[i][0];j<=constraints[i][1];j++){
                            if (line[j].indexOf("<fido:inequation magnitude=")!=-1){
                                    gc_constraints[0][i][0]=new Array();
                                    gc_constraints[0][i][0][0]=line[j].substr(line[j].indexOf("magnitude=")+11,line[j].indexOf("type=")-line[j].indexOf("magnitude=")-13);
                                    gc_constraints[0][i][0][1]=line[j].substr(line[j].indexOf("type=")+6,line[j].indexOf(">")-line[j].indexOf("type=")-7);
                            }else if (line[j].indexOf("<fido:function_g1")!=-1){
                                    j++;
                                    if (line[j].indexOf("<gc:function")!=-1){
                                            gc_constraints[0][i][1]=new Array();
                                            var temp=line[j].split('"');
                                            gc_constraints[0][i][1][0]=temp[1];
                                            gc_constraints[0][i][1][1]=temp[3];
                                            gc_constraints[0][i][1][2]=temp[5];
                                    }			
                            }else if (line[j].indexOf("<fido:function_f")!=-1){
                                    j++;
                                    if (line[j].indexOf("<gc:function")!=-1){
                                            gc_constraints[0][i][2]=new Array();
                                            var temp=line[j].split('"');
                                            gc_constraints[0][i][2][0]=temp[1];
                                            gc_constraints[0][i][2][1]=temp[3];
                                            gc_constraints[0][i][2][2]=temp[5];
                                            gc_constraints[0][i][2][3]=temp[7];
                                            gc_constraints[0][i][2][4]=temp[9];
                                            gc_constraints[0][i][2][5]=temp[11];
                                    }
                            }else if (line[j].indexOf("<fido:function_g2")!=-1){
                                    j++;
                                    if (line[j].indexOf("<gc:function")!=-1){
                                            gc_constraints[0][i][3]=new Array();
                                            var temp=line[j].split('"');
                                            gc_constraints[0][i][3][0]=temp[1];
                                            gc_constraints[0][i][3][1]=temp[3];
                                            gc_constraints[0][i][3][2]=temp[5];
                                    }
                            }else if (line[j].indexOf("<spi:volumeDoA")!=-1){
                                    gc_constraints[1][i][0]="volumeDoA";
                                    while(line[j].indexOf("</spi:volumeDoA")==-1){
                                            j++;
                                            if (line[j].indexOf("<spi:min_Hp")!=-1){
                                                    gc_constraints[1][i][1]=new Array();
                                                    var temp=line[j].split('"');
                                                    gc_constraints[1][i][1][0]="min_Hp";
                                                    gc_constraints[1][i][1][1]=temp[1];
                                                    gc_constraints[1][i][1][2]=temp[3];
                                            }else if (line[j].indexOf("<spi:max_Hp")!=-1){
                                                    gc_constraints[1][i][2]=new Array();
                                                    var temp=line[j].split('"');
                                                    gc_constraints[1][i][2][0]="max_Hp";
                                                    gc_constraints[1][i][2][1]=temp[1];
                                                    gc_constraints[1][i][2][2]=temp[3];
                                            }
                                            if ((line[j].indexOf("<spi:point")!=-1)&&(found_spiPoint==0)){
                                                    spiPoint[i][index_spiPoint]=new Array();
                                                    spiPoint[i][index_spiPoint][0]=j;
                                                    found_spiPoint=1;
                                            }
                                            if ((found_spiPoint==1)&&(line[j].indexOf("</spi:point")!=-1)){
                                                    spiPoint[i][index_spiPoint][1]=j;
                                                    found_spiPoint=0;
                                                    index_spiPoint+=1;
                                            }
                                    }
                            }else if (line[j].indexOf("<spi:segmentDoA")!=-1){
                                    gc_constraints[1][i][0]="segmentDoA";
                                    while(line[j].indexOf("</spi:segmentDoA")==-1){
                                            j++;
                                            if (line[j].indexOf("<spi:min_Hp")!=-1){
                                                    gc_constraints[1][i][1]=new Array();
                                                    var temp=line[j].split('"');
                                                    gc_constraints[1][i][1][0]="min_Hp";
                                                    gc_constraints[1][i][1][1]=temp[1];
                                                    gc_constraints[1][i][1][2]=temp[3];
                                            }else if (line[j].indexOf("<spi:max_Hp")!=-1){
                                                    gc_constraints[1][i][2]=new Array();
                                                    var temp=line[j].split('"');
                                                    gc_constraints[1][i][2][0]="max_Hp";
                                                    gc_constraints[1][i][2][1]=temp[1];
                                                    gc_constraints[1][i][2][2]=temp[3];
                                            }
                                            if ((line[j].indexOf("<spi:point")!=-1)&&(found_spiPoint==0)){
                                                    spiPoint[i][index_spiPoint]=new Array();
                                                    spiPoint[i][index_spiPoint][0]=j;
                                                    found_spiPoint=1;
                                            }
                                            if ((found_spiPoint==1)&&(line[j].indexOf("</spi:point")!=-1)){
                                                    spiPoint[i][index_spiPoint][1]=j;
                                                    found_spiPoint=0;
                                                    index_spiPoint+=1;
                                            }
                                    }
                            }else if (line[j].indexOf("<spi:pointDoA")!=-1){
                                    gc_constraints[1][i][0]="pointDoA";
                                    while(line[j].indexOf("</spi:pointDoA")==-1){
                                            j++;
                                            if (line[j].indexOf("<spi:min_Hp")!=-1){
                                                    gc_constraints[1][i][1]=new Array();
                                                    var temp=line[j].split('"');
                                                    gc_constraints[1][i][1][0]="min_Hp";
                                                    gc_constraints[1][i][1][1]=temp[1];
                                                    gc_constraints[1][i][1][2]=temp[3];
                                            }else if (line[j].indexOf("<spi:max_Hp")!=-1){
                                                    gc_constraints[1][i][2]=new Array();
                                                    var temp=line[j].split('"');
                                                    gc_constraints[1][i][2][0]="max_Hp";
                                                    gc_constraints[1][i][2][1]=temp[1];
                                                    gc_constraints[1][i][2][2]=temp[3];
                                            }
                                            if ((line[j].indexOf("<spi:point")!=-1)&&(found_spiPoint==0)){
                                                    spiPoint[i][index_spiPoint]=new Array();
                                                    spiPoint[i][index_spiPoint][0]=j;
                                                    found_spiPoint=1;
                                            }
                                            if ((found_spiPoint==1)&&(line[j].indexOf("</spi:point")!=-1)){
                                                    spiPoint[i][index_spiPoint][1]=j;
                                                    found_spiPoint=0;
                                                    index_spiPoint+=1;
                                            }
                                    }
                            }
                    }
            }

            var temp;
            for (var i=0;i<constraints.length;i++){//todas las restricciones
                    gc_constraints[1][i][3]=new Array();
                    for (var j=0;j<spiPoint[i].length;j++){//todos los puntos de cada restriccion
                            gc_constraints[1][i][3][j]=new Array();
                            for (var k=spiPoint[i][j][0];k<=spiPoint[i][j][1];k++){//lineas implicadas del archivo fuente
                                    if(line[k].indexOf("<spi:point name=")!=-1){
                                            var temp1=line[k].split('"');
                                            gc_constraints[1][i][3][j][0]=temp1[1];
                                    }
                                    if (line[k].indexOf("<gc:latitude")!=-1){
                                            temp=line[k].split('"');
                                            gc_constraints[1][i][3][j][1]=new Array();
                                            gc_constraints[1][i][3][j][1][0]=(line[k].replace(/^\s+/,"")).substr(4,(line[k].replace(/^\s+/,"")).indexOf(" ")-4);
                                            gc_constraints[1][i][3][j][1][1]=temp[1];
                                            gc_constraints[1][i][3][j][1][2]=temp[3];
                                    }else if(line[k].indexOf("<gc:longitude")!=-1){
                                            temp=line[k].split('"');
                                            gc_constraints[1][i][3][j][2]=new Array();
                                            gc_constraints[1][i][3][j][2][0]=(line[k].replace(/^\s+/,"")).substr(4,(line[k].replace(/^\s+/,"")).indexOf(" ")-4);
                                            gc_constraints[1][i][3][j][2][1]=temp[1];
                                            gc_constraints[1][i][3][j][2][2]=temp[3];
                                    }else if(line[k].indexOf("<gc:distance")!=-1){
                                            temp=line[k].split('"');
                                            gc_constraints[1][i][3][j][3]=new Array();
                                            gc_constraints[1][i][3][j][3][0]=(line[k].replace(/^\s+/,"")).substr(4,(line[k].replace(/^\s+/,"")).indexOf(" ")-4);
                                            gc_constraints[1][i][3][j][3][1]=temp[1];
                                            gc_constraints[1][i][3][j][3][2]=temp[3];
                                    }
                            }
                    }
            }
            setTimeout("load_map()",900);

            //setTimeout("alert(flight_segments)",700);
            //setTimeout("alert(gc_constraints)",700);
    }
    </script>

        <script type="text/javascript" src="https://maps.google.com/maps/api/js?v=3.1&sensor=false"></script>
        <script type="text/javascript">
            var map;
            var prueba;
            var polyLine;
            var markers;
            var polyLine_composite;
            var markers_composite;
            var markers_initial;
            var g = google.maps;
            var infowindow;

            var polygon = new Array();
            var markers_polygon = new Array();
            var index_constraint;

            var initMap = function(mapHolder) {

                    var mapOptions = {
                            zoom: 4,
                            center: new g.LatLng(0,0), 
                            mapTypeId: g.MapTypeId.HYBRID,
                            draggableCursor: 'auto',
                            draggingCursor: 'move',
                            disableDoubleClickZoom: true
                    };
                    map=null;
                    polyLine=new Array();
                    markers = new Array();
                    polyLine_composite = new Array();
                    markers_composite = new Array();
                    map = new g.Map(document.getElementById(mapHolder), mapOptions);
                    infowindow = new google.maps.InfoWindow({content: ""});
                    mapHolder = null;
                    mapOptions = null;
            };

            var initPolyline = function(index,composite) {
                    if (composite=="empty"){
                            var polyOptions = {
                                    strokeColor: "green",
                                    strokeOpacity: 2,
                                    strokeWeight: 4,
                                    clickable: false
                            };
                    }else{
                            var polyOptions = {
                                    strokeColor: "blue",
                                    strokeOpacity: 2,
                                    strokeWeight: 4,
                                    clickable: true
                            };
                    }
                    polyLine[index] = new g.Polyline(polyOptions);
                    polyLine[index].setMap(map);
            };

            var initPolygon = function(index) {

                    var polyOptions = {
                            strokeColor: "red",
                            strokeOpacity: 1,
                            strokeWeight: 2,
                            fillColor: "red",
                            fillOpacity: 0.25,
                            clickable: false
                    };
                    polygon[index] = new g.Polygon(polyOptions);
                    polygon[index].setMap(map);
                    g.event.addListener(polygon[index], "click", function(event) {
                            var inequation=gc_constraints[0][index_constraint][0][0]+" "+gc_constraints[0][index_constraint][0][1];
                            var function_g1=gc_constraints[0][index_constraint][1][0]+" "+gc_constraints[0][index_constraint][1][1]+" "+gc_constraints[0][index_constraint][1][2];
                            var function_f=gc_constraints[0][index_constraint][2][0]+" "+gc_constraints[0][index_constraint][2][1]+" "+gc_constraints[0][index_constraint][2][2]+" "+gc_constraints[0][index_constraint][2][3]+" "+gc_constraints[0][index_constraint][2][4]+" "+gc_constraints[0][index_constraint][2][5];
                            var function_g2=gc_constraints[0][index_constraint][3][0]+" "+gc_constraints[0][index_constraint][3][1]+" "+gc_constraints[0][index_constraint][3][2];
                            var contentString='<span style="font-weight:bold; font-family:verdana">Restriction type: '+inequation+'</span><br><span style="font-family:verdana">-function_g1: '+function_g1+'<br>-function_f: '+function_f+'<br>-function_g2: '+function_g2+'</span>'+"<br><br><input type='button' id='modify_constraint' name='modify_constraint_button' value='Modify Constraint' onClick=modify_constraint("+index+") ><br><input type='button' id='delete_constraint' name='delete_constraint_button' value='Delete Constraint' onClick=delete_constraint("+index+") ><br><input type='button' id='add_constraint' name='add_constraint_button' value='Add Constraint' onClick=add_constraint("+index+") >";
                            infowindow.setOptions({content: contentString});
                            infowindow.position=event.latLng;
                            infowindow.open(map);
                    });
            };
            
            var markersPointCons = new Array();
            var initPointCons = function(point,n){
                    var constr=String(gc_constraints[1][n]);
                    var constrString=constr.split(",");
                    
                    var imageNormal = new google.maps.MarkerImage(
                            "images/red_chinch_opt.png",
                            new google.maps.Size(32, 32),
                            new google.maps.Point(0, 0),
                            new google.maps.Point(10, 30)
                    );
                    var marker = new google.maps.Marker({
                            position: point,
                            map: map,
                            icon: imageNormal,
                            title: "Click me to view point details."
                    });
                    markersPointCons[n]=marker;
                    google.maps.event.addListener(marker, "click", function() {
                    contentString="<div style='width:270px;height:160px'><span style='font-weight:bold; font-family:verdana'>Point Constraint "+(n+1)+"</span><br><span style='font-family:verdana'>Composite Description: null<br><br>Constraint: "+constrString[3]+"<br>-Latitude: "+constrString[6]+" "+constrString[5]+"<br>-Longitude: "+constrString[9]+" "+constrString[8]+"<br>-Distance: "+constrString[12]+" "+constrString[11]+"</span>"+"<br><br><input type='button' id='delete_fs_null' name='delete_fs_null_button' value='Delete Constraint' onClick=deletePointCons("+(n+1)+"); ></div>";
                    infowindow.setContent(contentString);
                    infowindow.open(map,marker);
                    });
                    return marker;
            }
            
            function deletePointCons(n){
                    oldVersionFS();
                    var line=FI.split("||");
                    var start=0;
                    var point=0;
                    var stop=0;
                    var cont3=0;
                    var constr=String(gc_constraints[1][n-1]);
                    var constrString=constr.split(",");
                    var nameConstr=constrString[3];

                    for (var m=0;m<line.length;m++){
                            if(line[m].indexOf('<spi:point name="'+nameConstr+'">')!=-1){
                                start=m;
                                cont3++;
                            }   
                            
                            if((line[m].indexOf('</fido:constraint>')!=-1)&&(cont3==1)){
                                stop=m;
                                cont3=0;    
                            }    
                    }
                    if(line[start-4].indexOf('<fido:constraint')!=-1){
                        start=start-4;
                    }else{
                        start=start-14;
                    }
                    point=start;
                    
                    var lineMod=function (num) { 
                        provi = line.slice(num+1); 
                        line = line.slice(0,num); 
                        line = line.concat(provi); 
                        return line;
                    }
                      
                    var temp = new Array();
                    for(var m=start; m<=stop;m++){
                        temp= lineMod(point);
                    }
                    
                    FI=temp.join("||");
                    xajax_modify_fi(FI);
                    setTimeout("xajax_show_repository('fi',document.main_form.repo_fi_select.options[document.main_form.repo_fi_select.selectedIndex].value)",800);
                    parser();
                    setTimeout("writeCons()",50);
            }
            
            function modify_fs_composite_null(i,index){
                    infowindow.close();
                    var opciones="toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, width=500, height=230";
                    newwindow=window.open('','',opciones);
                    var tmp = newwindow.document;
                    tmp.write('<html><head></head><body><form id="main" name="main_form"><span style="font-family:verdana;font-size:1em;font-weight:bold;">Flight Segment Edition</span><br><br><span style="font-family:verdana;font-size:0.8em;font-weight:normal;">New Twaypoint Name : </span><input type="text" id="name_fs_composite_null" name="name_fs_composite_null_textarea" value="'+flight_segments[i][index][0]+'"/'+'><br><span style="font-family:verdana;font-size:0.8em;font-weight:normal;">New Latitude '+flight_segments[i][index][1][1]+': </span><input type="text" id="latitude_fs_composite_null" name="latitude_fs_composite_null_textarea" value="'+flight_segments[i][index][1][2]+'"/'+'><br><span style="font-family:verdana;font-size:0.8em;font-weight:normal;">New Longitude '+flight_segments[i][index][2][1]+': </span><input type="text" id="longitude_fs_composite_null" name="longitude_fs_composite_null_textarea" value="'+flight_segments[i][index][2][2]+'" /'+'><br><span style="font-family:verdana;font-size:0.8em;font-weight:normal;">New Distance '+flight_segments[i][index][3][1]+': </span><input type="text" id="distance_fs_composite_null" name="distance_fs_composite_null_textarea" value="'+flight_segments[i][index][3][2]+'" /'+'><br><br><span style="font-family:verdana;font-size:0.6em;font-weight:normal;">***Leave empty boxes to keep old values</span><br><br><input type="button" id="ok_call_checker_fs_composite_null" name="ok_call_checker_fs_composite_null_button" value="Ok" onClick="window.opener.parent.checker_fs_composite_null(document.main_form.name_fs_composite_null_textarea.value,document.main_form.latitude_fs_composite_null_textarea.value,document.main_form.longitude_fs_composite_null_textarea.value,document.main_form.distance_fs_composite_null_textarea.value,'+i+','+index+'); self.close();" ><input type="button" id="cancel_call_checker_fs_composite_null" name="cancel_call_checker_fs_composite_null_button" value="Cancel" onClick="self.close();" ></form></body></html>');
                    tmp.close();
            }

            function checker_fs_composite_null(nombre,latitude,longitude,distance,i,index){
                oldVersionFS();
		if(isNaN(latitude)){
			alert("Latitude must be a number.");
			modify_fs_composite_null(i,index);
		}else if(isNaN(longitude)){
			alert("Longitude must be a number.");
			modify_fs_composite_null(i,index);
		}else if(isNaN(distance)){
			alert("Distance must be a number.");
			modify_fs_composite_null(i,index);
		}else if((flight_segments[i][index][1][1]=="[deg]")&&((latitude>180)||(latitude<-180))){
			alert("Latitude must be between -180 [deg] and 180 [deg].");
			modify_fs_composite_null(i,index);
		}else if((flight_segments[i][index][1][1]=="[rad]")&&((latitude>Math.PI)||(latitude<-Math.PI))){
			alert("Latitude must be between -PI [rad] and PI [rad]");
			modify_fs_composite_null(i,index);
		}else if((flight_segments[i][index][1][1]=="[deg]")&&((longitude>360)||(longitude<-360))){
			alert("Longitude must be between -360 [deg] and 360 [deg].");
			modify_fs_composite_null(i,index);
		}else if((flight_segments[i][index][1][1]=="[rad]")&&((longitude>2*Math.PI)||(longitude<-2*Math.PI))){
			alert("Longitude must be between -2*PI [rad] and 2*PI [rad].");
			modify_fs_composite_null(i,index);
		}else{
			if (nombre=="") latitude=flight_segments[i][index][0];
			if (latitude=="") latitude=flight_segments[i][index][1][2];
			if (longitude=="") longitude=flight_segments[i][index][2][2];
			if (distance=="") distance=flight_segments[i][index][3][2];
			if (flight_segments[i][index][1][1]=="[deg]"){
				var position=new g.LatLng(latitude,longitude);
			}else{
				var position=new g.LatLng((latitude*180)/Math.PI,(longitude*180)/Math.PI);
			}
			var path = polyLine[i].getPath();
			if (markers[i][0].getPosition()==path.getAt(0)) path.setAt(0,position);
			else path.setAt(1,position);
			markers[i][0].setPosition(position);	
			if(i!=polyLine.length-1){
				var found=-1;
				for(var m=i+1; m<polyLine.length; m++){
					var map=polyLine[m].getMap();
					if(map!=null){
						found=m;
						break;
					}
				}
				var path2 = polyLine[found].getPath();
				path2.setAt(1,position);
				if ((flight_segments[found][2]!=null)&&(flight_segments[found][2]!="null")){
					var path3=polyLine_composite[found].getPath();
					path3.setAt(0,position);
				}
			}

			if ((nombre!=flight_segments[i][index][0])||(latitude!=flight_segments[i][index][1][2])||(longitude!=flight_segments[i][index][2][2])||(distance!=flight_segments[i][index][3][2])){
				flight_segments[i][index][1][2]=latitude;
				flight_segments[i][index][2][2]=longitude;
				flight_segments[i][index][3][2]=distance;
				var line=FI.split("||");
				var found=false;
				for (var m=0;m<line.length;m++){
					if(((line[m].indexOf('<spi:point name="'+flight_segments[i][index][0]+'">')!=-1)||(line[m].indexOf('<spi:point name="'+flight_segments[i][index][0]+'"/'+'>')!=-1))&&(found==false)){
						m--;
						while(line[m].indexOf("<fido:flight_segment ")==-1){
							m--;
							found=true;
						}
						m++;
						while(line[m].indexOf("</fido:flight_segment>")==-1){
							if(line[m].indexOf('<spi:point name="'+flight_segments[i][index][0]+'">')!=-1){
								line[m]=line[m].substr(0,line[m].indexOf("name=")+6)+nombre+'">';
								m++;
								if(line[m].indexOf('<gc:latitude')!=-1){
									line[m]=line[m].substr(0,line[m].indexOf("value=")+7)+latitude+'"/'+">";
								}else{
									line.splice(m,0,'<gc:latitude units="'+flight_segments[i][index][1][1]+'" value="'+latitude+'"/'+">");
								}
								m++;
								if(line[m].indexOf('<gc:longitude')!=-1){
									line[m]=line[m].substr(0,line[m].indexOf("value=")+7)+longitude+'"/'+">";
								}else{
									line.splice(m,0,'<gc:longitude units="'+flight_segments[i][index][2][1]+'" value="'+longitude+'"/'+">");
								}
								m++;
								if(line[m].indexOf('<gc:distance')!=-1){
									line[m]=line[m].substr(0,line[m].indexOf("value=")+7)+distance+'"/'+">";
								}else{
									line.splice(m,0,'<gc:distance units="[m]" value="'+distance+'"/'+">");
								}
							}else if(line[m].indexOf('<spi:point name="'+flight_segments[i][index][0]+'"/'+'>')!=-1){
								line[m]=line[m].substr(0,line[m].indexOf("name=")+6)+nombre+'">';
								m++;
								line.splice(m,0,'<gc:latitude units="'+flight_segments[i][index][1][1]+'" value="'+latitude+'"/'+">");
								m++;
								line.splice(m,0,'<gc:longitude units="'+flight_segments[i][index][2][1]+'" value="'+longitude+'"/'+">");
								m++;
								line.splice(m,0,'<gc:distance units="[m]" value="'+distance+'"/'+">");
								m++;
								line.splice(m,0,'</spi:point>');
							}
							m++;
						}
					}
				}
				flight_segments[i][index][0]=nombre;
				FI=line.join("||");
				xajax_modify_fi(FI);
				setTimeout("xajax_show_repository(document.main_form.repo_fi_select.options[document.main_form.repo_fi_select.selectedIndex].value)",400);
				if (flight_segments[i][index][0]!=null) {var twaypoint_name=flight_segments[i][index][0];}
				else {var twaypoint_name="";}
				//contentString="<div style='width:350px;height:300px'><span style='font-weight:bold; font-family:verdana'>Flight Segment "+(i+1)+"</span><br><span style='font-family:verdana'>Composite Description: null<br><br>Twaypoint: "+twaypoint_name+"<br>-Latitude: "+flight_segments[i][index][1][2]+" "+flight_segments[i][index][1][1]+"<br>-Longitude: "+flight_segments[i][index][2][2]+" "+flight_segments[i][index][2][1]+"<br>-Distance: "+flight_segments[i][index][3][2]+" "+flight_segments[i][index][3][1]+"</span>"+"<br><br><input type='button' id='modify_fs_null' name='modify_fs_null_button' value='Modify Twaypoint' onClick=modify_fs_composite_null("+i+","+index+") ><br><input type='button' id='delete_fs_null' name='delete_fs_null_button' value='Delete Flight Segment' onClick=delete_fs_composite_null("+i+","+index+") ></div>";
				//infowindow.setContent(contentString);
			}
			infowindow.open(map,markers[i][0]);
                        readAgain();
		}
            }

            function delete_fs_composite_null(i,index){
                    oldVersionFS();
                    infowindow.close();
                    polyLine[i].setMap(null);
                    markers[i][0].setMap(null);
                    markers[i][0]=null;
                    var found=-1;
                    for(var m=i-1; m>=0; m--){
                            var map=polyLine[m].getMap();
                            if(map!=null){
                                    found=m;
                                    break;
                            }
                    }
                    if (found==-1) var position=markers_initial.getPosition();
                    else var position=markers[found][0].getPosition();
                    if(i!=polyLine.length-1){
                            var found2=-1;
                            for(var m=i+1; m<polyLine.length; m++){
                                    var map=polyLine[m].getMap();
                                    if(map!=null){
                                            found2=m;
                                            break;
                                    }
                            }
                            var path = polyLine[found2].getPath();
                            if (found==-1) path.setAt(0,position);
                            else path.setAt(1,position);
                            if ((flight_segments[found2][2]!=null)&&(flight_segments[found2][2]!="null")){
                                    var path2=polyLine_composite[found2].getPath();
                                    path2.setAt(0,position);
                            }
                    }
                    var line=FI.split("||");
                    var start=0;
                    var start_index;
                    var stop=0;
                    var found=false;
                    for (var m=0;m<line.length;m++){
                            if(((line[m].indexOf('<spi:point name="'+flight_segments[i][index][0]+'">')!=-1)||(line[m].indexOf('<spi:point name="'+flight_segments[i][index][0]+'"/'+'>')!=-1))&&(found==false)){
                                    m--;
                                    while(line[m].indexOf("<fido:flight_segment ")==-1){
                                            m--;
                                            found=true;
                                    }
                                    start=m;
                                    start_index=line[m].indexOf('<fido:flight_segment ');
                                    m++;
                                    while(line[m].indexOf("</fido:flight_segment>")==-1){
                                            stop=m;
                                            m++;
                                    }
                            }
                    }
                    var temp=new Array();
                    var index_array=0;
                    for (var m=0; m<line.length;m++){
                            if((m<start)||(m>stop+1)){
                                    temp[index_array]=line[m];
                                    index_array++;
                            }else if(m==start){
                                    temp[index_array]=line[m].substr(0,start_index);
                                    index_array++;
                            }
                    }
                    FI=temp.join("||");
                    xajax_modify_fi(FI);
                    setTimeout("xajax_show_repository('fi',document.main_form.repo_fi_select.options[document.main_form.repo_fi_select.selectedIndex].value)",800);
            }

            function modify_fs_composite(i,index){
                    infowindow.close();
                    var opciones="toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, width=500, height=230";
                    newwindow=window.open('','',opciones);
                    var tmp = newwindow.document;
                    tmp.write('<html><head></head><body><form id="main" name="main_form"><span style="font-family:verdana;font-size:1em;font-weight:bold;">Flight Segment Edition</span><br><br><span style="font-family:verdana;font-size:0.8em;font-weight:normal;">New Twaypoint Name : </span><input type="text" id="name_fs_composite" name="name_fs_composite_textarea" value="'+flight_segments[i][index][0]+'"/'+'><br><span style="font-family:verdana;font-size:0.8em;font-weight:normal;">New Latitude '+flight_segments[i][index][1][1]+': </span><input type="text" id="latitude_fs_composite" name="latitude_fs_composite_textarea" value="'+flight_segments[i][index][1][2]+'" /'+'><br><span style="font-family:verdana;font-size:0.8em;font-weight:normal;">New Longitude '+flight_segments[i][index][2][1]+': </span><input type="text" id="longitude_fs_composite" name="longitude_fs_composite_textarea" value="'+flight_segments[i][index][2][2]+'" /'+'><br><span style="font-family:verdana;font-size:0.8em;font-weight:normal;">New Distance '+flight_segments[i][index][3][1]+': </span><input type="text" id="distance_fs_composite" name="distance_fs_composite_textarea" value="'+flight_segments[i][index][3][2]+'" /'+'><br><br><span style="font-family:verdana;font-size:0.6em;font-weight:normal;">***Leave empty boxes to keep old values</span><br><br><input type="button" id="ok_call_checker_fs_composite" name="ok_call_checker_fs_composite_button" value="Ok" onClick="window.opener.parent.checker_fs_composite(document.main_form.name_fs_composite_textarea.value,document.main_form.latitude_fs_composite_textarea.value,document.main_form.longitude_fs_composite_textarea.value,document.main_form.distance_fs_composite_textarea.value,'+i+','+index+'); self.close();" ><input type="button" id="cancel_call_checker_fs_composite" name="cancel_call_checker_fs_composite_button" value="Cancel" onClick="self.close();" ></form></body></html>');
                    tmp.close();
            }

            function checker_fs_composite(nombre,latitude,longitude,distance,i,index){
                    if(isNaN(latitude)){
                            alert("Latitude must be a number.");
                            modify_fs_composite(i,index);
                    }else if(isNaN(longitude)){
                            alert("Longitude must be a number.");
                            modify_fs_composite(i,index);
                    }else if(isNaN(distance)){
                            alert("Distance must be a number.");
                            modify_fs_composite(i,index);
                    }else if((flight_segments[i][index][1][1]=="[deg]")&&((latitude>180)||(latitude<-180))){
                            alert("Latitude must be between -180 [deg] and 180 [deg].");
                            modify_fs_composite(i,index);
                    }else if((flight_segments[i][index][1][1]=="[rad]")&&((latitude>Math.PI)||(latitude<-Math.PI))){
                            alert("Latitude must be between -PI [rad] and PI [rad]");
                            modify_fs_composite(i,index);
                    }else if((flight_segments[i][index][1][1]=="[deg]")&&((longitude>360)||(longitude<-360))){
                            alert("Longitude must be between -360 [deg] and 360 [deg].");
                            modify_fs_composite(i,index);
                    }else if((flight_segments[i][index][1][1]=="[rad]")&&((longitude>2*Math.PI)||(longitude<-2*Math.PI))){
                            alert("Longitude must be between -2*PI [rad] and 2*PI [rad].");
                            modify_fs_composite(i,index);
                    }else{
                            if (nombre=="") nombre=flight_segments[i][index][0];
                            if (latitude=="") latitude=flight_segments[i][index][1][2];
                            if (longitude=="") longitude=flight_segments[i][index][2][2];
                            if (distance=="") distance=flight_segments[i][index][3][2];
                            if (flight_segments[i][index][1][1]=="[deg]"){
                                    var position=new g.LatLng(latitude,longitude);
                            }else{
                                    var position=new g.LatLng((latitude*180)/Math.PI,(longitude*180)/Math.PI);
                            }
                            var path = polyLine[i].getPath();
                            if (markers[i][0].getPosition()==path.getAt(0)) path.setAt(0,position);
                            else path.setAt(1,position);
                            markers[i][0].setPosition(position);
                            if(i!=polyLine.length-1){
                                    var found=-1;
                                    for(var m=i+1; m<polyLine.length; m++){
                                            var map=polyLine[m].getMap();
                                            if(map!=null){
                                                    found=m;
                                                    break;
                                            }
                                    }
                                    var path2 = polyLine[found].getPath();
                                    path2.setAt(1,position);
                                    if ((flight_segments[found][2]!=null)&&(flight_segments[found][2]!="null")){
                                            var path3=polyLine_composite[found].getPath();
                                            path3.setAt(0,position);
                                    }
                            }
                            var path4=polyLine_composite[i].getPath();
                            path4.setAt(path4.getLength()-1,position);
                            if ((nombre!=flight_segments[i][index][0])||(latitude!=flight_segments[i][index][1][2])||(longitude!=flight_segments[i][index][2][2])||(distance!=flight_segments[i][index][3][2])){
                                    flight_segments[i][index][1][2]=latitude;
                                    flight_segments[i][index][2][2]=longitude;
                                    flight_segments[i][index][3][2]=distance;
                                    var line=FI.split("||");
                                    var found=false;
                                    for (var m=0;m<line.length;m++){
                                            if(((line[m].indexOf('<spi:point name="'+flight_segments[i][index][0]+'">')!=-1)||(line[m].indexOf('<spi:point name="'+flight_segments[i][index][0]+'"/'+'>')!=-1))&&(found==false)){
                                                    m--;
                                                    while(line[m].indexOf("<fido:flight_segment ")==-1){
                                                            m--;
                                                            found=true;
                                                    }
                                                    m++;
                                                    while(line[m].indexOf("</fido:flight_segment>")==-1){
                                                            if(line[m].indexOf('<spi:point name="'+flight_segments[i][index][0]+'">')!=-1){
                                                                    line[m]=line[m].substr(0,line[m].indexOf("name=")+6)+nombre+'">';
                                                                    m++;
                                                                    if(line[m].indexOf('<gc:latitude')!=-1){
                                                                            line[m]=line[m].substr(0,line[m].indexOf("value=")+7)+latitude+'"/'+">";
                                                                    }else{
                                                                            line.splice(m,0,'<gc:latitude units="'+flight_segments[i][index][1][1]+'" value="'+latitude+'"/'+">");
                                                                    }
                                                                    m++;
                                                                    if(line[m].indexOf('<gc:longitude')!=-1){
                                                                            line[m]=line[m].substr(0,line[m].indexOf("value=")+7)+longitude+'"/'+">";
                                                                    }else{
                                                                            line.splice(m,0,'<gc:longitude units="'+flight_segments[i][index][2][1]+'" value="'+longitude+'"/'+">");
                                                                    }
                                                                    m++;
                                                                    if(line[m].indexOf('<gc:distance')!=-1){
                                                                            line[m]=line[m].substr(0,line[m].indexOf("value=")+7)+distance+'"/'+">";
                                                                    }else{
                                                                            line.splice(m,0,'<gc:distance units="[m]" value="'+distance+'"/'+">");
                                                                    }
                                                            }else if(line[m].indexOf('<spi:point name="'+flight_segments[i][index][0]+'"/'+'>')!=-1){
                                                                    line[m]=line[m].substr(0,line[m].indexOf("name=")+6)+nombre+'">';
                                                                    m++;
                                                                    line.splice(m,0,'<gc:latitude units="'+flight_segments[i][index][1][1]+'" value="'+latitude+'"/'+">");
                                                                    m++;
                                                                    line.splice(m,0,'<gc:longitude units="'+flight_segments[i][index][2][1]+'" value="'+longitude+'"/'+">");
                                                                    m++;
                                                                    line.splice(m,0,'<gc:distance units="[m]" value="'+distance+'"/'+">");
                                                                    m++;
                                                                    line.splice(m,0,'</spi:point>');
                                                            }
                                                            m++;
                                                    }
                                            }
                                    }
                                    flight_segments[i][index][0]=nombre;
                                    FI=line.join("||");
                                    xajax_modify_fi(FI);
                                    setTimeout("xajax_show_repository('fi',document.main_form.repo_fi_select.options[document.main_form.repo_fi_select.selectedIndex].value)",800);

                                    var waypoint_list="";
                                    for(var j=0; j<flight_segments[i][5].length; j++){
                                            waypoint_list+="**Point Name: "+flight_segments[i][5][j][0]+"<br>    -Latitude: "+flight_segments[i][5][j][1][2]+" "+flight_segments[i][5][j][1][1]+"<br>    -Longitude: "+flight_segments[i][5][j][2][2]+" "+flight_segments[i][5][j][2][1]+"<br>    -Distance: "+flight_segments[i][5][j][3][2]+" "+flight_segments[i][5][j][3][1]+"<br>";
                                    }
                                    if (flight_segments[i][index][0]!=null) {var twaypoint_name=flight_segments[i][index][0];}
                                    else {var twaypoint_name="";}
                                    contentString="<div style='width:550px;height:230px'><span style='font-weight:bold; font-family:verdana'>Flight Segment "+(i+1)+"</span><br><span style='font-family:verdana'>Composite Description: "+flight_segments[i][2]+"<br>Composite Code: "+flight_segments[i][3]+"<br>Waypoint List:<br>"+waypoint_list+"<br>Twaypoint: "+twaypoint_name+"<br>-Latitude: "+flight_segments[i][index][1][2]+" "+flight_segments[i][index][1][1]+"<br>-Longitude: "+flight_segments[i][index][2][2]+" "+flight_segments[i][index][2][1]+"<br>-Distance: "+flight_segments[i][index][3][2]+" "+flight_segments[i][index][3][1]+"</span>"+"<br><br><input type='button' id='modify_fs_not_null' name='modify_fs_not_null_button' value='Modify Twaypoint' onClick=modify_fs_composite("+i+","+index+") ><br><input type='button' id='delete_fs_not_null' name='delete_fs_not_null_button' value='Delete Flight Segment' onClick=delete_fs_composite("+i+","+index+") ></div>";
                                    infowindow.setContent(contentString);
                            }
                            infowindow.open(map,markers[i][0]);
                    }
            }

            function convert_composite_to_null(i,index){
                    infowindow.close();
                    polyLine_composite[i].setMap(null);
                    for(var j=0; j<markers_composite[i].length; j++){
                            markers_composite[i][j].setMap(null);
                    }
                    var polyOptions = {
                            strokeColor: "green",
                            strokeOpacity: 2,
                            strokeWeight: 4,
                            clickable: false
                    };
                    polyLine[i].setOptions(polyOptions);
                    var line=FI.split("||");
                    var start=0;
                    var stop=0;
                    var found=false;
                    for (var m=0;m<line.length;m++){
                            if(((line[m].indexOf('<spi:point name="'+flight_segments[i][index][0]+'">')!=-1)||(line[m].indexOf('<spi:point name="'+flight_segments[i][index][0]+'"/'+'>')!=-1))&&(found==false)){
                                    m--;
                                    while(line[m].indexOf("<fido:flight_segment ")==-1){
                                            m--;
                                    }
                                    found=true;
                                    line[m]=line[m].substr(0,line[m].indexOf("FS_Code=")-1)+'>';
                                    m++;
                                    while(line[m].indexOf("<fido:fs_trigger>")==-1){
                                            if(line[m].indexOf('<codo:composite description')!=-1){
                                                    start=m;
                                            }
                                            stop=m-1;
                                            m++;
                                    }
                            }
                    }
                    var temp=new Array();
                    var index_array=0;
                    for (var m=0; m<line.length;m++){
                            if((m<start)||(m>stop+1)){
                                    temp[index_array]=line[m];
                                    index_array++;
                            }
                    }
                    FI=temp.join("||");
                    xajax_modify_fi(FI);
                    setTimeout("xajax_show_repository('fi',document.main_form.repo_fi_select.options[document.main_form.repo_fi_select.selectedIndex].value)",800);
                    flight_segments[i][2]=null;
                    flight_segments[i][3]=null;
                    flight_segments[i][4]=null;
                    flight_segments[i][5]=null;
                    flight_segments[i][6]=null;
                    if (flight_segments[i][index][0]!=null) {var twaypoint_name=flight_segments[i][index][0];}
                    else {var twaypoint_name="";}
                    contentString="<div style='width:550px;height:300px'><span style='font-weight:bold; font-family:verdana'>Flight Segment "+(i+1)+"</span><br><span style='font-family:verdana'>Composite Description: null<br><br><input type='button' id='add_composite_null' name='add_composite_null_button' value='Add Composite' onClick=add_composite("+i+","+index+") ><br><br>Twaypoint: "+twaypoint_name+"<br>-Latitude: "+flight_segments[i][index][1][2]+" "+flight_segments[i][index][1][1]+"<br>-Longitude: "+flight_segments[i][index][2][2]+" "+flight_segments[i][index][2][1]+"<br>-Distance: "+flight_segments[i][index][3][2]+" "+flight_segments[i][index][3][1]+"</span>"+"<br><br><input type='button' id='modify_fs_null' name='modify_fs_null_button' value='Modify Twaypoint' onClick=modify_fs_composite_null("+i+","+index+") ><br><input type='button' id='delete_fs_null' name='delete_fs_null_button' value='Delete Flight Segment' onClick=delete_fs_composite_null("+i+","+index+") ><br><input type='button' id='add_fs_null_front' name='add_fs_null_front_button' value='Add Flight Segment (in front)' onClick=add_fs_composite_null_front("+i+","+index+") ><input type='button' id='add_fs_null_behind' name='add_fs_null_behind_button' value='Add Flight Segment (behind)' onClick=add_fs_composite_null_behind("+i+","+index+") ></div>";
                    infowindow.setOptions({content: contentString});
                    infowindow.open(map,markers[i][0]);
            }

            function delete_fs_composite(i,index){
                    oldVersionFS();
                    infowindow.close();
                    polyLine[i].setMap(null);
                    markers[i][0].setMap(null);
                    markers[i][0]=null;
                    var found=-1;
                    for(var m=i-1; m>=0; m--){
                            var map=polyLine[m].getMap();
                            if(map!=null){
                                    found=m;
                                    break;
                            }
                    }
                    if (found==-1) var position=markers_initial.getPosition();
                    else var position=markers[found][0].getPosition();
                    if(i!=polyLine.length-1){
                            var found2=-1;
                            for(var m=i+1; m<polyLine.length; m++){
                                    var map=polyLine[m].getMap();
                                    if(map!=null){
                                            found2=m;
                                            break;
                                    }
                            }
                            var path = polyLine[found2].getPath();
                            if (found==-1) path.setAt(0,position);
                            else path.setAt(1,position);
                            if ((flight_segments[found2][2]!=null)&&(flight_segments[found2][2]!="null")){
                                    var path2=polyLine_composite[found2].getPath();
                                    path2.setAt(0,position);
                            }
                    }
                    polyLine_composite[i].setMap(null);
                    for(var j=0; j<markers_composite[i].length; j++){
                            markers_composite[i][j].setMap(null);
                    }
                    var line=FI.split("||");
                    var start=0;
                    var start_index;
                    var stop=0;
                    var found=false;
                    for (var m=0;m<line.length;m++){
                            if(((line[m].indexOf('<spi:point name="'+flight_segments[i][index][0]+'">')!=-1)||(line[m].indexOf('<spi:point name="'+flight_segments[i][index][0]+'"/'+'>')!=-1))&&(found==false)){
                                    m--;
                                    while(line[m].indexOf("<fido:flight_segment ")==-1){
                                            m--;
                                            found=true;
                                    }
                                    start=m;
                                    start_index=line[m].indexOf('<fido:flight_segment ');
                                    m++;
                                    while(line[m].indexOf("</fido:flight_segment>")==-1){
                                            stop=m;
                                            m++;
                                    }
                            }
                    }
                    var temp=new Array();
                    var index_array=0;
                    for (var m=0; m<line.length;m++){
                            if((m<start)||(m>stop+1)){
                                    temp[index_array]=line[m];
                                    index_array++;
                            }else if(m==start){
                                    temp[index_array]=line[m].substr(0,start_index);
                                    index_array++;
                            }
                    }
                    FI=temp.join("||");
                    xajax_modify_fi(FI);
                    setTimeout("xajax_show_repository('fi',document.main_form.repo_fi_select.options[document.main_form.repo_fi_select.selectedIndex].value)",800);
            }

            /*function add_composite(i,index){
                    infowindow.close();
                    var opciones="toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, width=500, height=230";
                    newwindow=window.open('','',opciones);
                    var tmp = newwindow.document;
                    tmp.write('<html><head></head><body><form id="main" name="main_form"><span style="font-family:verdana;font-size:1em;font-weight:bold;">Composite Adition</span><br><br><span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Composite Description : </span><select id="description_composite" name="description_composite_select"><option value=1>geometric_path_gc_ca_wp</option><option value=2>geometric_path_wp</option></select><br><span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Track Specification List: </span><input type="text" id="track_spec_list" name="track_spec_list_textarea" ><br><span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Clock List: </span><input type="text" id="clock_list" name="clock_list_textarea" ><br><br><span style="font-family:verdana;font-size:0.8em;font-weight:bold;">Waypoint 1</span><br><span style="font-family:verdana;font-size:0.8em;font-weight:normal;">New Twaypoint Name : </span><input type="text" id="name_composite" name="name_composite_textarea" /'+'><br><span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Latitude '+flight_segments[i][index][1][1]+': </span><input type="text" id="latitude_composite" name="latitude_composite_textarea" /'+'><br><span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Longitude '+flight_segments[i][index][2][1]+': </span><input type="text" id="longitude_composite" name="longitude_composite_textarea" /'+'><br><span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Distance '+flight_segments[i][index][3][1]+': </span><input type="text" id="distance_fs_composite" name="distance_fs_composite_textarea" /'+'>**<br><br><span style="font-family:verdana;font-size:0.6em;font-weight:normal;">**Empty boxes allow</span></form></body></html>');
                    tmp.close();
            }*/

            function add_fs_composite_null_front(i,index){
                    infowindow.close();
                    var opciones="toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, width=500, height=230";
                    newwindow=window.open('','',opciones);
                    var tmp = newwindow.document;
                    tmp.write('<html><head></head><body><form id="main" name="main_form"><span style="font-family:verdana;font-size:1em;font-weight:bold;">Flight Segment Addition (in front)</span><br><br><span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Twaypoint Name : </span><input type="text" id="name_twaypoint" name="name_twaypoint_textarea" value="twaypoint"/'+'><br><span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Latitude '+flight_segments[i][index][1][1]+': </span><input type="text" id="latitude_twaypoint" name="latitude_twaypoint_textarea" value="'+flight_segments[i][index][1][2]+'" /'+'><br><span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Longitude '+flight_segments[i][index][2][1]+': </span><input type="text" id="longitude_twaypoint" name="longitude_twaypoint_textarea" value="'+flight_segments[i][index][2][2]+'" /'+'><br><span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Distance '+flight_segments[i][index][3][1]+': </span><input type="text" id="distance_twaypoint" name="distance_twaypoint_textarea" value="'+flight_segments[i][index][3][2]+'" /'+'><br><br><input type="button" id="ok_call_adder_front_twaypoint" name="ok_call_adder_front_twaypoint_button" value="Ok" onClick="window.opener.parent.adder_front_twaypoint(document.main_form.name_twaypoint_textarea.value,document.main_form.latitude_twaypoint_textarea.value,document.main_form.longitude_twaypoint_textarea.value,document.main_form.distance_twaypoint_textarea.value,'+i+','+index+'); self.close();" ><input type="button" id="cancel_call_adder_front_twaypoint" name="cancel_call_adder_front_twaypoint_button" value="Cancel" onClick="window.opener.readAgain();self.close();" ></form></body></html>');
                    tmp.close();
            }

            function adder_front_twaypoint(nombre,latitude,longitude,distance,i,index){
                    oldVersionFS();
                    if(isNaN(latitude)){
                            alert("Latitude must be a number.");
                            add_fs_composite_null_front(i,index);
                    }else if(latitude==""){
                            alert("Latitude must be a number.");
                            add_fs_composite_null_front(i,index);
                    }else if(isNaN(longitude)){
                            alert("Longitude must be a number.");
                            add_fs_composite_null_front(i,index);
                    }else if(longitude==""){
                            alert("Longitude must be a number.");
                            add_fs_composite_null_front(i,index);
                    }else if(isNaN(distance)){
                            alert("Distance must be a number.");
                            add_fs_composite_null_front(i,index);
                    }else if(nombre==""){
                            alert("Name cannot be empty.");
                            add_fs_composite_null_front(i,index);
                    }else if((flight_segments[i][index][1][1]=="[deg]")&&((latitude>180)||(latitude<-180))){
                            alert("Latitude must be between -180 [deg] and 180 [deg].");
                            add_fs_composite_null_front(i,index);
                    }else if((flight_segments[i][index][1][1]=="[rad]")&&((latitude>Math.PI)||(latitude<-Math.PI))){
                            alert("Latitude must be between -PI [rad] and PI [rad]");
                            add_fs_composite_null_front(i,index);
                    }else if((flight_segments[i][index][1][1]=="[deg]")&&((longitude>360)||(longitude<-360))){
                            alert("Longitude must be between -360 [deg] and 360 [deg].");
                            add_fs_composite_null_front(i,index);
                    }else if((flight_segments[i][index][1][1]=="[rad]")&&((longitude>2*Math.PI)||(longitude<-2*Math.PI))){
                            alert("Longitude must be between -2*PI [rad] and 2*PI [rad].");
                            add_fs_composite_null_front(i,index);
                    }else if((latitude==flight_segments[i][index][1][2])&&(longitude==flight_segments[i][index][2][2])){
                            alert("Latitude or longitude must be different.");
                            add_fs_composite_null_front(i,index);
                    }else{
                            flight_segments.splice(i,0,new Array());
                            flight_segments[i][0]=null;
                            flight_segments[i][1]=null;
                            flight_segments[i][2]=null;
                            flight_segments[i][3]=null;
                            flight_segments[i][4]=null;
                            flight_segments[i][5]=null;
                            flight_segments[i][6]=null;
                            flight_segments[i][7]=null;
                            flight_segments[i][8]=new Array();
                            flight_segments[i][8][0]=nombre;
                            flight_segments[i][8][1]=new Array();
                            flight_segments[i][8][2]=new Array();
                            flight_segments[i][8][3]=new Array();
                            flight_segments[i][8][1][0]="latitude";
                            flight_segments[i][8][1][1]=flight_segments[i+1][index][1][1];
                            flight_segments[i][8][1][2]=latitude;
                            flight_segments[i][8][2][0]="longitude";
                            flight_segments[i][8][2][1]=flight_segments[i+1][index][2][1];
                            flight_segments[i][8][2][2]=longitude;
                            flight_segments[i][8][3][0]="distance";
                            flight_segments[i][8][3][1]=flight_segments[i+1][index][3][1];
                            flight_segments[i][8][3][2]=distance;

                            polyLine.splice(i,0,null);
                            polyLine_composite.splice(i,0,null);
                            initPolyline(i,"empty");
                            markers.splice(i,0,new Array());
                            markers_composite.splice(i,0,new Array());

                            function represent_point2(fs,index){
                                    if (flight_segments[fs][index][1][1]=="[deg]"){
                                            var position=new g.LatLng(flight_segments[fs][index][1][2],flight_segments[fs][index][2][2]);
                                    }else{
                                            var position=new g.LatLng((flight_segments[fs][index][1][2]*180)/Math.PI,(flight_segments[fs][index][2][2]*180)/Math.PI);
                                    }
                                    var marker = createMarker_flightSegment(position,fs);
                                    markers[fs].push(marker);
                                    var path = polyLine[fs].getPath();
                                    path.push(position);
                                    var found=-1;
                                    for (var m=fs+1; m<polyLine.length; m++){
                                            var map=polyLine[m].getMap();
                                            if(map!=null){
                                                    found=m;
                                                    break;
                                            }
                                    }
                                    var found2=-1;
                                    for(var m=fs-1; m>=0; m--){
                                            var map=polyLine[m].getMap();
                                            if(map!=null){
                                                    found2=m;
                                                    break;
                                            }
                                    }
                                    var path2 = polyLine[found].getPath();
                                    if (markers[fs][0].getPosition()==path2.getAt(0)) path2.setAt(0,position);
                                    else if (found2==-1) path2.setAt(0,position);
                                    else path2.setAt(1,position);
                                    if ((flight_segments[found][2]!=null)&&(flight_segments[found][2]!="null")){
                                            var path3=polyLine_composite[found].getPath();
                                            path3.setAt(0,position);
                                    }
                            }
                            represent_point2(i,8);

                            var found=-1;
                            for(var m=i-1; m>=0; m--){
                                    var map=polyLine[m].getMap();
                                    if(map!=null){
                                            found=m;
                                            break;
                                    }
                            }
                            if (found==-1) var position=markers_initial.getPosition();
                            else var position=markers[found][0].getPosition();
                            var path = polyLine[i].getPath();
                            path.push(position);


                            var line=FI.split("||");
                            var found3=false;
                            for (var m=0;m<line.length;m++){
                                    if(((line[m].indexOf('<spi:point name="'+flight_segments[i+1][index][0]+'">')!=-1)||(line[m].indexOf('<spi:point name="'+flight_segments[i+1][index][0]+'"/'+'>')!=-1))&&(found3==false)){
                                            m--;
                                            while(line[m].indexOf("<fido:flight_segment ")==-1){
                                                    m--;
                                                    found3=true;
                                            }
                                            var id=flight_segments.length+1;
                                            line.splice(m,0,'              <fido:flight_segment id="'+id+'">');
                                            m++;
                                            line.splice(m,0,'                   <fido:fs_trigger>');
                                            m++;
                                            line.splice(m,0,'                       <codo:twaypoint id="'+id+'">');
                                            m++;
                                            line.splice(m,0,'                          <spi:point name="'+nombre+'">');
                                            m++;
                                            line.splice(m,0,'                               <gc:latitude units="'+flight_segments[i][8][1][1]+'" value="'+latitude+'"/'+">");
                                            m++;
                                            line.splice(m,0,'                               <gc:longitude units="'+flight_segments[i][8][2][1]+'" value="'+longitude+'"/'+">");
                                            m++;
                                            if (distance!=0){
                                                    line.splice(m,0,'                               <gc:distance units="'+flight_segments[i][8][3][1]+'" value="'+distance+'"/'+">");
                                                    m++;
                                            }
                                            line.splice(m,0,'                          </spi:point>');
                                            m++;
                                            line.splice(m,0,'                       </codo:twaypoint>');
                                            m++;
                                            line.splice(m,0,'                    </fido:fs_trigger>');
                                            m++;
                                            line.splice(m,0,'                </fido:flight_segment>');
                                            m++;
                                    }
                            }
                            FI=line.join("||");
                            xajax_modify_fi(FI);
                            setTimeout("xajax_show_repository('fi',document.main_form.repo_fi_select.options[document.main_form.repo_fi_select.selectedIndex].value)",800);

                            contentString="<div style='width:550px;height:300px'><span style='font-weight:bold; font-family:verdana'>Flight Segment "+(i+1)+"</span><br><span style='font-family:verdana'>Composite Description: null<br><br><input type='button' id='add_composite_null' name='add_composite_null_button' value='Add Composite' onClick=add_composite("+i+","+8+") ><br><br>Twaypoint: "+flight_segments[i][8][0]+"<br>-Latitude: "+flight_segments[i][8][1][2]+" "+flight_segments[i][8][1][1]+"<br>-Longitude: "+flight_segments[i][8][2][2]+" "+flight_segments[i][8][2][1]+"<br>-Distance: "+flight_segments[i][8][3][2]+" "+flight_segments[i][8][3][1]+"</span>"+"<br><br><input type='button' id='modify_fs_null' name='modify_fs_null_button' value='Modify Twaypoint' onClick=modify_fs_composite_null("+i+",8) ><br><input type='button' id='delete_fs_null' name='delete_fs_null_button' value='Delete Flight Segment' onClick=delete_fs_composite_null("+i+",8) ><br><input type='button' id='add_fs_null_front' name='add_fs_null_front_button' value='Add Flight Segment (in front)' onClick=add_fs_composite_null_front("+i+",8) ><input type='button' id='add_fs_null_behind' name='add_fs_null_behind_button' value='Add Flight Segment (behind)' onClick=add_fs_composite_null_behind("+i+",8) ></div>";
                            infowindow.setContent(contentString);
                            infowindow.open(map,markers[i][0]);

                    }
                    readAgain();
            }

            function add_fs_composite_null_behind(i,index){
                    infowindow.close();
                    var opciones="toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, width=500, height=230";
                    newwindow=window.open('','',opciones);
                    var tmp = newwindow.document;
                    document.getElementById("lock").style.display="block";  
                    tmp.write('<html><head></head><body><form id="main" name="main_form"><span style="font-family:verdana;font-size:1em;font-weight:bold;">Flight Segment Addition (in behind)</span><br><br><span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Twaypoint Name : </span><input type="text" id="name_twaypoint" name="name_twaypoint_textarea" value="twaypoint"/'+'><br><span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Latitude '+flight_segments[i][index][1][1]+': </span><input type="text" id="latitude_twaypoint" name="latitude_twaypoint_textarea" value="'+flight_segments[i][index][1][2]+'" /'+'><br><span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Longitude '+flight_segments[i][index][2][1]+': </span><input type="text" id="longitude_twaypoint" name="longitude_twaypoint_textarea" value="'+flight_segments[i][index][2][2]+'" /'+'><br><span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Distance '+flight_segments[i][index][3][1]+': </span><input type="text" id="distance_twaypoint" name="distance_twaypoint_textarea" value="'+flight_segments[i][index][3][2]+'" /'+'><br><br><input type="button" id="ok_call_adder_behind_twaypoint" name="ok_call_adder_behind_twaypoint_button" value="Ok" onClick="window.opener.parent.adder_behind_twaypoint(document.main_form.name_twaypoint_textarea.value,document.main_form.latitude_twaypoint_textarea.value,document.main_form.longitude_twaypoint_textarea.value,document.main_form.distance_twaypoint_textarea.value,'+i+','+index+'); self.close();" ><input type="button" id="cancel_call_adder_behind_twaypoint" name="cancel_call_adder_behind_twaypoint_button" value="Cancel" onClick="window.opener.readAgain();self.close();" ></form></body></html>');
                    tmp.close();
            }

            function adder_behind_twaypoint(nombre,latitude,longitude,distance,i,index){
                oldVersionFS();
                    if(isNaN(latitude)){
                            alert("Latitude must be a number.");
                            add_fs_composite_null_front(i,index);
                    }else if(latitude==""){
                            alert("Latitude must be a number.");
                            add_fs_composite_null_front(i,index);
                    }else if(isNaN(longitude)){
                            alert("Longitude must be a number.");
                            add_fs_composite_null_front(i,index);
                    }else if(longitude==""){
                            alert("Longitude must be a number.");
                            add_fs_composite_null_front(i,index);
                    }else if(isNaN(distance)){
                            alert("Distance must be a number.");
                            add_fs_composite_null_front(i,index);
                    }else if(nombre==""){
                            alert("Name cannot be empty.");
                            add_fs_composite_null_front(i,index);
                    }else if((flight_segments[i][index][1][1]=="[deg]")&&((latitude>180)||(latitude<-180))){
                            alert("Latitude must be between -180 [deg] and 180 [deg].");
                            add_fs_composite_null_front(i,index);
                    }else if((flight_segments[i][index][1][1]=="[rad]")&&((latitude>Math.PI)||(latitude<-Math.PI))){
                            alert("Latitude must be between -PI [rad] and PI [rad]");
                            add_fs_composite_null_front(i,index);
                    }else if((flight_segments[i][index][1][1]=="[deg]")&&((longitude>360)||(longitude<-360))){
                            alert("Longitude must be between -360 [deg] and 360 [deg].");
                            add_fs_composite_null_front(i,index);
                    }else if((flight_segments[i][index][1][1]=="[rad]")&&((longitude>2*Math.PI)||(longitude<-2*Math.PI))){
                            alert("Longitude must be between -2*PI [rad] and 2*PI [rad].");
                            add_fs_composite_null_front(i,index);
                    }else if((latitude==flight_segments[i][index][1][2])&&(longitude==flight_segments[i][index][2][2])){
                            alert("Latitude or longitude must be different.");
                            add_fs_composite_null_front(i,index);
                    }else{
                            if((flight_segments.length-1)==i){
                                    flight_segments.push(new Array());
                                    flight_segments.push(new Array());
                                    polyLine.push(null);
                                    polyLine_composite.push(null);
                                    initPolyline(i+1,"empty");
                                    markers.push(new Array());
                                    markers_composite.push(new Array());
                            }else{
                                    flight_segments.splice(i+1,0,new Array());
                                    polyLine.splice(i+1,0,null);
                                    polyLine_composite.splice(i+1,0,null);
                                    initPolyline(i+1,"empty");
                                    markers.splice(i+1,0,new Array());
                                    markers_composite.splice(i+1,0,new Array());
                            }
                            flight_segments[i+1][0]=null;
                            flight_segments[i+1][1]=null;
                            flight_segments[i+1][2]=null;
                            flight_segments[i+1][3]=null;
                            flight_segments[i+1][4]=null;
                            flight_segments[i+1][5]=null;
                            flight_segments[i+1][6]=null;
                            flight_segments[i+1][7]=null;
                            flight_segments[i+1][8]=new Array();
                            flight_segments[i+1][8][0]=nombre;
                            flight_segments[i+1][8][1]=new Array();
                            flight_segments[i+1][8][2]=new Array();
                            flight_segments[i+1][8][3]=new Array();
                            flight_segments[i+1][8][1][0]="latitude";
                            flight_segments[i+1][8][1][1]=flight_segments[i][index][1][1];
                            flight_segments[i+1][8][1][2]=latitude;
                            flight_segments[i+1][8][2][0]="longitude";
                            flight_segments[i+1][8][2][1]=flight_segments[i][index][2][1];
                            flight_segments[i+1][8][2][2]=longitude;
                            flight_segments[i+1][8][3][0]="distance";
                            flight_segments[i+1][8][3][1]=flight_segments[i][index][3][1];
                            flight_segments[i+1][8][3][2]=distance;

                            function represent_point2(fs,index){
                                    if (flight_segments[fs][index][1][1]=="[deg]"){
                                            var position=new g.LatLng(flight_segments[fs][index][1][2],flight_segments[fs][index][2][2]);
                                    }else{
                                            var position=new g.LatLng((flight_segments[fs][index][1][2]*180)/Math.PI,(flight_segments[fs][index][2][2]*180)/Math.PI);
                                    }
                                    var marker = createMarker_flightSegment(position,fs);
                                    markers[fs].push(marker);
                                    var path = polyLine[fs].getPath();
                                    path.push(position);
                                    var found=-1;
                                    for (var m=fs+1; m<polyLine.length; m++){
                                            var map=polyLine[m].getMap();
                                            if(map!=null){
                                                    found=m;
                                                    break;
                                            }
                                    }
                                    if (found!=-1){
                                            var path2 = polyLine[found].getPath();
                                            path2.setAt(1,position);
                                            if ((flight_segments[found][2]!=null)&&(flight_segments[found][2]!="null")){
                                                    var path3=polyLine_composite[found].getPath();
                                                    path3.setAt(0,position);
                                            }
                                    }
                            }
                            represent_point2(i+1,8);
                            var position=markers[i][0].getPosition();
                            var path = polyLine[i+1].getPath();
                            path.push(position);

                            var line=FI.split("||");
                            var found3=false;
                            for (var m=0;m<line.length;m++){
                                    if(((line[m].indexOf('<spi:point name="'+flight_segments[i][index][0]+'">')!=-1)||(line[m].indexOf('<spi:point name="'+flight_segments[i][index][0]+'"/'+'>')!=-1))&&(found3==false)){
                                            m++;
                                            while(line[m].indexOf("</fido:flight_segment>")==-1){
                                                    m++;
                                                    found3=true;
                                            }
                                            m++;
                                            var id=flight_segments.length+1;
                                            line.splice(m,0,'               <fido:flight_segment id="'+id+'">');
                                            m++;
                                            line.splice(m,0,'                   <fido:fs_trigger>');
                                            m++;
                                            line.splice(m,0,'                       <codo:twaypoint id="'+id+'">');
                                            m++;
                                            line.splice(m,0,'                           <spi:point name="'+nombre+'">');
                                            m++;
                                            line.splice(m,0,'                               <gc:latitude units="'+flight_segments[i+1][8][1][1]+'" value="'+latitude+'"/'+">");
                                            m++;
                                            line.splice(m,0,'                               <gc:longitude units="'+flight_segments[i+1][8][2][1]+'" value="'+longitude+'"/'+">");
                                            m++;
                                            if (distance!=0){
                                                    line.splice(m,0,'                               <gc:distance units="'+flight_segments[i+1][8][3][1]+'" value="'+distance+'"/'+">");
                                                    m++;
                                            }
                                            line.splice(m,0,'                           </spi:point>');
                                            m++;
                                            line.splice(m,0,'                    </codo:twaypoint>');
                                            m++;
                                            line.splice(m,0,'                </fido:fs_trigger>');
                                            m++;
                                            line.splice(m,0,'            </fido:flight_segment>');
                                            m++;
                                    }
                            }
                            FI=line.join("||");
                            xajax_modify_fi(FI);
                            setTimeout("xajax_show_repository('fi',document.main_form.repo_fi_select.options[document.main_form.repo_fi_select.selectedIndex].value)",800);

                            contentString="<div style='width:550px;height:300px'><span style='font-weight:bold; font-family:verdana'>Flight Segment "+(i+2)+"</span><br><span style='font-family:verdana'>Composite Description: null<br><br><input type='button' id='add_composite_null' name='add_composite_null_button' value='Add Composite' onClick=add_composite("+i+","+8+") ><br><br>Twaypoint: "+flight_segments[i+1][8][0]+"<br>-Latitude: "+flight_segments[i+1][8][1][2]+" "+flight_segments[i+1][8][1][1]+"<br>-Longitude: "+flight_segments[i+1][8][2][2]+" "+flight_segments[i+1][8][2][1]+"<br>-Distance: "+flight_segments[i+1][8][3][2]+" "+flight_segments[i+1][8][3][1]+"</span>"+"<br><br><input type='button' id='modify_fs_null' name='modify_fs_null_button' value='Modify Twaypoint' onClick=modify_fs_composite_null("+(i+1)+",8) ><br><input type='button' id='delete_fs_null' name='delete_fs_null_button' value='Delete Flight Segment' onClick=delete_fs_composite_null("+(i+1)+",8) ><br><input type='button' id='add_fs_null_front' name='add_fs_null_front_button' value='Add Flight Segment (in front)' onClick=add_fs_composite_null_front("+(i+1)+",8) ><input type='button' id='add_fs_null_behind' name='add_fs_null_behind_button' value='Add Flight Segment (behind)' onClick=add_fs_composite_null_behind("+(i+1)+",8) ></div>";
                            infowindow.setContent(contentString);
                            infowindow.open(map,markers[i+1][0]);

                    }
                    readAgain();
            }

            var createMarker_flightSegment = function(point,index) {
		var imageNormal = new g.MarkerImage(
			"images/marker_green.png",
			new g.Size(32, 32),
			new g.Point(0, 0),
			new g.Point(10, 30)
		);
		var marker = new g.Marker({
			position: point,
			map: map,
			icon: imageNormal,
                        draggable: true,
			title: "Flight Segment. Click me to view details."

		});
		g.event.addListener(polyLine[index], "click", function() {
			for(var i=0; i<flight_segments.length; i++) {
				if((flight_segments[i][2]!="null")&&(flight_segments[i][2]!=null)){
					for(var j=0;j<markers_composite[i].length;j++){
						if (markers_composite[i][j].getMap()==map) markers_composite[i][j].setMap(null);
						else markers_composite[i][j].setMap(map);
					}
					if(polyLine_composite[i].getMap()==map){
						var polyOptions = {
							strokeColor: "blue",
							strokeOpacity: 2,
							strokeWeight: 4,
							clickable: true
						};
						polyLine[i].setOptions(polyOptions);
						polyLine_composite[i].setMap(null);
					}else{
						var polyOptions = {
							strokeColor: "green",
							strokeOpacity: 0.5,
							strokeWeight: 4,
							clickable: true
						};
						polyLine[i].setOptions(polyOptions);
						polyLine_composite[i].setMap(map);
					}
				}
			}
		});
                g.event.addListener(marker, "dragend", function() {

                                var position =marker.getPosition();
                                var position1=String(position);
                                var position2=position1.replace(/[\(\)]/g, "");
                                var position3=position2.split(",");
                                var lat= parseFloat(position3[0]);
                                var long= parseFloat(position3[1]);
                                checker_fs_composite_null(flight_segments[index][8][0],lat,long,1250,index,8);
                    });
		g.event.addListener(marker, "click", function() {
			for(var i=0; i<flight_segments.length; i++) {
				if (markers[i][0]==marker){
					if((flight_segments[i][2]!="null")&&(flight_segments[i][2]!=null)){
						if(flight_segments[i][8]==null){
							var index=7;
						}else{
							var index=8;
						}
						var waypoint_list="";
						for(var j=0; j<flight_segments[i][5].length; j++){
							waypoint_list+="**Point Name: "+flight_segments[i][5][j][0]+"<br>    -Latitude: "+flight_segments[i][5][j][1][2]+" "+flight_segments[i][5][j][1][1]+"<br>    -Longitude: "+flight_segments[i][5][j][2][2]+" "+flight_segments[i][5][j][2][1]+"<br>    -Distance: "+flight_segments[i][5][j][3][2]+" "+flight_segments[i][5][j][3][1]+"<br>";
						}
						if (flight_segments[i][index][0]!=null) {var twaypoint_name=flight_segments[i][index][0];}
						else {var twaypoint_name="";}
						contentString="<div style='width:550px;height:190px'><span style='font-weight:bold; font-family:verdana'>Flight Segment "+(i+1)+"</span><br><span style='font-family:verdana'>Composite Description: "+flight_segments[i][2]+"<br>Composite Code: "+flight_segments[i][3]+"<br>Waypoint List:<br>"+waypoint_list+"<br><input type='button' id='convert_composite_not_null' name='convert_composite_not_null_button' value='Delete Composite' onClick=convert_composite_to_null("+i+","+index+") ><br><input type='button' id='add_end_waypoint_composite' name='add_end_waypoint_composite_button' value='Add Waypoint (in the end)' onClick=add_end_waypoint_composite("+i+","+index+") ><br><br>Twaypoint: "+twaypoint_name+"<br>-Latitude: "+flight_segments[i][index][1][2]+" "+flight_segments[i][index][1][1]+"<br>-Longitude: "+flight_segments[i][index][2][2]+" "+flight_segments[i][index][2][1]+"<br>-Distance: "+flight_segments[i][index][3][2]+" "+flight_segments[i][index][3][1]+"</span>"+"<br><br><input type='button' id='modify_fs_not_null' name='modify_fs_not_null_button' value='Modify Twaypoint' onClick=modify_fs_composite("+i+","+index+") ><br><input type='button' id='delete_fs_not_null' name='delete_fs_not_null_button' value='Delete Flight Segment' onClick=delete_fs_composite("+i+","+index+") ><br><input type='button' id='add_fs_null_front' name='add_fs_null_front_button' value='Add Flight Segment (in front)' onClick=add_fs_composite_null_front("+i+","+index+") ><input type='button' id='add_fs_null_behind' name='add_fs_null_behind_button' value='Add Flight Segment (behind)' onClick=add_fs_composite_null_behind("+i+","+index+") ></div>";
						infowindow.setOptions({content: contentString});
						infowindow.open(map,marker);
					}else{
						if(flight_segments[i][8]==null){
							var index=7;
						}else{
							var index=8;
						}
						if (flight_segments[i][index][0]!=null) {var twaypoint_name=flight_segments[i][index][0];}
						else {var twaypoint_name="";}
						contentString="<div style='width:550px;height:210px'><span style='font-weight:bold; font-family:verdana'>Flight Segment "+(i+1)+"</span><br><span style='font-family:verdana'>Composite Description: null<br><br>Twaypoint: "+twaypoint_name+"<br>-Latitude: "+flight_segments[i][index][1][2]+" "+flight_segments[i][index][1][1]+"<br>-Longitude: "+flight_segments[i][index][2][2]+" "+flight_segments[i][index][2][1]+"<br>-Distance: "+flight_segments[i][index][3][2]+" "+flight_segments[i][index][3][1]+"</span>"+"<br><br><input type='button' id='modify_fs_null' name='modify_fs_null_button' value='Modify Twaypoint' onClick=modify_fs_composite_null("+i+","+index+") ><br><input type='button' id='delete_fs_null' name='delete_fs_null_button' value='Delete Flight Segment' onClick=delete_fs_composite_null("+i+","+index+") ><br><input type='button' id='add_fs_null_front' name='add_fs_null_front_button' value='Add Flight Segment (in front)' onClick=add_fs_composite_null_front("+i+","+index+") ><input type='button' id='add_fs_null_behind' name='add_fs_null_behind_button' value='Add Flight Segment (behind)' onClick=add_fs_composite_null_behind("+i+","+index+") ></div>";
						infowindow.setOptions({content: contentString});
						infowindow.open(map,marker);
					}
				}
			}
		});
		return marker;
            };

            function modify_waypoint_composite(i,j){
                    infowindow.close();
                    var opciones="toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, width=500, height=230";
                    newwindow=window.open('','',opciones);
                    var tmp = newwindow.document;
                    tmp.write('<html><head></head><body><form id="main" name="main_form"><span style="font-family:verdana;font-size:1em;font-weight:bold;">Waypoint Composite Edition</span><br><br><span style="font-family:verdana;font-size:0.8em;font-weight:normal;">New Waypoint Name : </span><input type="text" id="name_waypoint_composite" name="name_waypoint_composite_textarea" value="'+flight_segments[i][5][j][0]+'"/'+'><br><span style="font-family:verdana;font-size:0.8em;font-weight:normal;">New Latitude '+flight_segments[i][5][j][1][1]+': </span><input type="text" id="latitude_waypoint_composite" name="latitude_waypoint_composite_textarea" value="'+flight_segments[i][5][j][1][2]+'" /'+'><br><span style="font-family:verdana;font-size:0.8em;font-weight:normal;">New Longitude '+flight_segments[i][5][j][2][1]+': </span><input type="text" id="longitude_waypoint_composite" name="longitude_waypoint_composite_textarea" value="'+flight_segments[i][5][j][2][2]+'" /'+'><br><span style="font-family:verdana;font-size:0.8em;font-weight:normal;">New Distance '+flight_segments[i][5][j][3][1]+': </span><input type="text" id="distance_waypoint_composite" name="distance_waypoint_composite_textarea" value="'+flight_segments[i][5][j][3][2]+'" /'+'><br><br><span style="font-family:verdana;font-size:0.6em;font-weight:normal;">***Leave empty boxes to keep old values</span><br><br><input type="button" id="ok_call_checker_waypoint_composite" name="ok_call_checker_waypoint_composite_button" value="Ok" onClick="window.opener.parent.checker_waypoint_composite(document.main_form.name_waypoint_composite_textarea.value,document.main_form.latitude_waypoint_composite_textarea.value,document.main_form.longitude_waypoint_composite_textarea.value,document.main_form.distance_waypoint_composite_textarea.value,'+i+','+j+'); self.close();" ><input type="button" id="cancel_call_checker_waypoint_composite" name="cancel_call_checker_waypoint_composite_button" value="Cancel" onClick="self.close();" ></form></body></html>');
                    tmp.close();
            }

            function checker_waypoint_composite(nombre,latitude,longitude,distance,i,j){
                    if(isNaN(latitude)){
                            alert("Latitude must be a number.");
                            modify_waypoint_composite(i,j);
                    }else if(isNaN(longitude)){
                            alert("Longitude must be a number.");
                            modify_waypoint_composite(i,j);
                    }else if(isNaN(distance)){
                            alert("Distance must be a number.");
                            modify_waypoint_composite(i,j);
                    }else if((flight_segments[i][5][j][1][1]=="[deg]")&&((latitude>180)||(latitude<-180))){
                            alert("Latitude must be between -180 [deg] and 180 [deg].");
                            modify_waypoint_composite(i,j);
                    }else if((flight_segments[i][5][j][1][1]=="[rad]")&&((latitude>Math.PI)||(latitude<-Math.PI))){
                            alert("Latitude must be between -PI [rad] and PI [rad]");
                            modify_waypoint_composite(i,j);
                    }else if((flight_segments[i][5][j][1][1]=="[deg]")&&((longitude>360)||(longitude<-360))){
                            alert("Longitude must be between -360 [deg] and 360 [deg].");
                            modify_waypoint_composite(i,j);
                    }else if((flight_segments[i][5][j][1][1]=="[rad]")&&((longitude>2*Math.PI)||(longitude<-2*Math.PI))){
                            alert("Longitude must be between -2*PI [rad] and 2*PI [rad].");
                            modify_waypoint_composite(i,j);
                    }else{
                            if (nombre=="") nombre=flight_segments[i][5][j][0];
                            if (latitude=="") latitude=flight_segments[i][5][j][1][2];
                            if (longitude=="") longitude=flight_segments[i][5][j][2][2];
                            if (distance=="") distance=flight_segments[i][5][j][3][2];
                            if (flight_segments[i][5][j][1][1]=="[deg]"){
                                    var position=new g.LatLng(latitude,longitude);
                            }else{
                                    var position=new g.LatLng((latitude*180)/Math.PI,(longitude*180)/Math.PI);
                            }
                            var path = polyLine_composite[i].getPath();
                            path.setAt(j+1,position);
                            markers_composite[i][j].setPosition(position);
                            if ((nombre!=flight_segments[i][5][j][0])||(latitude!=flight_segments[i][5][j][1][2])||(longitude!=flight_segments[i][5][j][2][2])||(distance!=flight_segments[i][5][j][3][2])){
                                    var line=FI.split("||");
                                    for (var m=0;m<line.length;m++){
                                            if((line[m].indexOf('<spi:point name="'+flight_segments[i][5][j][0]+'">')!=-1)||(line[m].indexOf('<spi:point name="'+flight_segments[i][5][j][0]+'"/'+'>')!=-1)){
                                                    m--;
                                                    while(line[m].indexOf("<fido:flight_segment ")==-1){
                                                            m--;
                                                    }
                                                    m++;
                                                    while(line[m].indexOf("</codo:parameter>")==-1){
                                                            if(line[m].indexOf('<spi:point name="'+flight_segments[i][5][j][0]+'">')!=-1){
                                                                    line[m]=line[m].substr(0,line[m].indexOf("name=")+6)+nombre+'">';
                                                                    m++;
                                                                    if(line[m].indexOf('<gc:latitude')!=-1){
                                                                            line[m]=line[m].substr(0,line[m].indexOf("value=")+7)+latitude+'"/'+">";
                                                                    }else{
                                                                            line.splice(m,0,'<gc:latitude units="'+flight_segments[i][5][j][1][1]+'" value="'+latitude+'"/'+">");
                                                                    }
                                                                    m++;
                                                                    if(line[m].indexOf('<gc:longitude')!=-1){
                                                                            line[m]=line[m].substr(0,line[m].indexOf("value=")+7)+longitude+'"/'+">";
                                                                    }else{
                                                                            line.splice(m,0,'<gc:longitude units="'+flight_segments[i][5][j][2][1]+'" value="'+longitude+'"/'+">");
                                                                    }
                                                                    m++;
                                                                    if(line[m].indexOf('<gc:distance')!=-1){
                                                                            line[m]=line[m].substr(0,line[m].indexOf("value=")+7)+distance+'"/'+">";
                                                                    }else{
                                                                            line.splice(m,0,'<gc:distance units="[m]" value="'+distance+'"/'+">");
                                                                    }
                                                            }else if(line[m].indexOf('<spi:point name="'+flight_segments[i][5][j][0]+'"/'+'>')!=-1){
                                                                    line[m]=line[m].substr(0,line[m].indexOf("name=")+6)+nombre+'">';
                                                                    m++;
                                                                    line.splice(m,0,'<gc:latitude units="'+flight_segments[i][5][j][1][1]+'" value="'+latitude+'"/'+">");
                                                                    m++;
                                                                    line.splice(m,0,'<gc:longitude units="'+flight_segments[i][5][j][2][1]+'" value="'+longitude+'"/'+">");
                                                                    m++;
                                                                    line.splice(m,0,'<gc:distance units="[m]" value="'+distance+'"/'+">");
                                                                    m++;
                                                                    line.splice(m,0,'</spi:point>');
                                                            }
                                                            m++;
                                                    }
                                            }
                                    }
                                    FI=line.join("||");
                                    xajax_modify_fi(FI);
                                    setTimeout("xajax_show_repository('fi',document.main_form.repo_fi_select.options[document.main_form.repo_fi_select.selectedIndex].value)",800);
                                    flight_segments[i][5][j][1][2]=latitude;
                                    flight_segments[i][5][j][2][2]=longitude;
                                    flight_segments[i][5][j][3][2]=distance;
                                    flight_segments[i][5][j][0]=nombre;
                                    contentString="<span style='font-weight:bold; font-family:verdana'>Waypoint: "+flight_segments[i][5][j][0]+"</span><span style='font-family:verdana'><br>-Latitude: "+flight_segments[i][5][j][1][2]+" "+flight_segments[i][5][j][1][1]+"<br>-Longitude: "+flight_segments[i][5][j][2][2]+" "+flight_segments[i][5][j][2][1]+"<br>-Distance: "+flight_segments[i][5][j][3][2]+" "+flight_segments[i][5][j][3][1]+"</span>"+"<br><br><input type='button' id='modify_waypoint_composite' name='modify_waypoint_composite_button' value='Modify Waypoint' onClick=modify_waypoint_composite("+i+","+j+") ><br><input type='button' id='delete_waypoint_composite' name='delete_waypoint_composite_button' value='Delete Waypoint' onClick=delete_waypoint_composite() ><br><input type='button' id='add_front_waypoint_composite' name='add_front_waypoint_composite_button' value='Add Waypoint (in front)' onClick=add_front_waypoint_composite("+i+","+j+") ><input type='button' id='add_behind_waypoint_composite' name='add_behind_waypoint_composite_button' value='Add Waypoint (behind)' onClick=add_behind_waypoint_composite("+i+","+j+") ></div>";
                                    infowindow.setContent(contentString);
                            }
                            infowindow.open(map,markers_composite[i][j]);
                    }
            }

            function delete_waypoint_composite(i,j){
                    oldVersionFS();
                    infowindow.close();
                    markers_composite[i][j].setMap(null);
                    markers_composite[i].splice(j,1);
                    var path = polyLine_composite[i].getPath();
                    path.removeAt(j+1);
                    var line=FI.split("||");
                    var index=0;
                    var found=false;
                    for (var m=0;m<line.length;m++){
                            if(((line[m].indexOf('<spi:point name="'+flight_segments[i][5][j][0]+'">')!=-1)||(line[m].indexOf('<spi:point name="'+flight_segments[i][5][j][0]+'"/'+'>')!=-1))&&(found==false)){
                                    m--;
                                    while(line[m].indexOf("<fido:flight_segment ")==-1){
                                            m--;
                                    }
                                    m++;
                                    while(line[m].indexOf("</codo:parameter>")==-1){
                                            if(line[m].indexOf('<spi:point name="'+flight_segments[i][5][j][0]+'">')!=-1){
                                                    index=m;
                                                    found=true;
                                            }
                                            m++;
                                    }
                            }
                    }
                    var temp=new Array();
                    var index_array=0;
                    for (var m=0; m<line.length;m++){
                            if((m!=index)&&(m!=index+1)&&(m!=index+2)&&(m!=index+3)){
                                    temp[index_array]=line[m];
                                    index_array++;
                            }
                    }
                    FI=temp.join("||");
                    xajax_modify_fi(FI);
                    flight_segments[i][5].splice(j,1);
                    setTimeout("xajax_show_repository('fi',document.main_form.repo_fi_select.options[document.main_form.repo_fi_select.selectedIndex].value)",800);
            }

            function add_front_waypoint_composite(i,j){
                    infowindow.close();
                    var opciones="toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, width=500, height=230";
                    newwindow=window.open('','',opciones);
                    var tmp = newwindow.document;
                    tmp.write('<html><head></head><body><form id="main" name="main_form"><span style="font-family:verdana;font-size:1em;font-weight:bold;">Waypoint Composite Addition (in front)</span><br><br><span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Waypoint Name : </span><input type="text" id="name_waypoint_composite" name="name_waypoint_composite_textarea" value="waypoint"/'+'><br><span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Latitude '+flight_segments[i][5][j][1][1]+': </span><input type="text" id="latitude_waypoint_composite" name="latitude_waypoint_composite_textarea" value="'+flight_segments[i][5][j][1][2]+'" /'+'><br><span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Longitude '+flight_segments[i][5][j][2][1]+': </span><input type="text" id="longitude_waypoint_composite" name="longitude_waypoint_composite_textarea" value="'+flight_segments[i][5][j][2][2]+'" /'+'><br><span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Distance '+flight_segments[i][5][j][3][1]+': </span><input type="text" id="distance_waypoint_composite" name="distance_waypoint_composite_textarea" value="'+flight_segments[i][5][j][3][2]+'" /'+'><br><br><input type="button" id="ok_call_adder_front_waypoint_composite" name="ok_call_adder_front_waypoint_composite_button" value="Ok" onClick="window.opener.parent.adder_front_waypoint_composite(document.main_form.name_waypoint_composite_textarea.value,document.main_form.latitude_waypoint_composite_textarea.value,document.main_form.longitude_waypoint_composite_textarea.value,document.main_form.distance_waypoint_composite_textarea.value,'+i+','+j+'); self.close();" ><input type="button" id="cancel_call_adder_front_waypoint_composite" name="cancel_call_adder_front_waypoint_composite_button" value="Cancel" onClick="self.close();" ></form></body></html>');
                    tmp.close();
            }

            function adder_front_waypoint_composite(nombre,latitude,longitude,distance,i,j){
                    if(isNaN(latitude)){
                            alert("Latitude must be a number.");
                            add_front_waypoint_composite(i,j);
                    }else if(latitude==""){
                            alert("Latitude must be a number.");
                            add_front_waypoint_composite(i,j);
                    }else if(isNaN(longitude)){
                            alert("Longitude must be a number.");
                            add_front_waypoint_composite(i,j);
                    }else if(longitude==""){
                            alert("Longitude must be a number.");
                            add_front_waypoint_composite(i,j);
                    }else if(isNaN(distance)){
                            alert("Distance must be a number.");
                            add_front_waypoint_composite(i,j);
                    }else if((flight_segments[i][5][j][1][1]=="[deg]")&&((latitude>180)||(latitude<-180))){
                            alert("Latitude must be between -180 [deg] and 180 [deg].");
                            add_front_waypoint_composite(i,j);
                    }else if((flight_segments[i][5][j][1][1]=="[rad]")&&((latitude>Math.PI)||(latitude<-Math.PI))){
                            alert("Latitude must be between -PI [rad] and PI [rad]");
                            add_front_waypoint_composite(i,j);
                    }else if((flight_segments[i][5][j][1][1]=="[deg]")&&((longitude>360)||(longitude<-360))){
                            alert("Longitude must be between -360 [deg] and 360 [deg].");
                            add_front_waypoint_composite(i,j);
                    }else if((flight_segments[i][5][j][1][1]=="[rad]")&&((longitude>2*Math.PI)||(longitude<-2*Math.PI))){
                            alert("Longitude must be between -2*PI [rad] and 2*PI [rad].");
                            add_front_waypoint_composite(i,j);
                    }else if((latitude==flight_segments[i][5][j][1][2])&&(longitude==flight_segments[i][5][j][2][2])){
                            alert("Latitude or longitude must be different.");
                            add_front_waypoint_composite(i,j);
                    }else{
                            if (flight_segments[i][5][j][1][1]=="[deg]"){
                                    var old_position=new g.LatLng(flight_segments[i][5][j][1][2],flight_segments[i][5][j][2][2]);
                                    var position=new g.LatLng(latitude,longitude);
                            }else{
                                    var old_position=new g.LatLng((flight_segments[i][5][j][1][2]*180)/Math.PI,(flight_segments[i][5][j][2][2]*180)/Math.PI);
                                    var position=new g.LatLng((latitude*180)/Math.PI,(longitude*180)/Math.PI);
                            }
                            var path = polyLine_composite[i].getPath();
                            var found=0;
                            for(var m=j; m<path.getLength();m++){
                                    if ((path.getAt(m).lat()==old_position.lat())&&(path.getAt(m).lng()==old_position.lng())){
                                            found=m;
                                            break;
                                    }
                            }
                            path.insertAt(found,position);
                            var line=FI.split("||");
                            var found2=false;
                            for (var m=0;m<line.length;m++){
                                    if(((line[m].indexOf('<spi:point name="'+flight_segments[i][5][j][0]+'">')!=-1)||(line[m].indexOf('<spi:point name="'+flight_segments[i][5][j][0]+'"/'+'>')!=-1))&&(found2==false)){
                                            m--;
                                            while(line[m].indexOf("<fido:flight_segment ")==-1){
                                                    m--;
                                            }
                                            m++;
                                            while(line[m].indexOf("</codo:parameter>")==-1){
                                                    if(((line[m].indexOf('<spi:point name="'+flight_segments[i][5][j][0]+'">')!=-1)||(line[m].indexOf('<spi:point name="'+flight_segments[i][5][j][0]+'"/'+'>')!=-1))&&(found2==false)){
                                                            line.splice(m,0,'<spi:point name="'+nombre+'">');
                                                            m++;
                                                            line.splice(m,0,'<gc:latitude units="'+flight_segments[i][5][j][1][1]+'" value="'+latitude+'"/'+">");
                                                            m++;
                                                            line.splice(m,0,'<gc:longitude units="'+flight_segments[i][5][j][2][1]+'" value="'+longitude+'"/'+">");
                                                            m++;
                                                            line.splice(m,0,'</spi:point>');
                                                            found2=true;
                                                    }
                                                    m++;
                                            }
                                    }
                            }
                            FI=line.join("||");
                            xajax_modify_fi(FI);
                            setTimeout("xajax_show_repository('fi',document.main_form.repo_fi_select.options[document.main_form.repo_fi_select.selectedIndex].value)",800);
                            flight_segments[i][5].splice(found-1,0,new Array());
                            flight_segments[i][5][found-1][0]=nombre;
                            flight_segments[i][5][found-1][1]=new Array();
                            flight_segments[i][5][found-1][2]=new Array();
                            flight_segments[i][5][found-1][3]=new Array();
                            flight_segments[i][5][found-1][1][0]="latitude";
                            flight_segments[i][5][found-1][1][1]=flight_segments[i][5][found][1][1];
                            flight_segments[i][5][found-1][1][2]=latitude;
                            flight_segments[i][5][found-1][2][0]="longitude";
                            flight_segments[i][5][found-1][2][1]=flight_segments[i][5][found][2][1];
                            flight_segments[i][5][found-1][2][2]=longitude;
                            flight_segments[i][5][found-1][3][0]="distance";
                            flight_segments[i][5][found-1][3][1]=flight_segments[i][5][found][3][1];
                            flight_segments[i][5][found-1][3][2]=distance;
                            var marker = createMarker_composite(position,i,found-1);
                            marker.setMap(map);
                            markers_composite[i].splice(found-1,0,marker);
                            contentString="<span style='font-weight:bold; font-family:verdana'>Waypoint: "+flight_segments[i][5][found-1][0]+"</span><span style='font-family:verdana'><br>-Latitude: "+flight_segments[i][5][found-1][1][2]+" "+flight_segments[i][5][found-1][1][1]+"<br>-Longitude: "+flight_segments[i][5][found-1][2][2]+" "+flight_segments[i][5][found-1][2][1]+"<br>-Distance: "+flight_segments[i][5][found-1][3][2]+" "+flight_segments[i][5][found-1][3][1]+"</span>"+"<br><br><input type='button' id='modify_waypoint_composite' name='modify_waypoint_composite_button' value='Modify Waypoint' onClick=modify_waypoint_composite("+i+","+(found-1)+") ><br><input type='button' id='delete_waypoint_composite' name='delete_waypoint_composite_button' value='Delete Waypoint' onClick=delete_waypoint_composite("+i+","+(found-1)+") ><br><input type='button' id='add_front_waypoint_composite' name='add_front_waypoint_composite_button' value='Add Waypoint (in front)' onClick=add_front_waypoint_composite("+i+","+(found-1)+") ><input type='button' id='add_behind_waypoint_composite' name='add_behind_waypoint_composite_button' value='Add Waypoint (behind)' onClick=add_behind_waypoint_composite("+i+","+(found-1)+") ></div>";
                            infowindow.setContent(contentString);
                            infowindow.open(map,marker);
                    }
            }

            function add_behind_waypoint_composite(i,j){
                    infowindow.close();
                    var opciones="toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, width=500, height=230";
                    newwindow=window.open('','',opciones);
                    var tmp = newwindow.document;
                    tmp.write('<html><head></head><body><form id="main" name="main_form"><span style="font-family:verdana;font-size:1em;font-weight:bold;">Waypoint Composite Addition (behind)</span><br><br><span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Waypoint Name : </span><input type="text" id="name_waypoint_composite" name="name_waypoint_composite_textarea" value="waypoint"/'+'><br><span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Latitude '+flight_segments[i][5][j][1][1]+': </span><input type="text" id="latitude_waypoint_composite" name="latitude_waypoint_composite_textarea" value="'+flight_segments[i][5][j][1][2]+'" /'+'><br><span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Longitude '+flight_segments[i][5][j][2][1]+': </span><input type="text" id="longitude_waypoint_composite" name="longitude_waypoint_composite_textarea" value="'+flight_segments[i][5][j][2][2]+'" /'+'><br><span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Distance '+flight_segments[i][5][j][3][1]+': </span><input type="text" id="distance_waypoint_composite" name="distance_waypoint_composite_textarea" value="'+flight_segments[i][5][j][3][2]+'" /'+'><br><br><input type="button" id="ok_call_adder_behind_waypoint_composite" name="ok_call_adder_behind_waypoint_composite_button" value="Ok" onClick="window.opener.parent.adder_behind_waypoint_composite(document.main_form.name_waypoint_composite_textarea.value,document.main_form.latitude_waypoint_composite_textarea.value,document.main_form.longitude_waypoint_composite_textarea.value,document.main_form.distance_waypoint_composite_textarea.value,'+i+','+j+'); self.close();" ><input type="button" id="cancel_call_adder_behind_waypoint_composite" name="cancel_call_adder_behind_waypoint_composite_button" value="Cancel" onClick="self.close();" ></form></body></html>');
                    tmp.close();
            }

            function adder_behind_waypoint_composite(nombre,latitude,longitude,distance,i,j){
                    if(isNaN(latitude)){
                            alert("Latitude must be a number.");
                            add_behind_waypoint_composite(i,j);
                    }else if(latitude==""){
                            alert("Latitude must be a number.");
                            add_behind_waypoint_composite(i,j);
                    }else if(isNaN(longitude)){
                            alert("Longitude must be a number.");
                            add_behind_waypoint_composite(i,j);
                    }else if(longitude==""){
                            alert("Longitude must be a number.");
                            add_behind_waypoint_composite(i,j);
                    }else if(isNaN(distance)){
                            alert("Distance must be a number.");
                            add_behind_waypoint_composite(i,j);
                    }else if((flight_segments[i][5][j][1][1]=="[deg]")&&((latitude>180)||(latitude<-180))){
                            alert("Latitude must be between -180 [deg] and 180 [deg].");
                            add_behind_waypoint_composite(i,j);
                    }else if((flight_segments[i][5][j][1][1]=="[rad]")&&((latitude>Math.PI)||(latitude<-Math.PI))){
                            alert("Latitude must be between -PI [rad] and PI [rad]");
                            add_behind_waypoint_composite(i,j);
                    }else if((flight_segments[i][5][j][1][1]=="[deg]")&&((longitude>360)||(longitude<-360))){
                            alert("Longitude must be between -360 [deg] and 360 [deg].");
                            add_behind_waypoint_composite(i,j);
                    }else if((flight_segments[i][5][j][1][1]=="[rad]")&&((longitude>2*Math.PI)||(longitude<-2*Math.PI))){
                            alert("Longitude must be between -2*PI [rad] and 2*PI [rad].");
                            add_behind_waypoint_composite(i,j);
                    }else if((latitude==flight_segments[i][5][j][1][2])&&(longitude==flight_segments[i][5][j][2][2])){
                            alert("Latitude or longitude must be different.");
                            add_behind_waypoint_composite(i,j);
                    }else{
                            if (flight_segments[i][5][j][1][1]=="[deg]"){
                                    var old_position=new g.LatLng(flight_segments[i][5][j][1][2],flight_segments[i][5][j][2][2]);
                                    var position=new g.LatLng(latitude,longitude);
                            }else{
                                    var old_position=new g.LatLng((flight_segments[i][5][j][1][2]*180)/Math.PI,(flight_segments[i][5][j][2][2]*180)/Math.PI);
                                    var position=new g.LatLng((latitude*180)/Math.PI,(longitude*180)/Math.PI);
                            }
                            var path = polyLine_composite[i].getPath();
                            var found=0;
                            for(var m=j+1; m<path.getLength();m++){
                                    if ((path.getAt(m).lat()==old_position.lat())&&(path.getAt(m).lng()==old_position.lng())){
                                            found=m;
                                            break;
                                    }
                            }
                            path.insertAt(found+1,position);
                            var line=FI.split("||");
                            var found2=false;
                            for (var m=0;m<line.length;m++){
                                    if(((line[m].indexOf('<spi:point name="'+flight_segments[i][5][j][0]+'">')!=-1)||(line[m].indexOf('<spi:point name="'+flight_segments[i][5][j][0]+'"/'+'>')!=-1))&&(found2==false)){
                                            m--;
                                            while(line[m].indexOf("<fido:flight_segment ")==-1){
                                                    m--;
                                            }
                                            m++;
                                            while(line[m].indexOf("</codo:parameter>")==-1){
                                                    if(((line[m].indexOf('<spi:point name="'+flight_segments[i][5][j][0]+'">')!=-1)||(line[m].indexOf('<spi:point name="'+flight_segments[i][5][j][0]+'"/'+'>')!=-1))&&(found2==false)){
                                                            m=m+4;
                                                            line.splice(m,0,'<spi:point name="'+nombre+'">');
                                                            m++;
                                                            line.splice(m,0,'<gc:latitude units="'+flight_segments[i][5][j][1][1]+'" value="'+latitude+'"/'+">");
                                                            m++;
                                                            line.splice(m,0,'<gc:longitude units="'+flight_segments[i][5][j][2][1]+'" value="'+longitude+'"/'+">");
                                                            m++;
                                                            line.splice(m,0,'</spi:point>');
                                                            found2=true;
                                                    }
                                                    m++;
                                            }
                                    }
                            }
                            FI=line.join("||");
                            xajax_modify_fi(FI);
                            setTimeout("xajax_show_repository('fi',document.main_form.repo_fi_select.options[document.main_form.repo_fi_select.selectedIndex].value)",800);
                            flight_segments[i][5].splice(found,0,new Array());
                            flight_segments[i][5][found][0]=nombre;
                            flight_segments[i][5][found][1]=new Array();
                            flight_segments[i][5][found][2]=new Array();
                            flight_segments[i][5][found][3]=new Array();
                            flight_segments[i][5][found][1][0]="latitude";
                            flight_segments[i][5][found][1][1]=flight_segments[i][5][found-1][1][1];
                            flight_segments[i][5][found][1][2]=latitude;
                            flight_segments[i][5][found][2][0]="longitude";
                            flight_segments[i][5][found][2][1]=flight_segments[i][5][found-1][2][1];
                            flight_segments[i][5][found][2][2]=longitude;
                            flight_segments[i][5][found][3][0]="distance";
                            flight_segments[i][5][found][3][1]=flight_segments[i][5][found-1][3][1];
                            flight_segments[i][5][found][3][2]=distance;
                            var marker = createMarker_composite(position,i,found);
                            marker.setMap(map);
                            markers_composite[i].splice(found,0,marker);
                            contentString="<span style='font-weight:bold; font-family:verdana'>Waypoint: "+flight_segments[i][5][found][0]+"</span><span style='font-family:verdana'><br>-Latitude: "+flight_segments[i][5][found][1][2]+" "+flight_segments[i][5][found][1][1]+"<br>-Longitude: "+flight_segments[i][5][found][2][2]+" "+flight_segments[i][5][found][2][1]+"<br>-Distance: "+flight_segments[i][5][found][3][2]+" "+flight_segments[i][5][found][3][1]+"</span>"+"<br><br><input type='button' id='modify_waypoint_composite' name='modify_waypoint_composite_button' value='Modify Waypoint' onClick=modify_waypoint_composite("+i+","+(found)+") ><br><input type='button' id='delete_waypoint_composite' name='delete_waypoint_composite_button' value='Delete Waypoint' onClick=delete_waypoint_composite("+i+","+(found)+") ><br><input type='button' id='add_front_waypoint_composite' name='add_front_waypoint_composite_button' value='Add Waypoint (in front)' onClick=add_front_waypoint_composite("+i+","+(found)+") ><input type='button' id='add_behind_waypoint_composite' name='add_behind_waypoint_composite_button' value='Add Waypoint (behind)' onClick=add_behind_waypoint_composite("+i+","+(found)+") ></div>";
                            infowindow.setContent(contentString);
                            infowindow.open(map,marker);
                    }
            }

            function add_end_waypoint_composite(i,index){
                    infowindow.close();
                    var opciones="toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, width=500, height=230";
                    newwindow=window.open('','',opciones);
                    var tmp = newwindow.document;
                    tmp.write('<html><head></head><body><form id="main" name="main_form"><span style="font-family:verdana;font-size:1em;font-weight:bold;">Waypoint Composite Addition (in the end)</span><br><br><span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Waypoint Name : </span><input type="text" id="name_waypoint_composite" name="name_waypoint_composite_textarea" value="waypoint"/'+'><br><span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Latitude '+flight_segments[i][index][1][1]+': </span><input type="text" id="latitude_waypoint_composite" name="latitude_waypoint_composite_textarea" value="'+flight_segments[i][index][1][2]+'" /'+'><br><span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Longitude '+flight_segments[i][index][2][1]+': </span><input type="text" id="longitude_waypoint_composite" name="longitude_waypoint_composite_textarea" value="'+flight_segments[i][index][2][2]+'" /'+'><br><span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Distance '+flight_segments[i][index][3][1]+': </span><input type="text" id="distance_waypoint_composite" name="distance_waypoint_composite_textarea" value="'+flight_segments[i][index][3][2]+'" /'+'><br><br><input type="button" id="ok_call_adder_end_waypoint_composite" name="ok_call_adder_end_waypoint_composite_button" value="Ok" onClick="window.opener.parent.adder_end_waypoint_composite(document.main_form.name_waypoint_composite_textarea.value,document.main_form.latitude_waypoint_composite_textarea.value,document.main_form.longitude_waypoint_composite_textarea.value,document.main_form.distance_waypoint_composite_textarea.value,'+i+','+index+'); self.close();" ><input type="button" id="cancel_call_adder_end_waypoint_composite" name="cancel_call_adder_end_waypoint_composite_button" value="Cancel" onClick="self.close();" ></form></body></html>');
                    tmp.close();
            }

            function adder_end_waypoint_composite(nombre,latitude,longitude,distance,i,index){
                    if(isNaN(latitude)){
                            alert("Latitude must be a number.");
                            add_end_waypoint_composite(i,index);
                    }else if(latitude==""){
                            alert("Latitude must be a number.");
                            add_end_waypoint_composite(i,index);
                    }else if(isNaN(longitude)){
                            alert("Longitude must be a number.");
                            add_end_waypoint_composite(i,index);
                    }else if(longitude==""){
                            alert("Longitude must be a number.");
                            add_end_waypoint_composite(i,index);
                    }else if(isNaN(distance)){
                            alert("Distance must be a number.");
                            add_end_waypoint_composite(i,index);
                    }else if((flight_segments[i][index][1][1]=="[deg]")&&((latitude>180)||(latitude<-180))){
                            alert("Latitude must be between -180 [deg] and 180 [deg].");
                            add_end_waypoint_composite(i,index);
                    }else if((flight_segments[i][index][1][1]=="[rad]")&&((latitude>Math.PI)||(latitude<-Math.PI))){
                            alert("Latitude must be between -PI [rad] and PI [rad]");
                            add_end_waypoint_composite(i,index);
                    }else if((flight_segments[i][index][1][1]=="[deg]")&&((longitude>360)||(longitude<-360))){
                            alert("Longitude must be between -360 [deg] and 360 [deg].");
                            add_end_waypoint_composite(i,index);
                    }else if((flight_segments[i][index][1][1]=="[rad]")&&((longitude>2*Math.PI)||(longitude<-2*Math.PI))){
                            alert("Longitude must be between -2*PI [rad] and 2*PI [rad].");
                            add_end_waypoint_composite(i,index);
                    }else if((latitude==flight_segments[i][index][1][2])&&(longitude==flight_segments[i][index][2][2])){
                            alert("Latitude or longitude must be different.");
                            add_end_waypoint_composite(i,index);
                    }else{
                            if (flight_segments[i][index][1][1]=="[deg]"){
                                    var position=new g.LatLng(latitude,longitude);
                            }else{
                                    var position=new g.LatLng((latitude*180)/Math.PI,(longitude*180)/Math.PI);
                            }
                            var path = polyLine_composite[i].getPath();
                            if (path.getLength()==0){
                                    alert("not_yet");
                            }else{
                                    adder_behind_waypoint_composite(nombre,latitude,longitude,distance,i,flight_segments[i][5].length-1);
                            }
                    }
            }

            var createMarker_composite = function(point,index,index2) {
                    var imageNormal = new g.MarkerImage(
                            "images/marker_green.png",
                            new g.Size(32, 32),
                            new g.Point(0, 0),
                            new g.Point(10, 30)
                    );
                    var marker = new g.Marker({
                            position: point,
                            map: null,
                            icon: imageNormal,
                            title: "Waypoint "+flight_segments[index][5][index2][0]+". Click me to view details."

                    });
                    g.event.addListener(marker, "click", function() {
                            for(var i=0; i<flight_segments.length; i++) {
                                    if((flight_segments[i][2]!="null")&&(flight_segments[i][2]!=null)){
                                            for(var j=0; j<markers_composite[i].length; j++) {
                                                    if (markers_composite[i][j]==marker){
                                                            contentString="<span style='font-weight:bold; font-family:verdana'>Waypoint: "+flight_segments[i][5][j][0]+"</span><span style='font-family:verdana'><br>-Latitude: "+flight_segments[i][5][j][1][2]+" "+flight_segments[i][5][j][1][1]+"<br>-Longitude: "+flight_segments[i][5][j][2][2]+" "+flight_segments[i][5][j][2][1]+"<br>-Distance: "+flight_segments[i][5][j][3][2]+" "+flight_segments[i][5][j][3][1]+"</span>"+"<br><br><input type='button' id='modify_waypoint_composite' name='modify_waypoint_composite_button' value='Modify Waypoint' onClick=modify_waypoint_composite("+i+","+j+") ><br><input type='button' id='delete_waypoint_composite' name='delete_waypoint_composite_button' value='Delete Waypoint' onClick=delete_waypoint_composite("+i+","+j+") ><br><input type='button' id='add_front_waypoint_composite' name='add_front_waypoint_composite_button' value='Add Waypoint (in front)' onClick=add_front_waypoint_composite("+i+","+j+") ><input type='button' id='add_behind_waypoint_composite' name='add_behind_waypoint_composite_button' value='Add Waypoint (behind)' onClick=add_behind_waypoint_composite("+i+","+j+") ></div>";
                                                            infowindow.setOptions({content: contentString});
                                                            infowindow.open(map,marker);
                                                    }
                                            }
                                    }
                            }
                    });
                    return marker;
            };

            function modify_initial_point(){
                    infowindow.close();
                    var opciones="toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, width=500, height=200";
                    newwindow=window.open('','',opciones);
                    var tmp = newwindow.document;
                    tmp.write('<html><head></head><body><form id="main" name="main_form"><span style="font-family:verdana;font-size:1em;font-weight:bold;">Initial Condition Edition</span><br><br><span style="font-family:verdana;font-size:0.8em;font-weight:normal;">New Latitude '+initial_condition[0][1]+': </span><input type="text" id="phi_ic" name="phi_ic_textarea" value="'+initial_condition[0][2]+'" /'+'><br><span style="font-family:verdana;font-size:0.8em;font-weight:normal;">New Longitude '+initial_condition[1][1]+': </span><input type="text" id="lambda_ic" name="lambda_ic_textarea" value="'+initial_condition[1][2]+'" /'+'><br><br><span style="font-family:verdana;font-size:0.6em;font-weight:normal;">***Leave empty boxes to keep old values</span><br><br><input type="button" id="ok_call_checker_ic" name="ok_call_checker_ic_button" value="Ok" onClick="window.opener.parent.checker_initial_point(document.main_form.lambda_ic_textarea.value, document.main_form.phi_ic_textarea.value); self.close();" ><input type="button" id="cancel_call_checker_ic" name="cancel_call_checker_ic_button" value="Cancel" onClick="window.opener.readAgain();self.close();" ></form></body></html>');
                    tmp.close();
            }

            function checker_initial_point(lambda,phi){
                    oldVersionFS();
                    if(isNaN(lambda)){
                            alert("Longitude must be a number.");
                            modify_initial_point();
                    }else if(isNaN(phi)){
                            alert("Latitude must be a number.");
                            modify_initial_point();
                    }else if((initial_condition[1][1]=="[deg]")&&((lambda>360)||(lambda<-360))){
                            alert("Longitude must be between -360 [deg] and 360 [deg].");
                            modify_initial_point();
                    }else if((initial_condition[1][1]=="[rad]")&&((lambda>2*Math.PI)||(lambda<-2*Math.PI))){
                            alert("Longitude must be between -2*PI [rad] and 2*PI [rad]");
                            modify_initial_point();
                    }else if((initial_condition[1][1]=="[deg]")&&((phi>180)||(phi<-180))){
                            alert("Latitude must be between -180 [deg] and 180 [deg].");
                            modify_initial_point();
                    }else if((initial_condition[1][1]=="[rad]")&&((phi>Math.PI)||(phi<-Math.PI))){
                            alert("Latitude must be between -PI [rad] and PI [rad].");
                            modify_initial_point();
                    }else{
                            if (lambda=="") lambda=initial_condition[0][2];
                            if (phi=="") phi=initial_condition[1][2];
                            if (initial_condition[1][1]=="[deg]"){
                                    var position=new g.LatLng(phi,lambda);
                            }else{
                                    var position=new g.LatLng((phi*180)/Math.PI,(lambda*180)/Math.PI);
                            }
                            var path=polyLine[0].getPath();
                            path.setAt(1,position);
                            markers_initial.setPosition(position);
                            if ((lambda!=initial_condition[0][2])||(phi!=initial_condition[1][2])){
                                    var ic=IC.split("||");
                                    for(var i=0;i<ic.length;i++){
                                            if (ic[i].indexOf("<gc:lambda")!=-1){
                                                    var temp=ic[i];
                                                    var temp2=temp.substr(0,temp.indexOf("value=")+7)+lambda+'"/'+">";
                                                    ic[i]=temp2;
                                            }else if (ic[i].indexOf("<gc:phi")!=-1){
                                                    var temp=ic[i];
                                                    var temp2=temp.substr(0,temp.indexOf("value=")+7)+phi+'"/'+">";
                                                    ic[i]=temp2;
                                            }
                                    }
                                    IC=ic.join("||");
                                    xajax_modify_ic(IC);
                                    initial_condition[1][2]=phi;
                                    initial_condition[0][2]=lambda;
                                    contentString="<div style='width:300px;height:120px'><span style='font-weight:bold; font-family:verdana'>Initial Condition</span><br><span style='font-family:verdana'>-Lambda: "+initial_condition[0][2]+" "+initial_condition[0][1]+"<br>-Phi: "+initial_condition[1][2]+" "+initial_condition[1][1]+"</span>"+"<br><br><input type='button' id='modify_ic' name='modify_ic_button' value='Modify Coordinates' onClick=modify_initial_point() ></div>";
                                    infowindow.setContent(contentString);
                            }
                            infowindow.open(map,markers_initial);
                    }
                    readAgain();
            }

            var createMarker_initial = function(point) {
                    var marker = new g.Marker({
                            position: point,
                            map: map,
                            draggable: true,
                            title: "Initial Condition. Click me to view details."

                    });
                    g.event.addListener(marker, "dragend", function() {

                                var position =marker.getPosition();
                                var position1=String(position);
                                var position2=position1.replace(/[\(\)]/g, "");
                                var position3=position2.split(",");
                                var lambda = parseFloat(position3[1]);
                                if(lambda<0){
                                    lambda+=360;
                                }
                                var phi = parseFloat(position3[0]);
                                if(phi<0){
                                    phi+=360;
                                }
                                checker_initial_point(lambda,phi);

                    });
                    g.event.addListener(marker, "click", function() {
                            contentString="<div style='width:300px;height:95px'><span style='font-weight:bold; font-family:verdana'>Initial Condition</span><br><span style='font-family:verdana'>-Lambda: "+initial_condition[1][2]+" "+initial_condition[1][1]+"<br>-Phi: "+initial_condition[0][2]+" "+initial_condition[0][1]+"</span>"+"<br><br><input type='button' id='modify_ic' name='modify_ic_button' value='Modify Coordinates' onClick=modify_initial_point() ></div>";
                            infowindow.setOptions({content: contentString});
                            infowindow.open(map,marker);
                    });
                    return marker;
            };

            var createMarker_constraint = function(point,index) {
                    var marker = new g.Marker({
                            position: point,
                            map: map,
                            title: "Click me to view restriction details."
                    });
                    g.event.addListener(marker, "click", function() {
                        var position = marker.getPosition();
                        var position1=String(position);
                        var position2=position1.replace(/[\(\)]/g, "");
                        var position3=position2.split(",");
                        var lon = parseFloat(position3[1]);
                        var lat = parseFloat(position3[0]);

                        var constr=String(gc_constraints[1][index]);
                        var constrString=constr.split(",");
                        var type="";
                        if(constrString[0]=="volumeDoA"){
                            type="Volume";
                        }else if(constrString[0]=="segmentDoA"){
                            type="Segment";
                        }else{
                            type="Point";
                        }
                        constrString.splice(0,3);
                        var name = new Array();
                        var nameUnit = new Array();
                        var latitude = new Array();
                        var latitudeUnit = new Array();
                        var longitude = new Array();
                        var longitudeUnit = new Array();
                        var distance = new Array();
                        var distanceUnit = new Array();
                        var stringDiv ="<span style=' ;font-weight:bold; font-family:verdana'>Type of Constraint: "+type+"</span><br><br>";
                        var contC=0;
                        
                        for(var i=0;i<constrString.length;i=i+10){
                            name[contC]=constrString[i];
                            latitude[contC]=constrString[i+3];
                            latitudeUnit[contC]=constrString[i+2];
                            longitude[contC]=constrString[i+6];
                            longitudeUnit[contC]=constrString[i+5];
                            distance[contC]=constrString[i+9];
                            distanceUnit[contC]=constrString[i+8];
                            
                            if((lat==latitude[contC])&&(lon==longitude[contC])&&(type!="Point")){
                                stringDiv+="<span style=' ;font-weight:bold; font-family:verdana;color: #f00;'>Point Details "+(contC+1)+": "+name[contC]+"</span><br><span style='font-family:verdana'>-Latitude: "+latitude[contC]+" "+latitudeUnit[contC]+"<br>-Longitude: "+longitude[contC]+" "+longitudeUnit[contC]+"<br>-Distance: "+distance[contC]+" "+distanceUnit[contC]+"<br><br>";
                            }else{
                                stringDiv+="<span style=' ;font-weight:bold; font-family:verdana'>Point Details "+(contC+1)+": "+name[contC]+"</span><br><span style='font-family:verdana'>-Latitude: "+latitude[contC]+" "+latitudeUnit[contC]+"<br>-Longitude: "+longitude[contC]+" "+longitudeUnit[contC]+"<br>-Distance: "+distance[contC]+" "+distanceUnit[contC]+"<br><br>";
                            }
                            contC++;
                        }
                        var contentString = stringDiv+"<input type=button id=delete_constraint name=delete_constraint_button value='Delete Constraint' onClick=deletePointCons("+(index+1)+") >";
                        infowindow.setOptions({content: contentString});
                        infowindow.open(map,marker);
                        
                        /*
                            for (var i=0; i< markers_polygon.length; i++) {
                                    for (var j = 0; j < markers_polygon[i].length; j++) {
                                            if (markers_polygon[i][j] == marker) {
                                                    var temp1=marker.getPosition();
                                                    var temp2=temp1.lat();
                                                    var temp3=temp1.lng();
                                                    for(var l=0; l<gc_constraints[1][index_constraint][3].length; l++) {
                                                            if (gc_constraints[1][index_constraint][3][l][1][1]=="[deg]"){;
                                                                    var position=new g.LatLng(gc_constraints[1][index_constraint][3][l][1][2],gc_constraints[1][index_constraint][3][l][2][2]);
                                                            }else{
                                                                    var position=new g.LatLng((gc_constraints[1][index_constraint][3][l][1][2]*180)/Math.PI,(gc_constraints[1][index_constraint][3][l][2][2]*180)/Math.PI);
                                                            }
                                                            var name_temp=gc_constraints[1][index_constraint][3][l][0];
                                                            if((temp2==position.lat())&&(temp3==position.lng())){
                                                                    var min_Hp=gc_constraints[1][index_constraint][1][0]+": "+gc_constraints[1][index_constraint][1][2]+" "+gc_constraints[1][index_constraint][1][1];
                                                                    var max_Hp=gc_constraints[1][index_constraint][2][0]+": "+gc_constraints[1][index_constraint][2][2]+" "+gc_constraints[1][index_constraint][2][1];
                                                                    var inequation=gc_constraints[0][index_constraint][0][0]+" "+gc_constraints[0][index_constraint][0][1];
                                                                    var function_g1=gc_constraints[0][index_constraint][1][0]+" "+gc_constraints[0][index_constraint][1][1]+" "+gc_constraints[0][index_constraint][1][2];
                                                                    var function_f=gc_constraints[0][index_constraint][2][0]+" "+gc_constraints[0][index_constraint][2][1]+" "+gc_constraints[0][index_constraint][2][2]+" "+gc_constraints[0][index_constraint][2][3]+" "+gc_constraints[0][index_constraint][2][4]+" "+gc_constraints[0][index_constraint][2][5];
                                                                    var function_g2=gc_constraints[0][index_constraint][3][0]+" "+gc_constraints[0][index_constraint][3][1]+" "+gc_constraints[0][index_constraint][3][2];
                                                                    var lat=gc_constraints[1][index_constraint][3][l][1][2]+" "+gc_constraints[1][index_constraint][3][l][1][1];
                                                                    var lng=gc_constraints[1][index_constraint][3][l][2][2]+" "+gc_constraints[1][index_constraint][3][l][2][1];
                                                                    var distance=gc_constraints[1][index_constraint][3][l][3][2]+" "+gc_constraints[1][index_constraint][3][l][3][1];
                                                                    var contentString='<span style="font-weight:bold; font-family:verdana">Point Details: '+name_temp+'</span><br><span style="font-family:verdana">-Latitude: '+lat+'<br>-Longitude: '+lng+'<br>-Distance: '+distance+'<br>-'+min_Hp+'<br>-'+max_Hp+'</span><br><br><span style="font-weight:bold; font-family:verdana">Restriction type: '+inequation+'</span><br><span style="font-family:verdana">-function_g1: '+function_g1+'<br>-function_f: '+function_f+'<br>-function_g2: '+function_g2+"</span>"+"<br><br><input type='button' id='modify_constraint' name='modify_constraint_button' value='Modify Constraint' onClick=modify_constraint("+index+") ><br><input type='button' id='delete_constraint' name='delete_constraint_button' value='Delete Constraint' onClick=delete_constraint("+index+") ><br><input type='button' id='add_constraint' name='add_constraint_button' value='Add Constraint' onClick=add_constraint("+index+") >";
                                                                    infowindow.setOptions({content: contentString});
                                                                    infowindow.open(map,marker);
                                                                    break;
                                                            }
                                                    }
                                            }
                                    }
                            }
                            m = null;
                    */
                    
                    });
                    return marker;
            };

            function load_map() {
            
                initMap('mapcontainer');
                    for(var i=0; i<flight_segments.length; i++) {
                            markers[i]=new Array();

                            //Iniciamos los flight segments con los colores apropiados dependiendo de que tengan composite nulo o no.
                            if ((flight_segments[i][2]=="null")||(flight_segments[i][2]==null)) initPolyline(i,"empty");
                            else initPolyline(i,"");

                            function represent_point(fs,index){
				if (flight_segments[fs][index][1][1]=="[deg]"){
					var position=new g.LatLng(flight_segments[fs][index][1][2],flight_segments[fs][index][2][2]);
				}else{
					var position=new g.LatLng((flight_segments[fs][index][1][2]*180)/Math.PI,(flight_segments[fs][index][2][2]*180)/Math.PI);
				}
				var marker = createMarker_flightSegment(position,fs);
				markers[fs].push(marker);
				var path = polyLine[fs].getPath();
				path.push(position);
				marker = null;
                            }

                            function represent_point_initial(fs){
                                    if (initial_condition[0][1]=="[deg]"){
                                            var position=new g.LatLng(initial_condition[0][2],initial_condition[1][2]);
                                    }else{
                                            var position=new g.LatLng((initial_condition[0][2]*180)/Math.PI,(initial_condition[1][2]*180)/Math.PI);
                                    }
                                    var marker = createMarker_initial(position);
                                    markers_initial=marker;
                                    var path = polyLine[fs].getPath();
                                    path.push(position);
                                    marker = null;
                            }

                            //Vemos donde está el trigger, el punto, y lo representamos
                            if (flight_segments[i][7]!=null){
                                    if (i!=0){ 
                                            represent_point(i,7);
                                            var position=markers[i-1][0].getPosition();
                                            var path = polyLine[i].getPath();
                                            path.push(position);
                                    }
                                    else {
                                            represent_point(i,7);
                                            represent_point_initial(i);
                                    }
                            }else if (flight_segments[i][8]!=null){
                                    if (i!=0){ 
                                            represent_point(i,8);
                                            var position=markers[i-1][0].getPosition();
                                            var path = polyLine[i].getPath();
                                            path.push(position);
                                    }
                                    else {
                                            represent_point_initial(i);
                                            represent_point(i,8);
                                    }
                            }else{
                                    alert("Error inesperado");
                            }

                            function represent_point_composite(fs,index){
                                    if (flight_segments[fs][5][index][1][1]=="[deg]"){
                                            var position=new g.LatLng(flight_segments[fs][5][index][1][2],flight_segments[fs][5][index][2][2]);
                                    }else{
                                            var position=new g.LatLng((flight_segments[fs][5][index][1][2]*180)/Math.PI,(flight_segments[fs][5][index][2][2]*180)/Math.PI);
                                    }
                                    var marker = createMarker_composite(position,fs,index);
                                    markers_composite[fs].push(marker);
                                    var path = polyLine_composite[fs].getPath();
                                    path.push(position);
                                    marker = null;
                            }

                            //Representamos los composite, pero en modo invisible
                            if((flight_segments[i][2]!="null")&&(flight_segments[i][2]!=null)){
                                    markers_composite[i]=new Array();
                                    var polyOptions = {
                                            strokeColor: "blue",
                                            strokeOpacity: 4,
                                            strokeWeight: 4,
                                            clickable: false
                                    };
                                    polyLine_composite[i] = new g.Polyline(polyOptions);
                                    polyLine_composite[i].setMap(null);
                                    if (i!=0) var position=markers[i-1][0].getPosition();
                                    else var position=markers_initial.getPosition();
                                    var path = polyLine_composite[i].getPath();
                                    path.push(position);
                                    for(var j=0;j<flight_segments[i][5].length;j++){
                                            represent_point_composite(i,j);
                                    }
                                    var position=markers[i][0].getPosition();
                                    var path = polyLine_composite[i].getPath();
                                    path.push(position);
                            }
                    }

                    for(var i=0; i<gc_constraints[0].length; i++) {
                            markers_polygon[i]=new Array();
                            //Dibuja la restriccion de punto
                            var pr = new Array();
                            var consP = new Array();
                            for(var k=0;k<gc_constraints[1].length;k++){
                                pr[k]=String(gc_constraints[1][k]);
                                consP[k]=pr[k].split(",");
                                if(consP[k].length<15){
                                    var latitude=parseInt(consP[k][6]);
                                    var longitude=parseInt(consP[k][9]);
                                    var position=new google.maps.LatLng(latitude,longitude);
                                    //var marker=initPointCons(position,k);
                                }
                            }
                            initPolygon(i);
                            for(var j=0; j<gc_constraints[1][i][3].length; j++) {
                                    if (gc_constraints[1][i][3][j][1][1]=="[deg]"){;
                                            var position=new g.LatLng(gc_constraints[1][i][3][j][1][2],gc_constraints[1][i][3][j][2][2]);
                                    }else{
                                            var position=new g.LatLng((gc_constraints[1][i][3][j][1][2]*180)/Math.PI,(gc_constraints[1][i][3][j][2][2]*180)/Math.PI);
                                    }
                                    var marker = createMarker_constraint(position,i);
                                    markers_polygon[i].push(marker);
                                    var path = polygon[i].getPath();
                                    path.push(position);
                                    marker = null;
                            }
                    }       
                    bounds();
                    //hide_markers_fidoSegment();
                    //hide_marker_initial();
                    show_marker_initial();
                    show_markers_fidoSegment();
                    
                    if(edition=="fields"){
                        xajax_show_select_fidoConstraint_fields(gc_constraints[0].length);
                    }else{
                        xajax_show_select_fidoConstraint(gc_constraints[0].length);
                    }
                    
                    hide_marker_fidoConstraint();
                    
                    if(edition=="fields"){
                        document.forms['main_form']['show_fields_button'].disabled=false;
                    }else{
                        document.forms['main_form']['anchor_button'].disabled=false;
                    }
            };



            function bounds(){
                    var bounds = new google.maps.LatLngBounds();
                    for (var i=0;i<markers.length;i++){
                            if((flight_segments[i][2]!="null")&&(flight_segments[i][2]!=null)){
                                    for(var j=0;j<markers_composite[i].length;j++){
                                            bounds.extend(markers_composite[i][j].getPosition());
                                    }
                            }
                            bounds.extend(markers[i][0].getPosition());
                    }
                    for (var i=0;i<markers_polygon.length;i++){
                            for (var j=0;j<markers_polygon[i].length;j++){
                                    bounds.extend(markers_polygon[i][j].getPosition());
                            }
                    }
                    bounds.extend(markers_initial.getPosition());
                    map.fitBounds(bounds);
            }

            function hide_markers_fidoSegment(){
                    for (var i=0;i<markers.length;i++){
                            if (markers[i][0]!=null) markers[i][0].setMap(null);
                    }
                    for (var i=0;i<markers.length;i++){
                            if((flight_segments[i][2]!="null")&&(flight_segments[i][2]!=null)){
                                    polyLine[i].setOptions({clickable:false});
                                    for(var j=0; j<markers_composite[i].length; j++){
                                            markers_composite[i][j].setMap(null);
                                    }
                                    var polyOptions = {
                                            strokeColor: "blue",
                                            strokeOpacity: 2,
                                            strokeWeight: 4,
                                            clickable: false
                                    };
                                    polyLine[i].setOptions(polyOptions);
                                    polyLine_composite[i].setMap(null);
                            }
                    }
                    if(edition=="fields"){
                        if(document.getElementById("showMarkers_segments_n")==null){
                            document.getElementById("hideMarkers_segments_n").setAttribute('onclick','show_markers_fidoSegment()');
                            document.getElementById("hideMarkers_segments_n").value="Activate Flight Segment";
                        }else{
                            document.getElementById("showMarkers_segments_n").setAttribute('onclick','show_markers_fidoSegment()');
                            document.getElementById("showMarkers_segments_n").value="Activate Flight Segment";
                        }
                    }else{
                        xajax_show_button_fidoSegment();
                    }
            }

            function show_markers_fidoSegment(){
                    for (var i=0;i<markers.length;i++){
                            if (markers[i][0]!=null) markers[i][0].setMap(map);
                    }
                    for (var i=0;i<markers.length;i++){
                            if((flight_segments[i][2]!="null")&&(flight_segments[i][2]!=null)){
                                    polyLine[i].setOptions({clickable:true});
                            }
                    }
                    if(edition=="fields"){
                        if(document.getElementById("showMarkers_segments_n")==null){
                            document.getElementById("hideMarkers_segments_n").setAttribute('onclick','hide_markers_fidoSegment()');
                            document.getElementById("hideMarkers_segments_n").value="Defuse Flight Segment";
                        }else{
                            document.getElementById("showMarkers_segments_n").setAttribute('onclick','hide_markers_fidoSegment()');
                            document.getElementById("showMarkers_segments_n").value="Defuse Flight Segment";
                        }
                    }else{
                        xajax_hide_button_fidoSegment();
                    }
            }

            function hide_marker_initial(){
                    markers_initial.setMap(null);
                    if(edition=="fields"){
                        if(document.getElementById("showMarkers_initial_n")==null){
                            document.getElementById("hideMarkers_initial_n").setAttribute('onclick','show_marker_initial()');
                            document.getElementById("hideMarkers_initial_n").value="Activate Initial Point";
                        }else{
                            document.getElementById("showMarkers_initial_n").setAttribute('onclick','show_marker_initial()');
                            document.getElementById("showMarkers_initial_n").value="Activate Initial Point";
                        }
                    }else{
                        xajax_show_button_initial();
                    }
                    
            }

            function show_marker_initial(){
                    markers_initial.setMap(map);
                    if(edition=="fields"){
                        if(document.getElementById("showMarkers_initial_n")==null){
                            document.getElementById("hideMarkers_initial_n").setAttribute('onclick','hide_marker_initial()');
                            document.getElementById("hideMarkers_initial_n").value="Defuse Initial Point";
                        }else{
                            document.getElementById("showMarkers_initial_n").setAttribute('onclick','hide_marker_initial()');
                            document.getElementById("showMarkers_initial_n").value="Defuse Initial Point";
                        }
                    }else{
                        xajax_hide_button_initial();
                    }                  
            }

            function hide_markers_fidoConstraint(){

                    var polyOptions = {
                            strokeColor: "red",
                            strokeOpacity: 1,
                            strokeWeight: 2,
                            fillColor: "red",
                            fillOpacity: 0.25,
                            clickable: false
                    };
                    for (var i=0;i<markers_polygon.length;i++){
                            for (var j=0;j<markers_polygon[i].length;j++){
                                    markers_polygon[i][j].setMap(null);
                            }
                            polygon[i].setOptions(polyOptions);
                    }
                    if(edition=="fields"){
                        xajax_show_button_fidoConstraint_fields();
                    }else{
                        xajax_show_button_fidoConstraint(); 
                    }
            }

            function select_fidoConstraint(){
                    var selected=document.forms['main_form']['select_constraint_select'].selectedIndex;
                    hide_markers_fidoConstraint();
                    if (selected!=0){
                        if(edition=="fields"){
                            xajax_show_button_fidoConstraint_fields();
                        }else{
                            xajax_show_button_fidoConstraint(); 
                        }
                            index_constraint=selected-1;
                    }
                    else xajax_div_fidoConstraint_null();
            }

            function show_markers_fidoConstraint(){
                    var selected=document.forms['main_form']['select_constraint_select'].selectedIndex;
                    for (var i=0;i<markers_polygon[selected-1].length;i++){
                            markers_polygon[selected-1][i].setMap(map);
                    }
                    var color="orange";
                    if(gc_constraints[1][selected-1][0]=="volumeDoA"){
                        color="white";
                    }
                    var polyOptions = {
                            strokeColor: color,
                            strokeOpacity: 1,
                            strokeWeight: 2,
                            fillColor: color,
                            fillOpacity: 0.25
                    };
                    polygon[selected-1].setOptions(polyOptions);
                    if(edition=="fields"){
                        xajax_hide_button_fidoConstraint_fields();
                    }else{
                        xajax_hide_button_fidoConstraint();
                    }
            }

            function hide_marker_fidoConstraint(){

                    var polyOptions = {
                            strokeColor: "red",
                            strokeOpacity: 1,
                            strokeWeight: 2,
                            fillColor: "red",
                            fillOpacity: 0.25,
                            clickable: false
                    };
                    for (var i=0;i<markers_polygon.length;i++){
                            for (var j=0;j<markers_polygon[i].length;j++){
                                    markers_polygon[i][j].setMap(null);
                            }
                            polygon[i].setOptions(polyOptions);
                    }
            }

    </script>
        
        <script type="text/javascript">
            var fi1;
            var ic1;
            /*
             * The porpose of this funtion is to write the FI name
             */
            function writeFI(){
                document.getElementById("view_ic").disabled=false;
                fi1=document.getElementsByTagName('DIV')[5];
                fi1.value = "";
                //Pone el valor requerido del nombre
                fi1.id="fi_name";
                fi2=document.getElementsByTagName('DIV')[6];
                fi2.value = "";
                //Pone el valor requerido del archivo
                fi2.id="fi_text";     
                xajax_show_repository('fi',document.main_form.repo_fi_select.options[document.main_form.repo_fi_select.selectedIndex].value);
                if((document.main_form.repo_fi_select.options[document.main_form.repo_fi_select.selectedIndex].value!=0)&&(document.main_form.repo_ic_select.options[document.main_form.repo_ic_select.selectedIndex].value!=0)){
                    xajax_reader();
                }
                if((document.main_form.repo_ic_select.options[document.main_form.repo_ic_select.selectedIndex].value)==0){
                    document.getElementById("view_ic").disabled=true;
                }
                document.getElementById("view_fi").disabled=true;
            }
            /*
             * The porpose of this funtion is to view the FI name
             */
            function viewFI(){
                document.getElementById("view_ic").disabled=false;
                fi1=document.getElementsByTagName('DIV')[5];
                fi1.value = "";
                //Pone el valor requerido del nombre
                fi1.id="fi_name";
                fi2=document.getElementsByTagName('DIV')[6];
                fi2.value = "";
                //Pone el valor requerido del archivo
                fi2.id="fi_text";     
                xajax_show_repository('fi',document.main_form.repo_fi_select.options[document.main_form.repo_fi_select.selectedIndex].value);
                if((document.main_form.repo_fi_select.options[document.main_form.repo_fi_select.selectedIndex].value!=0)&&(document.main_form.repo_ic_select.options[document.main_form.repo_ic_select.selectedIndex].value!=0)){
                }
                if((document.main_form.repo_ic_select.options[document.main_form.repo_ic_select.selectedIndex].value)==0){
                    document.getElementById("view_ic").disabled=true;
                }
                document.getElementById("view_fi").disabled=true;
            }
            /*
             * The porpose of this funtion is to write the IC name
             */
            function writeIC(){
                document.getElementById("view_fi").disabled=false;
                ic1=document.getElementsByTagName('DIV')[5];
                ic1.value = "";
                //Pone el valor requerido del nombre
                ic1.id="ic_name";
                ic2=document.getElementsByTagName('DIV')[6];
                ic2.value = "";
                //Pone el valor requerido del archivo
                ic2.id="ic_text";
                xajax_show_repository('ic',document.main_form.repo_ic_select.options[document.main_form.repo_ic_select.selectedIndex].value);
                if((document.main_form.repo_fi_select.options[document.main_form.repo_fi_select.selectedIndex].value!=0)&&(document.main_form.repo_ic_select.options[document.main_form.repo_ic_select.selectedIndex].value!=0)){
                    xajax_reader();
                }
                if(document.main_form.repo_fi_select.options[document.main_form.repo_fi_select.selectedIndex].value==0){
                    document.getElementById("view_fi").disabled=true;
                }
                document.getElementById("view_ic").disabled=true;
                document.getElementById("mapGen").style.display="none";
            }
            /*
             * The porpose of this funtion is to view the IC name
             */
            function viewIC(){
                document.getElementById("view_fi").disabled=false;
                ic1=document.getElementsByTagName('DIV')[5];
                ic1.value = "";
                //Pone el valor requerido del nombre
                ic1.id="ic_name";
                ic2=document.getElementsByTagName('DIV')[6];
                ic2.value = "";
                //Pone el valor requerido del archivo
                ic2.id="ic_text";
                xajax_show_repository('ic',document.main_form.repo_ic_select.options[document.main_form.repo_ic_select.selectedIndex].value);
                if((document.main_form.repo_fi_select.options[document.main_form.repo_fi_select.selectedIndex].value!=0)&&(document.main_form.repo_ic_select.options[document.main_form.repo_ic_select.selectedIndex].value!=0)){
                }
                if(document.main_form.repo_fi_select.options[document.main_form.repo_fi_select.selectedIndex].value==0){
                    document.getElementById("view_fi").disabled=true;
                }
                document.getElementById("view_ic").disabled=true;
            }
            /*
             * The porpose of this funtion is to save or add the file in DataBase
             */
            function addFile(){
                if(button=='fi'){
                    if((document.getElementsByTagName('DIV')[5]).id=="fp_name"){ 
                        document.getElementById("name_fp").name="name_fi";
                        document.getElementById("fp_fp").name="fi_fi_textarea";
                    }
                    if(type=="new"){
                        xajax_add_repository('fi',document.main_form.name_fi.value, document.main_form.fi_fi_textarea.value);
                    }else{
                        xajax_save_repository('fi',document.main_form.name_fi.value, document.main_form.fi_fi_textarea.value);
                    }
                    parser();
                }
                if(button=='ic'){
                    if((document.getElementsByTagName('DIV')[5]).id=="fp_name"){ 
                        document.getElementById("name_fp").name="name_ic_textarea";
                        document.getElementById("fp_fp").name="ic_ic_textarea";
                    }else{
                        document.getElementById("name_fi").name="name_ic_textarea";
                        document.getElementById("fi_fi").name="ic_ic_textarea";
                    }
                    if(type=="new"){
                        xajax_add_repository('ic',document.main_form.name_ic_textarea.value, document.main_form.ic_ic_textarea.value); 
                    }else{
                        xajax_save_repository('ic',document.main_form.name_ic_textarea.value, document.main_form.ic_ic_textarea.value); 
                    }
                }   
            }
            /*
             * The porpose of this funtion is to remove the file in DataBase
             */
            function removeFile(){
                if(((document.getElementsByTagName('DIV')[5]).id=="fi_name")||(button=='fi')){
                    confirm_delete(document.main_form.repo_fi_select.options[document.main_form.repo_fi_select.selectedIndex].value);
                }
                else if(((document.getElementsByTagName('DIV')[5]).id=="ic_name")||(button=='ic')){
                    confirm_delete(document.main_form.repo_ic_select.options[document.main_form.repo_ic_select.selectedIndex].value);
                }
            }
            /*
             * The porpose of this funtion is to load the page
             */
            function load(){
                //Ambos casos cargados
                if((document.main_form.repo_fi_select.options[document.main_form.repo_fi_select.selectedIndex].value!=0)&&(document.main_form.repo_ic_select.options[document.main_form.repo_ic_select.selectedIndex].value!=0)){
                    fi11=document.getElementsByTagName('DIV')[5];
                    fi11.id="fi_name";
                    fi21=document.getElementsByTagName('DIV')[6];
                    fi21.id="fi_text";    
                    xajax_show_repository('ic',document.main_form.repo_ic_select.options[document.main_form.repo_ic_select.selectedIndex].value);
                    xajax_show_repository('fi',document.main_form.repo_fi_select.options[document.main_form.repo_fi_select.selectedIndex].value);
                    xajax_reader();
                    setTimeout("show_markers_fidoSegment();",1200);
                    setTimeout("show_marker_initial();",1200);
                    document.getElementById("view_fi").disabled=true;
                    
                //Solo está cargado FI
                }else if(document.main_form.repo_fi_select.options[document.main_form.repo_fi_select.selectedIndex].value!=0){
                    fi11=document.getElementsByTagName('DIV')[5];
                    fi11.id="fi_name";
                    fi21=document.getElementsByTagName('DIV')[6];
                    fi21.id="fi_text";
                    xajax_show_repository('fi',document.main_form.repo_fi_select.options[document.main_form.repo_fi_select.selectedIndex].value);
                    document.getElementById("view_fi").disabled=true;
                    if((document.main_form.repo_ic_select.options[document.main_form.repo_ic_select.selectedIndex].value)==0){
                        document.getElementById("view_ic").disabled=true;
                    }
                //Solo está cargado IC
                }else if(document.main_form.repo_ic_select.options[document.main_form.repo_ic_select.selectedIndex].value!=0){
                    ic11=document.getElementsByTagName('DIV')[5];
                    ic11.id="ic_name";
                    ic21=document.getElementsByTagName('DIV')[6];
                    ic21.id="ic_text";
                    xajax_show_repository('ic',document.main_form.repo_ic_select.options[document.main_form.repo_ic_select.selectedIndex].value);
                    document.getElementById("view_ic").disabled=true;
                    if(document.main_form.repo_fi_select.options[document.main_form.repo_fi_select.selectedIndex].value==0){
                        document.getElementById("view_fi").disabled=true;
                    }
                //Ninguno está cargado
                }else{
                    xajax_show_repository('fi',document.main_form.repo_fi_select.options[document.main_form.repo_fi_select.selectedIndex].value);
                    xajax_show_repository('ic',document.main_form.repo_ic_select.options[document.main_form.repo_ic_select.selectedIndex].value);
                    document.getElementById("view_fi").disabled=true;
                    document.getElementById("view_ic").disabled=true;
                }                
            }
            function reload(){
                document.location.href = document.location.href;
            }
            
        </script>
        
        <script>
            var edition;
            var pointsFS=new Array();
            /*
             * Muestra la edicion por Fields
             */
            function showFields(){
                edition="fields";
                document.getElementById("XML_edition").style.display="none";
                document.getElementById("Fields_edition").style.display="block";
                document.getElementById("show_xml").disabled=false;
                document.getElementById("show_fields").disabled=true;
                document.getElementById("view_fi").disabled=false;
                document.getElementById("view_ic").disabled=false;
                document.getElementById("edit_fi").disabled=true;
                document.getElementById("edit_ic").disabled=true;
                
                oldVersionFS();
                parser();
                writeFS();
                writeCons();
                
                //Recoge del storage la informacion
                var idsOCM=localStorage["IdPoints"];
                var latitudesOCM=localStorage["latitudePoints"];
                var longitudesOCM=localStorage["longitudePoints"];
                if(idsOCM==null){
                    alert("You have to load OCM simplifed");
                }else{
                    var totalIdsOCM=idsOCM.split(",");
                    var totalLatitudesOCM=latitudesOCM.split(",");
                    var totalLongitudesOCM=longitudesOCM.split(",");
                    points[0]=totalIdsOCM;
                    points[1]=totalLatitudesOCM;
                    points[2]=totalLongitudesOCM;
                }

                var markerIni =document.getElementById("showMarkers_initial");
                if(markerIni==null){
                    var markerIniD =document.getElementById("hideMarkers_initial");
                    markerIniD.id="hideMarkers_initial_n";
                }else{
                    markerIni.id="showMarkers_initial_n";
                }
                var markerSeg =document.getElementById("showMarkers_segments");
                if(markerSeg==null){
                    var markerSegD =document.getElementById("hideMarkers_segments");
                    markerSegD.id="hideMarkers_segments_n";
                }else{
                    markerSeg.id="showMarkers_segments_n";
                }
                var selectCons =document.getElementById("select_constraint");
                    selectCons.id="select_constraint_n";
                    
                var markerShowCons =document.getElementById("showMarkers_constraint");
                if(markerShowCons!=null){
                    markerShowCons.id="showMarkers_constraint_n";
                    markerShowCons.style.display="none";
                }
                var markerHideCons =document.getElementById("hideMarkers_constraint");
                if(markerHideCons!=null){
                    markerHideCons.id="hideMarkers_constraint_n";
                    markerHideCons.style.display="none";
                }
            }
            
            /*
             * Muestra la edicion por XML
             */
            function showXML(){
                edition="xml";
                document.getElementById("XML_edition").style.display="block";
                document.getElementById("Fields_edition").style.display="none";
                document.getElementById("show_xml").disabled=true;
                document.getElementById("show_fields").disabled=false;
                
                if(document.main_form.name_fi_textarea!=""){
                    document.getElementById("edit_fi").disabled=false;
                }
                
                var markerIni =document.getElementById("showMarkers_initial_n");
                if(markerIni==null){
                    var markerIniD =document.getElementById("hideMarkers_initial_n");
                    markerIniD.id="hideMarkers_initial";
                }else{
                    markerIni.id="showMarkers_initial";
                }
                var markerSeg =document.getElementById("showMarkers_segments_n");
                if(markerSeg==null){
                    var markerSegD =document.getElementById("hideMarkers_segments_n");
                    markerSegD.id="hideMarkers_segments";
                }else{
                    markerSeg.id="showMarkers_segments";
                }
                
                var selectCons =document.getElementById("select_constraint_n");
                selectCons.id="select_constraint";
                
                var markerShowCons =document.getElementById("showMarkers_constraint_n");
                if(markerShowCons!=null){
                    markerShowCons.id="showMarkers_constraint";
                }
                var markerHideCons =document.getElementById("hideMarkers_constraint_n");
                if(markerHideCons!=null){
                    markerHideCons.id="hideMarkers_constraint";
                }
            }
            
            var numFS;
            /*
             * Funcion encargada de escribir los Flight Segments
             */
            function writeFS(){
                var divFS = document.getElementById("fp_name1");
                numFS=flight_segments.length;
                
                // Cambia el tamaño del div que contiene los FS
                if(numFS>28){
                    divFS.setAttribute("style","width:490px;height:500px;padding:10px;border:1px solid #aaaaaa");
                }else if(numFS>20){
                    divFS.setAttribute("style","width:490px;height:400px;padding:10px;border:1px solid #aaaaaa");
                }else if(numFS>12){
                    divFS.setAttribute("style","width:490px;height:300px;padding:10px;border:1px solid #aaaaaa");
                }else{
                    divFS.setAttribute("style","width:490px;height:200px;padding:10px;border:1px solid #aaaaaa");
                }
                
                //Eliminamos todos los div
                document.getElementById("fp_name1").innerHTML='';
                
                //Creamos los div delas ic
                var icdiv = document.createElement("div");
                icdiv.setAttribute("id","icdiv");
                icdiv.setAttribute("style","background: #99FFFF;width:70px;height:50px;padding:2px;border: solid #aaaaaa;float: left");
                icdiv.setAttribute("title","Initial Condition");
                icdiv.setAttribute("ondrop","clonar(event);drop(event);moddIC()");
                icdiv.setAttribute("ondragover","allowDrop(event)");
                icdiv.innerHTML = "<h2 style='text-align: center'>Initial Condition</h2>";
                document.getElementById('fp_name1').appendChild(icdiv);
                //Creamos los div de los cuadros y los FS
                if(numFS==0){
                    var otherdiv0 = document.createElement("div");
                    otherdiv0.setAttribute("id","otherdiv0");
                    otherdiv0.setAttribute("style","width:10px;height:50px;padding:2px;border: solid background;float: left");
                    otherdiv0.setAttribute("ondrop","clonar(event);drop(event);addFS(0)");
                    otherdiv0.setAttribute("ondragover","allowDrop(event,0)");
                    document.getElementById('fp_name1').appendChild(otherdiv0);
                }
                for(var i=0;i<numFS;i++){
                    if(i==0){
                        //Creamos el primer div donde se accede
                        var otherdiv0 = document.createElement("div");
                        otherdiv0.setAttribute("id","otherdiv"+i+"");
                        otherdiv0.setAttribute("style","width:10px;height:50px;padding:2px;border: solid background;float: left");
                        otherdiv0.setAttribute("ondrop","clonar(event);drop(event);addFS("+i+")");
                        otherdiv0.setAttribute("ondragover","allowDrop(event,"+i+")");
                        document.getElementById('fp_name1').appendChild(otherdiv0);
                    }
                    pointsFS[i]=flight_segments[i][8][0];
                    //Creamos los div de los FS
                    var mydiv = document.createElement("div");
                    mydiv.setAttribute("id","mydiv"+i+"");
                    mydiv.setAttribute("style","background :#CCFFCC;width:70px;height:50px;padding:2px;border: solid #aaaaaa;float: left");
                    mydiv.setAttribute("title",""+pointsFS[i]+"");
                    mydiv.setAttribute("draggable","true");
                    mydiv.setAttribute("ondragstart","drag(event,'FS"+i+"')");
                    mydiv.setAttribute("ondrop","clonar(event);drop(event);modiFS("+i+")");
                    mydiv.setAttribute("ondragover","allowDrop(event,"+i+")");
                    mydiv.setAttribute("ondragend","endDrag(event)");
                    mydiv.innerHTML = "<h2 style='text-align: center'>"+pointsFS[i]+"</h2>";
                    document.getElementById('fp_name1').appendChild(mydiv);
                    //Creamos los div donde se accede
                    var otherdiv = document.createElement("div");
                    otherdiv.setAttribute("id","otherdiv"+(i+1)+"");
                    otherdiv.setAttribute("style","width:10px;height:50px;padding:2px;border: solid background;float: left");
                    otherdiv.setAttribute("ondrop","clonar(event);drop(event);addFS("+(i+1)+")");
                    otherdiv.setAttribute("ondragover","allowDrop(event,"+(i+1)+")");
                    document.getElementById('fp_name1').appendChild(otherdiv);
                }
                
            }
            
            var numCons;
            /*
             * Funcion encargada de escribir las  Constraints
             */
            function writeCons(){
                numCons=gc_constraints[1].length;
                
                //Eliminamos todos los div
                var divCons = document.getElementById("fp_name2");
                divCons.innerHTML='';
                
                // Cambia el tamaño del div que contiene las Constraints
                if(numCons>28){
                    divCons.setAttribute("style","width:490px;height:500px;padding:10px;border:1px solid #aaaaaa");
                }else if(numCons>20){
                    divCons.setAttribute("style","width:490px;height:400px;padding:10px;border:1px solid #aaaaaa");
                }else if(numCons>12){
                    divCons.setAttribute("style","width:490px;height:300px;padding:10px;border:1px solid #aaaaaa");
                }else{
                    divCons.setAttribute("style","width:490px;height:200px;padding:10px;border:1px solid #aaaaaa");
                }
                
                var line=FI.split("||");
                var colorCons=0;
                for(var i=0;i<numCons;i++){
                    
                    var contCons=0;
                    if(i>0){
                        //Creamos los div vacios
                        var divempt = document.createElement("div");
                        divempt.setAttribute("id","divempt"+i+"");
                        divempt.setAttribute("style","width:10px;height:50px;padding:2px;border: solid background;float: left");
                        document.getElementById('fp_name2').appendChild(divempt);
                    }
                    
                    //Saber que tipo de restriccion es
                    for (var m=0;m<line.length;m++){
                            if((line[m].indexOf('<fido:inequation')!=-1)){
                                 contCons++;
                                if(contCons-1==i){
                                    if(gc_constraints[1][i][0]=="pointDoA"){
                                         colorCons="#FF0000";
                                    }else if(gc_constraints[1][i][0]=="segmentDoA"){
                                         colorCons="#0000FF";
                                    }else if(gc_constraints[1][i][0]=="volumeDoA"){
                                         colorCons="#FFCC00";
                                    }
                                }
                            }else if((line[m].indexOf('<fido:path')!=-1)){
                                contCons++;
                                if(contCons-1==i){
                                    colorCons="#643370";
                                }
                            }
                    }


                    var constr=String(gc_constraints[1][i]);
                    var constrString=constr.split(",");
                    var nameConstr=constrString[3];
                    //Creamos los div vacios
                    var mydivCons = document.createElement("div");
                    mydivCons.setAttribute("id","divCo"+(i+1)+"");
                    mydivCons.setAttribute("style","background :"+colorCons+";width:70px;height:50px;padding:2px;border: solid #aaaaaa;float: left");
                    mydivCons.setAttribute("draggable","true");
                    mydivCons.setAttribute("ondragstart","drag(event,'const')");
                    mydivCons.setAttribute("ondragend","endDrag(event)");
                    mydivCons.setAttribute("title",""+nameConstr+"");
                    mydivCons.innerHTML = "<h2 style='text-align: center'>"+nameConstr+"</h2>";
                    document.getElementById('fp_name2').appendChild(mydivCons);
                    
                }
                
                //Creamos los div delas ic
                var consdiv = document.createElement("div");
                consdiv.setAttribute("id","consdiv");
                consdiv.setAttribute("style","width:10px;height:50px;padding:2px;border: solid background;float: left");
                consdiv.setAttribute("title","Const");
                consdiv.setAttribute("ondrop","clonar(event);drop(event);selectCons()");
                consdiv.setAttribute("ondragover","allowDrop(event,0)");
                document.getElementById('fp_name2').appendChild(consdiv);
            }
            
            /*
             * Función que se activa cuando se pasa por un elemento donde es posible dejar
             */
            function allowDrop(e,p) {
                e.preventDefault();
                if(buttonFields=="NP"){
                    for(var i=0;i<numFS+1;i++){
                        document.getElementById("otherdiv"+i+"").style.background = '';
                        document.getElementById("otherdiv0").style.background = '';
                    }
                    document.getElementById("otherdiv"+p+"").style.background = '#FF3333';
                }else if(buttonFields=="IC"){
                    document.getElementById("icdiv").style.background = '#FF3333';
                }else if(buttonFields=="MP"){
                    for(var i=0;i<numFS;i++){
                        document.getElementById("mydiv"+i+"").style.background = '#CCFFCC';
                    }
                    document.getElementById("mydiv"+p+"").style.background = '#FF3333';
                }else if((buttonFields=="PC")||(buttonFields=="SC")||(buttonFields=="PolC")||(buttonFields=="OC")){
                    document.getElementById("consdiv").style.background = '#FF3333';
                }else if((buttonFields=="const")){
                    
                }else{
                    for(var i=0;i<numFS+1;i++){
                        document.getElementById("otherdiv"+i+"").style.background = '';
                        document.getElementById("otherdiv0").style.background = '';
                    }
                    document.getElementById("otherdiv"+p+"").style.background = '#FF3333';
                }
            }
            
            var buttonFields;
            /*
             * Función que se activa cuando se coge el elemento arrastrable
             */
            function drag(e,b) {
                buttonFields=b;
                e.dataTransfer.setData("Text", e.target.id);
                //Si es New Point
                if(buttonFields=="NP"){
                    document.getElementById("recycle_bin").removeAttribute("ondrop"); 
                    document.getElementById("recycle_bin").removeAttribute("ondragover");
                    document.getElementById("icdiv").removeAttribute("ondrop"); 
                    document.getElementById("icdiv").removeAttribute("ondragover");
                    for(var i=0;i<numFS+1;i++){
                        document.getElementById("mydiv"+i+"").removeAttribute("ondrop"); 
                        document.getElementById("mydiv"+i+"").removeAttribute("ondragover");
                    }
                    document.getElementById('icdiv').removeAttribute("ondrop");
                    document.getElementById('icdiv').removeAttribute("ondragover");
                    //Si es Mod IC
                }else if(buttonFields=="IC"){
                    document.getElementById("recycle_bin").removeAttribute("ondrop"); 
                    document.getElementById("recycle_bin").removeAttribute("ondragover");
                    for(var i=0;i<numFS+1;i++){
                        document.getElementById("otherdiv"+i+"").removeAttribute("ondrop"); 
                        document.getElementById("otherdiv"+i+"").removeAttribute("ondragover");
                        document.getElementById("mydiv"+i+"").removeAttribute("ondrop"); 
                        document.getElementById("mydiv"+i+"").removeAttribute("ondragover");
                    }
                    //Si es Mod Point
                }else if(buttonFields=="MP"){
                    document.getElementById("recycle_bin").removeAttribute("ondrop"); 
                    document.getElementById("recycle_bin").removeAttribute("ondragover");
                    for(var i=0;i<numFS+1;i++){
                        document.getElementById("otherdiv"+i+"").removeAttribute("ondrop"); 
                        document.getElementById("otherdiv"+i+"").removeAttribute("ondragover");
                    }
                    document.getElementById('icdiv').removeAttribute("ondrop");
                    document.getElementById('icdiv').removeAttribute("ondragover");
                    //Si son los botones de las restricciones
                }else if((buttonFields=="PC")||(buttonFields=="SC")||((buttonFields=="PolC")||(buttonFields=="OC"))){
                    document.getElementById("recycle_bin").removeAttribute("ondrop"); 
                    document.getElementById("recycle_bin").removeAttribute("ondragover");
                    for(var i=0;i<numFS+1;i++){
                        document.getElementById("otherdiv"+i+"").removeAttribute("ondrop"); 
                        document.getElementById("otherdiv"+i+"").removeAttribute("ondragover");
                        document.getElementById("mydiv"+i+"").removeAttribute("ondrop"); 
                        document.getElementById("mydiv"+i+"").removeAttribute("ondragover");
                    }
                    //Si son las constraints
                }else if(buttonFields=="const"){
                    for(var i=0;i<numFS+1;i++){
                        document.getElementById("otherdiv"+i+"").removeAttribute("ondrop"); 
                        document.getElementById("otherdiv"+i+"").removeAttribute("ondragover");
                    }
                    for(var i=0;i<numFS;i++){
                        document.getElementById("mydiv"+i+"").removeAttribute("ondragover");
                        document.getElementById("mydiv"+i+"").removeAttribute("ondrop");  
                    }
                    document.getElementById('icdiv').removeAttribute("ondrop");
                    document.getElementById('icdiv').removeAttribute("ondragover");
                    //Si son los FS
                }else{
                    document.getElementById('icdiv').removeAttribute("ondrop");
                    document.getElementById('icdiv').removeAttribute("ondragover");
                    for(var i=0;i<numFS;i++){
                        document.getElementById("mydiv"+i+"").removeAttribute("ondrop"); 
                        document.getElementById("mydiv"+i+"").removeAttribute("ondragover");
                    }
                }
            }
            
            /*
             * Función que se activa cuando se suelta el elemento arrastrable
             */
            function drop(e) {
                e.preventDefault();
                var data = e.dataTransfer.getData("Text");
                e.target.appendChild(document.getElementById(data));
                var dragElement = document.getElementById(data);
                dragElement.parentNode.removeChild(dragElement); // Elimina el elemento
            }
            
            /*
             * Función que se activa cuando se termina de arrastrar el elemento arrastrable
             */
            function endDrag(e){
                for(var i=0;i<numFS+1;i++){
                    document.getElementById("otherdiv"+i+"").setAttribute("ondragover","allowDrop(event)");
                    document.getElementById("otherdiv"+i+"").setAttribute("ondrop","clonar(event);drop(event);addFS("+(i+1)+")"); 
                }
                for(var i=0;i<numFS;i++){
                    document.getElementById("mydiv"+i+"").setAttribute("ondragover","allowDrop(event)");
                    document.getElementById("mydiv"+i+"").setAttribute("ondrop","clonar(event);drop(event);modiFS("+i+")"); 
                }
                
                document.getElementById("otherdiv"+i+"").style.background = '';
                document.getElementById("consdiv").style.background = '';
                if((buttonFields=="NP")||(buttonFields=="IC")||(buttonFields=="MP")||(buttonFields=="PC")||(buttonFields=="SC")||(buttonFields=="PolC")){
                    document.getElementById("recycle_bin").setAttribute("ondragover","allowDrop(event)");
                    document.getElementById("recycle_bin").setAttribute("ondrop","drop(event);delete_element(event)"); 
                }
                    
                    writeFS();
                    writeCons();
                e.dataTransfer.clearData("Text");
            }
            
            var dataE;
            var area;
            /*
             * Función que clona el elemento arrastrable
             */
            function clonar(e){
                var data = e.dataTransfer.getData("Text");
                dataE=data;
                var dragElement = document.getElementById(data); // Elemento arrastrado
                var clonElement = dragElement.cloneNode(true); // Se clona el elemento
                //elementoClonado.id = "ElemClonado" + contMov; // Se cambia el id porque tiene que ser unico	
                clonElement.style.position = "static";	// Se posiciona de forma "normal" (Sino habria que cambiar las coordenadas de la posición)	

                if(buttonFields=="NP"){
                    clonElement.id = "opt1";
                    area=document.getElementById("NPArea");
                }else if(buttonFields=="IC"){
                    clonElement.id = "opt2";
                    area=document.getElementById("OPArea");
                }else if(buttonFields=="MP"){
                    clonElement.id = "opt3";
                    area=document.getElementById("MPArea");
                }else if(buttonFields=="PC"){
                    clonElement.id = "opt5";
                    area=document.getElementById("OPArea1");
                }else if(buttonFields=="SC"){
                    clonElement.id = "opt6";
                    area=document.getElementById("OPArea2");
                }else if(buttonFields=="PolC"){
                    clonElement.id = "opt7";
                    area=document.getElementById("OPArea3");
                }else if(buttonFields=="OC"){
                    clonElement.id = "opt8";
                    area=document.getElementById("OPArea4");
                }else{
                    return;
                }
                area.appendChild(clonElement);
            }
            
            var del=0;
            /*
             * Función que elimina el elemento arrastrable
             */
            function delete_element(e){
                var data = e.dataTransfer.getData("Text");
                var dragElement = document.getElementById(data); // Elemento arrastrado
                if(data==("opt1")){
                    clonar(e);
                    dragElement.parentNode.removeChild(dragElement); // Elimina el elemento
                    return;
                }
                //elementoArrastrado.parentNode.removeChild(elementoArrastrado); // Elimina el elemento
                var FSDeleted = parseInt(data[5]);
                if(data[3]=="C"){
                    deletePointCons(FSDeleted);
                }else{
                    delete_fs_composite_null(FSDeleted,8);
                    del=1;
                    readAgain();
                }
                
            }
            
            /*
             * Función que modifica un punto del Flight Segment
             */
            function modiFS(p){
                modifyPoint(p,8);
            }
            
            var points = new Array();
            var place_point=0;
            /*
             * Función que añade un punto al Flight Segment
             */
            function addFS(p){
                place_point=p;
                for(var i=0;i<numFS;i++){
                    if(dataE=="mydiv"+i){
                        if((i==place_point)||(i==(place_point-1))){
                            readAgain();
                            return;
                        }
                        delete_fs_composite_null(i,8);
                        if(p==0){
                            adder_front_twaypoint(flight_segments[i][8][0],flight_segments[i][8][1][2],flight_segments[i][8][2][2],1250,place_point,8);
                        }else{
                            adder_behind_twaypoint(flight_segments[i][8][0],flight_segments[i][8][1][2],flight_segments[i][8][2][2],1250,place_point-1,8);
                        }
                        readAgain();
                        return;
                    }
                }
                selectPoints();
            }
            
            /*
             * Función que añade un punto creado por el usuario al Flight Segment
             */
            function addFS_new(){
                if(place_point==0){
                    createNPFront(place_point,8);
                }else{
                    createNPBehind(place_point,8);
                }
            }
            
            /*
             * Función que añade un punto del OCM al Flight Segment
             */
            function addFS_old(id){;
                var pos=0;
                for(var i=0;i<points[0].length;i++){
                    if(id==points[0][i]){
                        pos=i;
                    }
                }
                if(place_point==0){
                    adder_front_twaypoint(points[0][pos],points[1][pos],points[2][pos],1250,place_point,8);
                }else{
                    adder_behind_twaypoint(points[0][pos],points[1][pos],points[2][pos],1250,place_point-1,8);
                }
                readAgain();
            }
            
            /*
             * Función que modifica las Condiciones Iniciales
             */
            function moddIC(){
                document.getElementById("select_points4").style.display="block";
            }
            
            /*
             * Función que habilita el select y muestra el menu de añadir un nuevo punto
             */
            function selectPoints(){
                document.getElementById("select_points").style.display="block";
                var totalIdsOCM=points[0];
                var x = document.getElementById("selectPo");
                for(var i=0;i<totalIdsOCM.length;i++){
                    var option = document.createElement("option");
                    option.text = totalIdsOCM[i];
                    x.add(option);
                }
            }
            
            /*
             * Función que muestra la opcion de nuevo punto Front
             */
            function createNPFront(p,index){
                document.getElementById("select_points2").style.display="block";
                document.getElementById("latitude_twaypoint").value=""+flight_segments[p][index][1][2]+"";
                document.getElementById("longitude_twaypoint").value=""+flight_segments[p][index][2][2]+"";
                document.getElementById("distance_twaypoint").value=""+flight_segments[p][index][3][2]+"";
            }
            
            /*
             * Función que comprueba el tamaño del nombre y si es demasiado grande lo acorta
             */
            function sizeNameNPFront(){
                if(document.main_formFSN.name_twaypoint_textarea.value.length>10){
                    alert("Name is too long");
                    document.main_formFSN.name_twaypoint_textarea.value=document.main_formFSN.name_twaypoint_textarea.value.slice(0,10);
                }
                adder_front_twaypoint(document.main_formFSN.name_twaypoint_textarea.value,document.main_formFSN.latitude_twaypoint_textarea.value,document.main_formFSN.longitude_twaypoint_textarea.value,document.main_formFSN.distance_twaypoint_textarea.value,place_point,8);
            }
            
            /*
             * Función que muestra la opcion de nuevo punto Behind
             */
            function createNPBehind(p,index){
                document.getElementById("select_points3").style.display="block";
                document.getElementById("latitude_twaypoint2").value=""+flight_segments[p][index][1][2]+"";
                document.getElementById("longitude_twaypoint2").value=""+flight_segments[p][index][2][2]+"";
                document.getElementById("distance_twaypoint2").value=""+flight_segments[p][index][3][2]+"";
            }
            
            /*
             * Función que comprueba el tamaño del nombre y si es demasiado grande lo acorta
             */
            function sizeNameNPBehind(){
                if(document.main_formFSN2.name_twaypoint_textarea.value.length>10){
                    alert("Name is too long");
                    document.main_formFSN2.name_twaypoint_textarea.value=document.main_formFSN2.name_twaypoint_textarea.value.slice(0,10);
                }
                adder_behind_twaypoint(document.main_formFSN2.name_twaypoint_textarea.value,document.main_formFSN2.latitude_twaypoint_textarea.value,document.main_formFSN2.longitude_twaypoint_textarea.value,document.main_formFSN2.distance_twaypoint_textarea.value,place_point-1,8);
            }
            
            /*
             * Función que muestra la opcion de modificar un punto
             */
            function modifyPoint(p,index){
                place_point=p;
                document.getElementById("modify_points").style.display="block";
                document.getElementById("name_fs_composite_null").value=""+flight_segments[p][index][0]+"";
                document.getElementById("latitude_fs_composite_null").value=""+flight_segments[p][index][1][2]+"";
                document.getElementById("longitude_fs_composite_null").value=""+flight_segments[p][index][2][2]+"";
                document.getElementById("distance_fs_composite_null").value=""+flight_segments[p][index][3][2]+"";
            }
            
            /*
             * Función que comprueba el tamaño del nombre y si es demasiado grande lo acorta
             */
            function sizeNameMP(){
                if(document.main_formMP.name_fs_composite_null_textarea.value.length>7){
                    alert("Name is too long");
                    document.main_formMP.name_fs_composite_null_textarea.value=document.main_formMP.name_fs_composite_null_textarea.value.slice(0,7);
                }
                checker_fs_composite_null(document.main_formMP.name_fs_composite_null_textarea.value,document.main_formMP.latitude_fs_composite_null_textarea.value,document.main_formMP.longitude_fs_composite_null_textarea.value,document.main_formMP.distance_fs_composite_null_textarea.value,place_point,8);
            }
            
            /*
             * Función que selecciona el tipo de constante a añadir
             */
            function selectCons(){
                if(buttonFields=="PC"){
                    document.getElementById("select_point_constraint").style.display="block";
                    
                    var totalIdsOCM=points[0];
                    var x = document.getElementById("selectPCP");
                    for(var i=0;i<totalIdsOCM.length;i++){
                    var option6 = document.createElement("option");
                    option6.text = totalIdsOCM[i];
                    x.add(option6);
                    }
                }else if(buttonFields=="SC"){
                    document.getElementById("select_segment_constraint").style.display="block";
                    var totalIdsOCM=points[0];
                    var y = document.getElementById("selectSCP2");
                    for(var i=0;i<totalIdsOCM.length;i++){
                        var option2 = document.createElement("option");
                        option2.text = totalIdsOCM[i];
                        y.add(option2);
                    }
                    var x = document.getElementById("selectSCP");
                    for(var i=0;i<totalIdsOCM.length;i++){
                        var option = document.createElement("option");
                        option.text = totalIdsOCM[i];
                        x.add(option);
                    }
                }else if(buttonFields=="PolC"){
                    document.getElementById("select_volume_constraint").style.display="block";
                    //document.getElementById("f0_constant_volume").value="";
                    //document.getElementById("f0_constant_volume2").value="";
                    //document.getElementById("minimum_volume_altitude").value="";
                    //document.getElementById("maximum_volume_altitude").value="";
                    var totalIdsOCM=points[0];
                    var s = document.getElementById("selectVCP");
                    for(var i=0;i<totalIdsOCM.length;i++){
                        var option5 = document.createElement("option");
                        option5.text = totalIdsOCM[i];
                        s.add(option5);
                    }
                }else if(buttonFields=="OC"){
                    document.getElementById("select_others_constraint").style.display="block";
                    var totalIdsOCM=points[0];
                    var z = document.getElementById("selectOCP2");
                    for(var i=0;i<totalIdsOCM.length;i++){
                        var option3 = document.createElement("option");
                        option3.text = totalIdsOCM[i];
                        z.add(option3);
                    }
                    var w = document.getElementById("selectOCP3");
                    for(var i=0;i<totalIdsOCM.length;i++){
                        var option4 = document.createElement("option");
                        option4.text = totalIdsOCM[i];
                        w.add(option4);
                    }
                }
            }
            
            /*
             * Función que cierra los div y los oculta
             */
            function closer(){
                document.getElementById("select_points").style.display="none";
                document.getElementById("select_points2").style.display="none";
                document.getElementById("select_points3").style.display="none";
                document.getElementById("select_points4").style.display="none";
                document.getElementById("modify_points").style.display="none";
                document.getElementById("select_point_constraint").style.display="none";
                document.getElementById("select_segment_constraint").style.display="none";
                document.getElementById("select_volume_constraint").style.display="none";
                document.getElementById("select_others_constraint").style.display="none";
                document.getElementById("browser").style.display="none";
                window.close();
            }

            var typePointCons;
            /*
             * Función que muestra las opciones para crear una constante de punto
             */
            function add_new_point_constraint(){

                    typePointCons="new";
                    var newPointCons=document.getElementById('divPointCons');
                    document.getElementById('done_point_constraint').disabled=true;
                    newPointCons.innerHTML='';

                    var newdiv = document.createElement('div');
                    var newdiv2 = document.createElement('div');
                    var newdiv3 = document.createElement('div');
                    var newdiv4 = document.createElement('div');
                    var newdiv5 = document.createElement('div');
                    var newdiv6 = document.createElement('div');
                    var newdiv7 = document.createElement('div');
                    var newdiv8 = document.createElement('div');
                    var newdiv9 = document.createElement('div');
                    var newdiv10 = document.createElement('div');

                    newdiv.innerHTML = '<br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:bold;">Point </span>';
                    newdiv2.innerHTML = '<br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Name: </span>';
                    newdiv3.innerHTML = '&nbsp;&nbsp;<input type="text" id="name_point_constraint" name="name_point_constraint_textarea" value="" />';
                    newdiv4.innerHTML = '&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Latitude [deg]: </span>';
                    newdiv5.innerHTML = '&nbsp;&nbsp;<input type="text" id="latitude_point_constraint" name="latitude_point_constraint_textarea" value="" />';
                    newdiv6.innerHTML = '&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Longitude [deg]: </span>';
                    newdiv7.innerHTML = '&nbsp;&nbsp;<input type="text" id="longitude_point_constraint" name="longitude_point_constraint_textarea" value="" /><br>';
                    newdiv8.innerHTML = '&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Distance [m]: </span>';
                    newdiv9.innerHTML = '&nbsp;&nbsp;<input type="text" id="distance_point_constraint" name="distance_point_constraint_textarea" value="" /><br>';
                    newdiv10.innerHTML = '&nbsp;&nbsp;<input type="button" id="ok_point_constraint" name="OK_point_constraint_textarea" onclick="clear_point_constraint()" value="OK" />';

                    newPointCons.appendChild(newdiv);
                    newPointCons.appendChild(newdiv2);
                    newPointCons.appendChild(newdiv3);
                    newPointCons.appendChild(newdiv4);
                    newPointCons.appendChild(newdiv5);
                    newPointCons.appendChild(newdiv6);
                    newPointCons.appendChild(newdiv7);
                    newPointCons.appendChild(newdiv8);
                    newPointCons.appendChild(newdiv9);
                    newPointCons.appendChild(newdiv10);
                
            }
            
            var namePoCons;
            var latitudePoCons;
            var longitudePoCons;
            var distancePoCons;
            /*
             * Función que limpia el div de Point Constraint
             */
            function clear_point_constraint(){
                namePoCons=document.getElementById('name_point_constraint').value;
                latitudePoCons=document.getElementById('latitude_point_constraint').value;
                longitudePoCons=document.getElementById('longitude_point_constraint').value;
                distancePoCons=document.getElementById('distance_point_constraint').value;
                document.getElementById('done_point_constraint').disabled=false;
                document.getElementById('divPointCons').innerHTML='';
            }
            
            /*
             * Función que verifica la constante de punto
             */
            function checker_point_constraint(idP){
                if(typePointCons=="new"){
                    typePointCons=0;
                        adder_point_constraint(document.main_formFSC.selectMP.options[document.main_formFSC.selectMP.selectedIndex].value,document.main_formFSC.f0_constant_textarea.value,document.main_formFSC.f0_constant2_textarea.value,document.main_formFSC.minimum_altitude_textarea.value,document.main_formFSC.maximum_altitude_textarea.value,namePoCons,latitudePoCons,longitudePoCons,distancePoCons);
                    }else{
                        var pos=0;
                            for(var i=0;i<points[0].length;i++){
                            if(idP==points[0][i]){
                                pos=i;
                            }
                        }
                        adder_point_constraint(document.main_formFSC.selectMP.options[document.main_formFSC.selectMP.selectedIndex].value,document.main_formFSC.f0_constant_textarea.value,document.main_formFSC.f0_constant2_textarea.value,document.main_formFSC.minimum_altitude_textarea.value,document.main_formFSC.maximum_altitude_textarea.value,points[0][pos],points[1][pos],points[2][pos],1250);
                    }
            }
            
            /*
             * Función que añade una constante de punto
             */
            function adder_point_constraint(typeSelect,f0c1,f0c2,min_alt,max_alt,name,latitude,longitude,distance){
                oldVersionFS();
                if(isNaN(f0c1)){
                        alert("F0 Constant must be a number.");
                        return;
                }else if(isNaN(f0c2)){
                        alert("F0 Constant2 must be a number.");
                        return;
                }else if(isNaN(min_alt)){
                        alert("Minimum altitude must be a number.");
                        return;
                }else if(isNaN(min_alt)){
                        alert("Maximum altitude must be a number.");
                        return;
                }else if(isNaN(longitude)){
                        alert("Longitude must be a number.");
                        return;
                }else if(isNaN(latitude)){
                        alert("Longitude must be a number.");
                        return;
                }else if(isNaN(distance)){
                        alert("Distance must be a number.");
                        return;
                }else if(name==""){
                        alert("Name cannot be empty.");
                        return;
                }else if((latitude>180)||(latitude<-180)){
                        alert("Latitude must be between -180 [deg] and 180 [deg].");
                        return;
                }else if((longitude>360)||(longitude<-360)){
                        alert("Longitude must be between -360 [deg] and 360 [deg].");
                        return;
                }else{
                
                            var line=FI.split("||");
                            var m=0;
                            
                            for (var j=0;j<line.length;j++){
                                    if(line[j].indexOf("</fido:constraints>")==-1){
                                        m=j-2;
                                    }
                                }
                                var unitType="";
                                switch (typeSelect) {
                                    case "altitude":
                                        unitType="[ft]";
                                        break;
                                    case "bearing":
                                        unitType = "[deg]";
                                        break;
                                    case "coefficient":
                                        unitType = "[adim]";
                                        break;
                                    case "colatitude":
                                        unitType = "[deg]";
                                        break;
                                    case "density":
                                        unitType = "[kgm3]";
                                        break;
                                    case "distance":
                                        unitType = "[km]";
                                        break;
                                    case "latitude":
                                        unitType = "[deg]";
                                        break;
                                    case "pitch":
                                        unitType = "[deg]";
                                        break;
                                    case "longitude":
                                        unitType = "[deg]";
                                        break;
                                    case "mass":
                                        unitType = "[kg]";
                                        break;
                                    case "parameter":
                                        unitType = "[adim]";
                                        break;
                                    case "pressure":
                                        unitType = "[bar]";
                                        break;
                                    case "speed":
                                        unitType = "[kt]";
                                        break;
                                    case "temperature":
                                        unitType = "[degK]";
                                        break;
                                    case "time":
                                        unitType = "[min]";
                                        break;
                                }
                                
                                            var id=numCons+1;
                                            line.splice(m,0,'   <fido:constraint id="'+id+'" init_fs="0" final_fs="'+numFS+'" priority="0">');
                                            m++;
                                            line.splice(m,0,'       <fido:inequation magnitude= "'+typeSelect+'" type="g1 .lt. f .lt. g2">');
                                            m++;
                                            line.splice(m,0,'           <fido:function_g1>');
                                            m++;
                                            line.splice(m,0,'               <gc:function type="f_constant" output_unit="'+unitType+'" f0="'+f0c1+'"/>');
                                            m++;
                                            line.splice(m,0,'           </fido:function_g1>');
                                            m++;
                                            line.splice(m,0,'           <fido:function_f>');
                                            m++;
                                            line.splice(m,0,'               <gc:function type="f_lineal" output_unit="'+unitType+'" input_var="Hp" input_unit="'+unitType+'" f0="0" f1="1"/>');
                                            m++;
                                            line.splice(m,0,'           </fido:function_f>');
                                            m++;
                                            line.splice(m,0,'           <fido:function_g2>');
                                            m++;
                                            line.splice(m,0,'               <gc:function type="f_constant" output_unit="'+unitType+'" f0="'+f0c2+'"/>');
                                            m++;
                                            line.splice(m,0,'           </fido:function_g2>');
                                            m++;
                                            line.splice(m,0,'       </fido:inequation>');
                                            m++;
                                            line.splice(m,0,'       <spi:pointDoA  logic="forall" >');
                                            m++;
                                            line.splice(m,0,'           <spi:altitude_limits variable="Hp" units="[ft]"  min_value="'+min_alt+'" max_value="'+max_alt+'"/>');
                                            m++;
                                            line.splice(m,0,'               <spi:point name="'+name+'">');
                                            m++;
                                            line.splice(m,0,'                   <gc:latitude units="[deg]" value="'+latitude+'"/'+">");
                                            m++;
                                            line.splice(m,0,'                   <gc:longitude units="[deg]" value="'+longitude+'"/'+">");
                                            m++;
                                            if (distance!=0){
                                                    line.splice(m,0,'                   <gc:distance units="[m]" value="'+distance+'"/'+">");
                                                    m++;
                                            }
                                            line.splice(m,0,'           </spi:point>');
                                            m++;
                                            line.splice(m,0,'       </spi:pointDoA>');
                                            m++;
                                            line.splice(m,0,'   </fido:constraint>');
                                            m++;
                            
                            FI=line.join("||");
                            xajax_modify_fi(FI);
                            setTimeout("xajax_show_repository('fi',document.main_form.repo_fi_select.options[document.main_form.repo_fi_select.selectedIndex].value)",800);
                            readAgain();
                }
            }
            
            var typeSegment;
            var name1="";
            var name2="";
            var latitude1=0;
            var latitude2=0;
            var longitude1=0;
            var longitude2=0;
            var distance1=0;
            var distance2=0;
            /*
             * Función que muestra las opciones para crear una constante de segmento
             */
            function checker_segment_constraint(p,idP1,idP2){
                
                if(p==1){
                    typePoint="new";
                    var newPointCons=document.getElementById('firstPointSegment');
                    newPointCons.innerHTML='';

                    var newdiv = document.createElement('div');
                    var newdiv2 = document.createElement('div');
                    var newdiv3 = document.createElement('div');
                    var newdiv4 = document.createElement('div');
                    var newdiv5 = document.createElement('div');
                    var newdiv6 = document.createElement('div');
                    var newdiv7 = document.createElement('div');
                    var newdiv8 = document.createElement('div');
                    var newdiv9 = document.createElement('div');
                    
                    newdiv.innerHTML = '<br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Name: </span>';
                    newdiv2.innerHTML = '&nbsp;&nbsp;<input type="text" id="name_segment_constraint" name="name_segment_constraint_textarea" value="'+name1+'" />';
                    newdiv3.innerHTML = '&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Latitude [deg]: </span>';
                    newdiv4.innerHTML = '&nbsp;&nbsp;<input type="text" id="latitude_segment_constraint" name="latitude_segment_constraint_textarea" value="'+latitude1+'" />';
                    newdiv5.innerHTML = '&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Longitude [deg]: </span>';
                    newdiv6.innerHTML = '&nbsp;&nbsp;<input type="text" id="longitude_segment_constraint" name="longitude_segment_constraint_textarea" value="'+longitude1+'" /><br>';
                    newdiv7.innerHTML = '&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Distance [m]: </span>';
                    newdiv8.innerHTML = '&nbsp;&nbsp;<input type="text" id="distance_segment_constraint" name="distance_segment_constraint_textarea" value="'+distance1+'" />';
                    newdiv9.innerHTML = '<br>&nbsp;&nbsp;<input type="button" id="clear_segment_constraint" name="clear_segment_constraint_textarea" value="OK" onclick="clear_segment(1)" />';
                            
                    newPointCons.appendChild(newdiv);
                    newPointCons.appendChild(newdiv2);
                    newPointCons.appendChild(newdiv3);
                    newPointCons.appendChild(newdiv4);
                    newPointCons.appendChild(newdiv5);
                    newPointCons.appendChild(newdiv6);
                    newPointCons.appendChild(newdiv7);
                    newPointCons.appendChild(newdiv8);
                    newPointCons.appendChild(newdiv9);
                    
                }else if(p==2){
                    typePoint="new2";
                    document.getElementById('mainFSC2').style.height="685px";
                    var newPointCons2=document.getElementById('secondPointSegment');
                    newPointCons2.innerHTML='';
                    
                    var newdiv12 = document.createElement('div');
                    var newdiv22 = document.createElement('div');
                    var newdiv32 = document.createElement('div');
                    var newdiv42 = document.createElement('div');
                    var newdiv52 = document.createElement('div');
                    var newdiv62 = document.createElement('div');
                    var newdiv72 = document.createElement('div');
                    var newdiv82 = document.createElement('div');
                    var newdiv92 = document.createElement('div');
                    
                    newdiv12.innerHTML = '<br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Name 2: </span>';
                    newdiv22.innerHTML = '&nbsp;&nbsp;<input type="text" id="name_segment_constraint2" name="name_segment_constraint_textarea2" value="'+name2+'" />';
                    newdiv32.innerHTML = '&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Latitude 2 [deg]: </span>';
                    newdiv42.innerHTML = '&nbsp;&nbsp;<input type="text" id="latitude_segment_constraint2" name="latitude_segment_constraint_textarea2" value="'+latitude2+'" />';
                    newdiv52.innerHTML = '&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Longitude 2 [deg]: </span>';
                    newdiv62.innerHTML = '&nbsp;&nbsp;<input type="text" id="longitude_segment_constraint2" name="longitude_segment_constraint_textarea2" value="'+longitude2+'" /><br>';
                    newdiv72.innerHTML = '&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Distance 2 [m]: </span>';
                    newdiv82.innerHTML = '&nbsp;&nbsp;<input type="text" id="distance_segment_constraint2" name="distance_segment_constraint_textarea2" value="'+distance2+'" />';
                    newdiv92.innerHTML = '<br>&nbsp;&nbsp;<input type="button" id="clear_segment_constraint2" name="clear_segment_constraint_textarea2" value="OK2" onclick="clear_segment(2)" />';
                            
                    newPointCons2.appendChild(newdiv12);
                    newPointCons2.appendChild(newdiv22);
                    newPointCons2.appendChild(newdiv32);
                    newPointCons2.appendChild(newdiv42);
                    newPointCons2.appendChild(newdiv52);
                    newPointCons2.appendChild(newdiv62);
                    newPointCons2.appendChild(newdiv72);
                    newPointCons2.appendChild(newdiv82);
                    newPointCons2.appendChild(newdiv92);
                }else if(p==3){
                    if(name1==""){
                        if(((document.getElementById('name_segment_constraint')==null)||(document.getElementById('name_segment_constraint').value==""))&&((document.main_formFSC2.selectSCP.options[document.main_formFSC2.selectSCP.selectedIndex].value==0))){
                            alert("You have to select one first point.");
                        }else if(document.main_formFSC2.selectSCP.options[document.main_formFSC2.selectSCP.selectedIndex].value==0){
                            name1=document.getElementById('name_segment_constraint').value;
                            latitude1=document.getElementById('latitude_segment_constraint').value;
                            longitude1=document.getElementById('longitude_segment_constraint').value;
                            distance1=document.getElementById('distance_segment_constraint').value;
                        }else if(((document.getElementById('name_segment_constraint')==null)||(document.getElementById('name_segment_constraint').value==""))&&((document.main_formFSC2.selectSCP.options[document.main_formFSC2.selectSCP.selectedIndex].value!=0))){
                            var pos=0;
                                for(var i=0;i<points[0].length;i++){
                                    if(idP1==points[0][i]){
                                        pos=i;
                                }
                            }
                            name1=points[0][pos];
                            latitude1=points[1][pos];
                            longitude1=points[2][pos];
                            distance1=1250;
                        }else if(((document.getElementById('name_segment_constraint').value!=""))&&(document.main_formFSC2.selectSCP.options[document.main_formFSC2.selectSCP.selectedIndex].value!=0)){
                            alert("You have to select only one first point.");
                        }
                    }
                    
                    if(name2==""){
                        if(((document.getElementById('name_segment_constraint2')==null)||(document.getElementById('name_segment_constraint2').value==""))&&((document.main_formFSC2.selectSCP2.options[document.main_formFSC2.selectSCP2.selectedIndex].value==0))){
                            alert("You have to select one second point.");
                        }else if(document.main_formFSC2.selectSCP2.options[document.main_formFSC2.selectSCP2.selectedIndex].value==0){
                            name2=document.getElementById('name_segment_constraint2').value;
                            latitude2=document.getElementById('latitude_segment_constraint2').value;
                            longitude2=document.getElementById('longitude_segment_constraint2').value;
                            distance2=document.getElementById('distance_segment_constraint2').value;
                        }else if(((document.getElementById('name_segment_constraint2')==null)||(document.getElementById('name_segment_constraint2').value==""))&&((document.main_formFSC2.selectSCP2.options[document.main_formFSC2.selectSCP2.selectedIndex].value!=0))){
                            var pos=0;
                                for(var i=0;i<points[0].length;i++){
                                    if(idP2==points[0][i]){
                                        pos=i;
                                }
                            }
                            name2=points[0][pos];
                            latitude2=points[1][pos];
                            longitude2=points[2][pos];
                            distance2=1250;
                        }else if(((document.getElementById('name_segment_constraint2').value!=""))&&(document.main_formFSC2.selectSCP2.options[document.main_formFSC2.selectSCP2.selectedIndex].value!=0)){
                            alert("You have to select only one second point.");
                        }
                    }
                }
                if((name1!="")&&(name2!="")){
                    adder_segment_constraint(document.main_formFSC2.selectSC.options[document.main_formFSC2.selectSC.selectedIndex].value,document.main_formFSC2.f0_constant_textarea2.value,document.main_formFSC2.f0_constant2_textarea2.value,document.main_formFSC2.minimum_altitude_textarea2.value,document.main_formFSC2.maximum_altitude_textarea2.value,name1,latitude1,longitude1,distance1,name2,latitude2,longitude2,distance2);
                }
            }
            
            /*
             * Función que limpia los div de una constante de segmento
             */
            function clear_segment(p){
            document.getElementById('mainFSC2').style.height="";
                if(p==1){
                    name1=document.getElementById('name_segment_constraint').value;
                    latitude1=document.getElementById('latitude_segment_constraint').value;
                    longitude1=document.getElementById('longitude_segment_constraint').value;
                    distance1=document.getElementById('distance_segment_constraint').value;
                    document.getElementById('firstPointSegment').innerHTML='';
                }else if(p==2){
                    name2=document.getElementById('name_segment_constraint2').value;
                    latitude2=document.getElementById('latitude_segment_constraint2').value;
                    longitude2=document.getElementById('longitude_segment_constraint2').value;
                    distance2=document.getElementById('distance_segment_constraint2').value;
                    document.getElementById('secondPointSegment').innerHTML='';
                }
            }
            
            /*
             * Función que añade una constante de segmento
             */
            function adder_segment_constraint(typeSelect,f0c1,f0c2,min_alt,max_alt,name,latitude,longitude,distance,name2,latitude2,longitude2,distance2){
                oldVersionFS();
                if(typeSelect==""){
                        alert("Type cannot be empty.");
                        return;
                }else if(isNaN(f0c1)){
                        alert("F0 Constant must be a number.");
                        return;
                }else if(isNaN(f0c2)){
                        alert("F0 Constant2 must be a number.");
                        return;
                }else if(isNaN(min_alt)){
                        alert("Minimum altitude must be a number.");
                        return;
                }else if(isNaN(min_alt)){
                        alert("Maximum altitude must be a number.");
                        return;
                }else if(isNaN(longitude)){
                        alert("Longitude must be a number.");
                        return;
                }else if(isNaN(latitude)){
                        alert("Longitude must be a number.");
                        return;
                }else if(isNaN(distance)){
                        alert("Distance must be a number.");
                        return;
                }else if(name==""){
                        alert("Name cannot be empty.");
                        return;
                }else if((latitude>180)||(latitude<-180)){
                        alert("Latitude must be between -180 [deg] and 180 [deg].");
                        return;
                }else if((longitude>360)||(longitude<-360)){
                        alert("Longitude must be between -360 [deg] and 360 [deg].");
                        return;
                }else{
                            var line=FI.split("||");
                            var m=0;
                            
                            for (var j=0;j<line.length;j++){
                                    if(line[j].indexOf("</fido:constraints>")==-1){
                                        m=j-2;
                                    }
                                }
                                
                                var unitType="";
                                switch (typeSelect) {
                                    case "altitude":
                                        unitType="[ft]";
                                        break;
                                    case "bearing":
                                        unitType = "[deg]";
                                        break;
                                    case "coefficient":
                                        unitType = "[adim]";
                                        break;
                                    case "colatitude":
                                        unitType = "[deg]";
                                        break;
                                    case "density":
                                        unitType = "[kgm3]";
                                        break;
                                    case "distance":
                                        unitType = "[km]";
                                        break;
                                    case "latitude":
                                        unitType = "[deg]";
                                        break;
                                    case "pitch":
                                        unitType = "[deg]";
                                        break;
                                    case "longitude":
                                        unitType = "[deg]";
                                        break;
                                    case "mass":
                                        unitType = "[kg]";
                                        break;
                                    case "parameter":
                                        unitType = "[adim]";
                                        break;
                                    case "pressure":
                                        unitType = "[bar]";
                                        break;
                                    case "speed":
                                        unitType = "[kt]";
                                        break;
                                    case "temperature":
                                        unitType = "[degK]";
                                        break;
                                    case "time":
                                        unitType = "[min]";
                                        break;
                                }
                                
                                
                                            var id=numCons+1;
                                            line.splice(m,0,'   <fido:constraint id="'+id+'" init_fs="0" final_fs="'+numFS+'" priority="0">');
                                            m++;
                                            line.splice(m,0,'       <fido:inequation magnitude= "'+typeSelect+'" type="g1 .lt. f .lt. g2">');
                                            m++;
                                            line.splice(m,0,'           <fido:function_g1>');
                                            m++;
                                            line.splice(m,0,'               <gc:function type="f_constant" output_unit="'+unitType+'" f0="'+f0c1+'"/>');
                                            m++;
                                            line.splice(m,0,'           </fido:function_g1>');
                                            m++;
                                            line.splice(m,0,'           <fido:function_f>');
                                            m++;
                                            line.splice(m,0,'               <gc:function type="f_lineal" output_unit="'+unitType+'" input_var="Hp" input_unit="'+unitType+'" f0="0" f1="1"/>');
                                            m++;
                                            line.splice(m,0,'           </fido:function_f>');
                                            m++;
                                            line.splice(m,0,'           <fido:function_g2>');
                                            m++;
                                            line.splice(m,0,'               <gc:function type="f_constant" output_unit="'+unitType+'" f0="'+f0c2+'"/>');
                                            m++;
                                            line.splice(m,0,'           </fido:function_g2>');
                                            m++;
                                            line.splice(m,0,'       </fido:inequation>');
                                            m++;
                                            line.splice(m,0,'       <spi:segmentDoA  logic="forall" >');
                                            m++;
                                            line.splice(m,0,'           <spi:altitude_limits variable="Hp" units="[ft]"  min_value="'+min_alt+'" max_value="'+max_alt+'"/>');
                                            m++;
                                            line.splice(m,0,'               <spi:point name="'+name+'">');
                                            m++;
                                            line.splice(m,0,'                   <gc:latitude units="[deg]" value="'+latitude+'"/'+">");
                                            m++;
                                            line.splice(m,0,'                   <gc:longitude units="[deg]" value="'+longitude+'"/'+">");
                                            m++;
                                            if (distance!=0){
                                                    line.splice(m,0,'                   <gc:distance units="[m]" value="'+distance+'"/'+">");
                                                    m++;
                                            }
                                            line.splice(m,0,'           </spi:point>');
                                            m++;
                                            line.splice(m,0,'               <spi:point name="'+name2+'">');
                                            m++;
                                            line.splice(m,0,'                   <gc:latitude units="[deg]" value="'+latitude2+'"/'+">");
                                            m++;
                                            line.splice(m,0,'                   <gc:longitude units="[deg]" value="'+longitude2+'"/'+">");
                                            m++;
                                            if (distance2!=0){
                                                    line.splice(m,0,'                   <gc:distance units="[m]" value="'+distance2+'"/'+">");
                                                    m++;
                                            }
                                            line.splice(m,0,'           </spi:point>');
                                            m++;
                                            line.splice(m,0,'       </spi:segmentDoA>');
                                            m++;
                                            line.splice(m,0,'   </fido:constraint>');
                                            m++;
                            FI=line.join("||");
                            xajax_modify_fi(FI);
                            setTimeout("xajax_show_repository('fi',document.main_form.repo_fi_select.options[document.main_form.repo_fi_select.selectedIndex].value)",800);
                            readAgain();
                    }
            }
            
            var nameVol = new Array();
            var latitudeVol = new Array();
            var longitudeVol = new Array();
            var distanceVol = new Array();
            var numberPointsVol=0;
            /*
             * Función que muestra las opciones para crear una constante de volumen
             */
            function select_number_points(){
                numberPointsVol++;
                document.getElementById("number_points_constraints").disabled=true;
                var idPoints=document.getElementById("points_id_vol");
                
                var newdiv = document.createElement('div');
                var newdiv2 = document.createElement('div');
                var newdiv3 = document.createElement('div');
                var newdiv4 = document.createElement('div');
                var newdiv5 = document.createElement('div');
                var newdiv6 = document.createElement('div');
                var newdiv7 = document.createElement('div');
                var newdiv8 = document.createElement('div');
                var newdiv9 = document.createElement('div');
                var newdiv10 = document.createElement('div');

                newdiv.innerHTML = '<br>&nbsp;&nbsp;<span style=font-family:verdana;font-size:0.8em;font-weight:bold;">New Point </span>';
                newdiv2.innerHTML = '&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Name: </span>';
                newdiv3.innerHTML = '&nbsp;&nbsp;<input type="text" id="name_volume_constraint" name="name_volume_constraint_textarea" value="" />';
                newdiv4.innerHTML = '&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Latitude [deg]: </span>';
                newdiv5.innerHTML = '&nbsp;&nbsp;<input type="text" id="latitude_volume_constraint" name="latitude_volume_constraint_textarea" value="" />';
                newdiv6.innerHTML = '&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Longitude [deg]: </span>';
                newdiv7.innerHTML = '&nbsp;&nbsp;<input type="text" id="longitude_volume_constraint" name="longitude_volume_constraint_textarea" value="" /><br>';
                newdiv8.innerHTML = '&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Distance [m]: </span>';
                newdiv9.innerHTML = '&nbsp;&nbsp;<input type="text" id="distance_volume_constraint" name="distance_volume_constraint_textarea" value="" />';
                newdiv10.innerHTML = '<br>&nbsp;&nbsp;<input type="button" id="ok_volume_constraints" name="ok_volume_constraints_button" value="OK" onclick="clear_volume_constraint(-1)" />';

                idPoints.appendChild(newdiv);
                idPoints.appendChild(newdiv2);
                idPoints.appendChild(newdiv3);
                idPoints.appendChild(newdiv4);
                idPoints.appendChild(newdiv5);
                idPoints.appendChild(newdiv6);
                idPoints.appendChild(newdiv7);
                idPoints.appendChild(newdiv8);
                idPoints.appendChild(newdiv9);
                idPoints.appendChild(newdiv10);
                
            }
            
            /*
             * Función que limpia los div de una constante de volumen
             */
            function clear_volume_constraint(id){
                document.getElementById("number_points_constraints").disabled=false;
                if(id==-1){
                    nameVol[numberPointsVol-1]=document.getElementById('name_volume_constraint').value;
                    latitudeVol[numberPointsVol-1]=document.getElementById('latitude_volume_constraint').value;
                    longitudeVol[numberPointsVol-1]=document.getElementById('longitude_volume_constraint').value;
                    distanceVol[numberPointsVol-1]=document.getElementById('distance_volume_constraint').value;
                    document.getElementById('number_points').value="Number of Selected Points is "+numberPointsVol;
                }else{
                    document.getElementById("selectVCP").value=0;
                    numberPointsVol++;
                    var pos=0;
                    for(var i=0;i<points[0].length;i++){
                        if(id==points[0][i]){
                            pos=i;
                        }
                    }
                    
                    nameVol[numberPointsVol-1]=points[0][pos];
                    latitudeVol[numberPointsVol-1]=points[1][pos];
                    longitudeVol[numberPointsVol-1]=points[2][pos];
                    distanceVol[numberPointsVol-1]=1250;
                    document.getElementById('number_points').value="Number of Selected Points is "+numberPointsVol
                }
                var idPoints=document.getElementById("points_id_vol");
                    idPoints.innerHTML='';
            }
            
            /*
             * Función que añade una constante de volumen
             */
            function adder_volume_constraint(typeSelect,f0c1,f0c2,min_alt,max_alt,nPoints,name,latitude,longitude,distance){
                oldVersionFS();
                if(typeSelect==""){
                        alert("Type cannot be empty.");
                        return;
                }else if(isNaN(f0c1)){
                        alert("F0 Constant must be a number.");
                        return;
                }else if(isNaN(f0c2)){
                        alert("F0 Constant2 must be a number.");
                        return;
                }else if(isNaN(min_alt)){
                        alert("Minimum altitude must be a number.");
                        return;
                }else if(isNaN(min_alt)){
                        alert("Maximum altitude must be a number.");
                        return;
                }else{
                            var line=FI.split("||");
                            var m=0;
                            var numPoints=nPoints;
                            
                            for(var i=0;i<nPoints;i++){
                                if(name[i]==""){
                                    alert("Name cannot be empty.");
                                    return;
                                }else if(isNaN(latitude[i])){
                                    alert("Latitude must be a number.");
                                    return;
                                }else if(isNaN(longitude[i])){
                                    alert("Longitude must be a number.");
                                    return;
                                }else if(isNaN(distance[i])){
                                    alert("Distance must be a number.");
                                    return;
                                }
                            }
                            
                            for (var j=0;j<line.length;j++){
                                    if(line[j].indexOf("</fido:constraints>")==-1){
                                        m=j-2;
                                    }
                                }
                                
                                var unitType="";
                                switch (typeSelect) {
                                    case "altitude":
                                        unitType="[ft]";
                                        break;
                                    case "bearing":
                                        unitType = "[deg]";
                                        break;
                                    case "coefficient":
                                        unitType = "[adim]";
                                        break;
                                    case "colatitude":
                                        unitType = "[deg]";
                                        break;
                                    case "density":
                                        unitType = "[kgm3]";
                                        break;
                                    case "distance":
                                        unitType = "[km]";
                                        break;
                                    case "latitude":
                                        unitType = "[deg]";
                                        break;
                                    case "pitch":
                                        unitType = "[deg]";
                                        break;
                                    case "longitude":
                                        unitType = "[deg]";
                                        break;
                                    case "mass":
                                        unitType = "[kg]";
                                        break;
                                    case "parameter":
                                        unitType = "[adim]";
                                        break;
                                    case "pressure":
                                        unitType = "[bar]";
                                        break;
                                    case "speed":
                                        unitType = "[kt]";
                                        break;
                                    case "temperature":
                                        unitType = "[degK]";
                                        break;
                                    case "time":
                                        unitType = "[min]";
                                        break;
                                }
                                
                                
                                            var id=numCons+1;
                                            line.splice(m,0,'   <fido:constraint id="'+id+'" init_fs="0" final_fs="'+numFS+'" priority="0">');
                                            m++;
                                            line.splice(m,0,'       <fido:inequation magnitude= "'+typeSelect+'" type="g1 .lt. f .lt. g2">');
                                            m++;
                                            line.splice(m,0,'           <fido:function_g1>');
                                            m++;
                                            line.splice(m,0,'               <gc:function type="f_constant" output_unit="'+unitType+'" f0="'+f0c1+'"/>');
                                            m++;
                                            line.splice(m,0,'           </fido:function_g1>');
                                            m++;
                                            line.splice(m,0,'           <fido:function_f>');
                                            m++;
                                            line.splice(m,0,'               <gc:function type="f_lineal" output_unit="'+unitType+'" input_var="Hp" input_unit="'+unitType+'" f0="0" f1="1"/>');
                                            m++;
                                            line.splice(m,0,'           </fido:function_f>');
                                            m++;
                                            line.splice(m,0,'           <fido:function_g2>');
                                            m++;
                                            line.splice(m,0,'               <gc:function type="f_constant" output_unit="'+unitType+'" f0="'+f0c2+'"/>');
                                            m++;
                                            line.splice(m,0,'           </fido:function_g2>');
                                            m++;
                                            line.splice(m,0,'       </fido:inequation>');
                                            m++;
                                            line.splice(m,0,'       <spi:volumeDoA  logic="forall" >');
                                            m++;
                                            line.splice(m,0,'           <spi:altitude_limits variable="Hp" units="[ft]"  min_value="'+min_alt+'" max_value="'+max_alt+'"/>');
                                            m++;
                                            for(var j=0;j<numPoints;j++){
                                                line.splice(m,0,'               <spi:point name="'+name[j]+'">');
                                                m++;
                                                line.splice(m,0,'                   <gc:latitude units="[deg]" value="'+latitude[j]+'"/'+">");
                                                m++;
                                                line.splice(m,0,'                   <gc:longitude units="[deg]" value="'+longitude[j]+'"/'+">");
                                                m++;
                                                if (distance[j]!=0){
                                                        line.splice(m,0,'                   <gc:distance units="[m]" value="'+distance[j]+'"/'+">");
                                                        m++;
                                                }
                                                line.splice(m,0,'           </spi:point>');
                                                m++;
                                            }
                                            line.splice(m,0,'       </spi:volumeDoA>');
                                            m++;
                                            line.splice(m,0,'   </fido:constraint>');
                                            m++;
                            FI=line.join("||");
                            xajax_modify_fi(FI);
                            setTimeout("xajax_show_repository('fi',document.main_form.repo_fi_select.options[document.main_form.repo_fi_select.selectedIndex].value)",800);
                            document.getElementById('number_points').value="Number of Selected Points is 0";
                            nameVol.length=0;
                            latitudeVol.length=0;
                            longitudeVol.length=0;
                            distanceVol.length=0;
                            numberPointsVol=0;
                            readAgain();
                    }
            }
            
            var typeSegmentOthers;
            var nameO1="";
            var nameO2="";
            var latitudeO1=0;
            var latitudeO2=0;
            var longitudeO1=0;
            var longitudeO2=0;
            var distanceO1=0;
            var distanceO2=0;
            /*
             * Función que muestra las opciones para crear una constante especial(STARs,legs, etc)
             */
            function checker_others_constraint(p,idP1,idP2){
                
                if(p==1){
                    typePoint="new";
                    var newPointCons=document.getElementById('firstPointOthers');
                    newPointCons.innerHTML='';

                    var newdiv = document.createElement('div');
                    var newdiv2 = document.createElement('div');
                    var newdiv3 = document.createElement('div');
                    var newdiv4 = document.createElement('div');
                    var newdiv5 = document.createElement('div');
                    var newdiv6 = document.createElement('div');
                    var newdiv7 = document.createElement('div');
                    var newdiv8 = document.createElement('div');
                    var newdiv9 = document.createElement('div');
                    
                    newdiv.innerHTML = '<br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Name: </span>';
                    newdiv2.innerHTML = '&nbsp;&nbsp;<input type="text" id="name_others_constraint" name="name_others_constraint_textarea" value="'+nameO1+'" />';
                    newdiv3.innerHTML = '&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Latitude [deg]: </span>';
                    newdiv4.innerHTML = '&nbsp;&nbsp;<input type="text" id="latitude_others_constraint" name="latitude_others_constraint_textarea" value="'+latitudeO1+'" />';
                    newdiv5.innerHTML = '&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Longitude [deg]: </span>';
                    newdiv6.innerHTML = '&nbsp;&nbsp;<input type="text" id="longitude_others_constraint" name="longitude_others_constraint_textarea" value="'+longitudeO1+'" /><br>';
                    newdiv7.innerHTML = '&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Distance [m]: </span>';
                    newdiv8.innerHTML = '&nbsp;&nbsp;<input type="text" id="distance_others_constraint" name="distance_others_constraint_textarea" value="'+distanceO1+'" />';
                    newdiv9.innerHTML = '<br>&nbsp;&nbsp;<input type="button" id="clear_others_constraint" name="clear_others_constraint_textarea" value="OK" onclick="clear_others(1)" />';
                            
                    newPointCons.appendChild(newdiv);
                    newPointCons.appendChild(newdiv2);
                    newPointCons.appendChild(newdiv3);
                    newPointCons.appendChild(newdiv4);
                    newPointCons.appendChild(newdiv5);
                    newPointCons.appendChild(newdiv6);
                    newPointCons.appendChild(newdiv7);
                    newPointCons.appendChild(newdiv8);
                    newPointCons.appendChild(newdiv9);
                    
                }else if(p==2){
                    typePoint="new2";
                    document.getElementById('mainFSC4').style.height="775px";
                    var newPointCons2=document.getElementById('secondPointOthers');
                    newPointCons2.innerHTML='';
                    
                    var newdiv12 = document.createElement('div');
                    var newdiv22 = document.createElement('div');
                    var newdiv32 = document.createElement('div');
                    var newdiv42 = document.createElement('div');
                    var newdiv52 = document.createElement('div');
                    var newdiv62 = document.createElement('div');
                    var newdiv72 = document.createElement('div');
                    var newdiv82 = document.createElement('div');
                    var newdiv92 = document.createElement('div');
                    
                    newdiv12.innerHTML = '<br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Name 2: </span>';
                    newdiv22.innerHTML = '&nbsp;&nbsp;<input type="text" id="name_others_constraint2" name="name_others_constraint_textarea2" value="'+nameO2+'" />';
                    newdiv32.innerHTML = '&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Latitude 2 [deg]: </span>';
                    newdiv42.innerHTML = '&nbsp;&nbsp;<input type="text" id="latitude_others_constraint2" name="latitude_others_constraint_textarea2" value="'+latitudeO2+'" />';
                    newdiv52.innerHTML = '&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Longitude 2 [deg]: </span>';
                    newdiv62.innerHTML = '&nbsp;&nbsp;<input type="text" id="longitude_others_constraint2" name="longitude_others_constraint_textarea2" value="'+longitudeO2+'" /><br>';
                    newdiv72.innerHTML = '&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Distance 2 [m]: </span>';
                    newdiv82.innerHTML = '&nbsp;&nbsp;<input type="text" id="distance_others_constraint2" name="distance_others_constraint_textarea2" value="'+distanceO2+'" />';
                    newdiv92.innerHTML = '<br>&nbsp;&nbsp;<input type="button" id="clear_others_constraint2" name="clear_others_constraint_textarea2" value="OK2" onclick="clear_others(2)" />';
                            
                    newPointCons2.appendChild(newdiv12);
                    newPointCons2.appendChild(newdiv22);
                    newPointCons2.appendChild(newdiv32);
                    newPointCons2.appendChild(newdiv42);
                    newPointCons2.appendChild(newdiv52);
                    newPointCons2.appendChild(newdiv62);
                    newPointCons2.appendChild(newdiv72);
                    newPointCons2.appendChild(newdiv82);
                    newPointCons2.appendChild(newdiv92);
                }else if(p==3){
                    if(nameO1==""){
                        if(((document.getElementById('name_others_constraint')==null)||(document.getElementById('name_others_constraint').value==""))&&((document.main_formFSC4.selectOCP2.options[document.main_formFSC4.selectOCP2.selectedIndex].value==0))){
                            alert("You have to select one first point.");
                        }else if(document.main_formFSC4.selectOCP2.options[document.main_formFSC4.selectOCP2.selectedIndex].value==0){
                            nameO1=document.getElementById('name_others_constraint').value;
                            latitudeO1=document.getElementById('latitude_others_constraint').value;
                            longitudeO1=document.getElementById('longitude_others_constraint').value;
                            distanceO1=document.getElementById('distance_others_constraint').value;
                        }else if(((document.getElementById('name_others_constraint')==null)||(document.getElementById('name_others_constraint').value==""))&&((document.main_formFSC4.selectOCP2.options[document.main_formFSC4.selectOCP2.selectedIndex].value!=0))){
                            var pos=0;
                                for(var i=0;i<points[0].length;i++){
                                    if(idP1==points[0][i]){
                                        pos=i;
                                }
                            }
                            nameO1=points[0][pos];
                            latitudeO1=points[1][pos];
                            longitudeO1=points[2][pos];
                            distanceO1=1250;
                        }
                    }
                    
                    if(nameO2==""){
                        if(((document.getElementById('name_others_constraint2')==null)||(document.getElementById('name_others_constraint2').value==""))&&((document.main_formFSC4.selectOCP3.options[document.main_formFSC4.selectOCP3.selectedIndex].value==0))){
                            alert("You have to select one second point.");
                        }else if(document.main_formFSC4.selectOCP3.options[document.main_formFSC4.selectOCP3.selectedIndex].value==0){
                            nameO2=document.getElementById('name_others_constraint2').value;
                            latitudeO2=document.getElementById('latitude_others_constraint2').value;
                            longitudeO2=document.getElementById('longitude_others_constraint2').value;
                            distanceO2=document.getElementById('distance_others_constraint2').value;
                        }else if(((document.getElementById('name_others_constraint2')==null)||(document.getElementById('name_others_constraint2').value==""))&&((document.main_formFSC4.selectOCP3.options[document.main_formFSC4.selectOCP3.selectedIndex].value!=0))){
                            var pos=0;
                                for(var i=0;i<points[0].length;i++){
                                    if(idP2==points[0][i]){
                                        pos=i;
                                }
                            }
                            nameO2=points[0][pos];
                            latitudeO2=points[1][pos];
                            longitudeO2=points[2][pos];
                            distanceO2=1250;
                        }
                    }
                }
                if((nameO1!="")&&(nameO2!="")){
                    adder_others_constraint(document.main_formFSC4.name_constant_textarea.value, document.main_formFSC4.selectOCP.options[document.main_formFSC4.selectOCP.selectedIndex].value, document.main_formFSC4.selectOCT.options[document.main_formFSC4.selectOCT.selectedIndex].value,document.main_formFSC4.f0_constant_textarea3.value,document.main_formFSC4.f0_constant2_textarea3.value,document.main_formFSC4.minimum_altitude_textarea3.value,document.main_formFSC4.maximum_altitude_textarea3.value,nameO1,latitudeO1,longitudeO1,distanceO1,nameO2,latitudeO2,longitudeO2,distanceO2);
                }
            }
            
            /*
             * Función que limpia los div de constante especial(STARs,legs, etc)
             */
            function clear_others(p){
                document.getElementById('mainFSC4').style.height="";
                if(p==1){
                    if((document.main_formFSC4.selectOCP2.options[document.main_formFSC4.selectOCP2.selectedIndex].value!=0)&&(document.getElementById('name_others_constraint').value!="")){
                        alert("You have to select only one first point.");
                        document.getElementById('firstPointOthers').innerHTML='';
                    }
                    else if((document.main_formFSC4.selectOCP2.options[document.main_formFSC4.selectOCP.selectedIndex].value!=0)&&(document.getElementById('name_others_constraint').value=="")){
                        document.getElementById('firstPointOthers').innerHTML='';
                    }else{
                        nameO1=document.getElementById('name_others_constraint').value;
                        latitudeO1=document.getElementById('latitude_others_constraint').value;
                        longitudeO1=document.getElementById('longitude_others_constraint').value;
                        distanceO1=document.getElementById('distance_others_constraint').value;
                        document.getElementById('firstPointOthers').innerHTML='';
                    }
                }else if(p==2){
                    if((document.main_formFSC4.selectOCP3.options[document.main_formFSC4.selectOCP3.selectedIndex].value!=0)&&(document.getElementById('name_others_constraint2').value!="")){
                        alert("You have to select only one second point.");
                        document.getElementById('secondPointOthers').innerHTML='';
                    }
                    else if((document.main_formFSC4.selectOCP3.options[document.main_formFSC4.selectOCP.selectedIndex].value!=0)&&(document.getElementById('name_others_constraint2').value=="")){
                        document.getElementById('secondPointOthers').innerHTML='';
                    }else{
                        nameO2=document.getElementById('name_others_constraint2').value;
                        latitudeO2=document.getElementById('latitude_others_constraint2').value;
                        longitudeO2=document.getElementById('longitude_others_constraint2').value;
                        distanceO2=document.getElementById('distance_others_constraint2').value;
                        document.getElementById('secondPointOthers').innerHTML='';
                    }
                }
            }
            
            /*
             * Función que añade una constante especial(STARs,legs, etc)
             */
            function adder_others_constraint(nameCons, typePath, typeSelect,f0c1,f0c2,min_alt,max_alt,name,latitude,longitude,distance,name2,latitude2,longitude2,distance2){
                oldVersionFS();
                if(typePath==""){
                        alert("Type Path cannot be empty.");
                        return;
                }else if(typeSelect==""){
                        alert("Type Select cannot be empty.");
                        return;
                }else if(isNaN(f0c1)){
                        alert("F0 Constant must be a number.");
                        return;
                }else if(isNaN(f0c2)){
                        alert("F0 Constant2 must be a number.");
                        return;
                }else if(isNaN(min_alt)){
                        alert("Minimum altitude must be a number.");
                        return;
                }else if(isNaN(min_alt)){
                        alert("Maximum altitude must be a number.");
                        return;
                }else if(isNaN(longitude)){
                        alert("Longitude must be a number.");
                        return;
                }else if(isNaN(latitude)){
                        alert("Longitude must be a number.");
                        return;
                }else if(isNaN(distance)){
                        alert("Distance must be a number.");
                        return;
                }else if(name==""){
                        alert("Name cannot be empty.");
                        return;
                }else if((latitude>180)||(latitude<-180)){
                        alert("Latitude must be between -180 [deg] and 180 [deg].");
                        return;
                }else if((longitude>360)||(longitude<-360)){
                        alert("Longitude must be between -360 [deg] and 360 [deg].");
                        return;
                }else{
                            var line=FI.split("||");
                            var m=0;
                            
                            for (var j=0;j<line.length;j++){
                                    if(line[j].indexOf("</fido:constraints>")==-1){
                                        m=j-2;
                                    }
                                }
                                
                                var unitType="";
                                switch (typeSelect) {
                                    case "altitude":
                                        unitType="[ft]";
                                        break;
                                    case "bearing":
                                        unitType = "[deg]";
                                        break;
                                    case "coefficient":
                                        unitType = "[adim]";
                                        break;
                                    case "colatitude":
                                        unitType = "[deg]";
                                        break;
                                    case "density":
                                        unitType = "[kgm3]";
                                        break;
                                    case "distance":
                                        unitType = "[km]";
                                        break;
                                    case "latitude":
                                        unitType = "[deg]";
                                        break;
                                    case "pitch":
                                        unitType = "[deg]";
                                        break;
                                    case "longitude":
                                        unitType = "[deg]";
                                        break;
                                    case "mass":
                                        unitType = "[kg]";
                                        break;
                                    case "parameter":
                                        unitType = "[adim]";
                                        break;
                                    case "pressure":
                                        unitType = "[bar]";
                                        break;
                                    case "speed":
                                        unitType = "[kt]";
                                        break;
                                    case "temperature":
                                        unitType = "[degK]";
                                        break;
                                    case "time":
                                        unitType = "[min]";
                                        break;
                                }
                                
                                
                                            var id=numCons+1;
                                            line.splice(m,0,'   <fido:constraint id="'+id+'" init_fs="0" final_fs="'+numFS+'" priority="0">');
                                            m++;
                                            line.splice(m,0,'     <fido:path type="'+typePath+'"  name="'+nameCons+'"/>');
                                            m++;
                                            line.splice(m,0,'       <spi:segmentDoA  logic="forall" >');
                                            m++;
                                            line.splice(m,0,'           <spi:altitude_limits variable="Hp" units="[ft]"  min_value="'+min_alt+'" max_value="'+max_alt+'"/>');
                                            m++;
                                            line.splice(m,0,'               <spi:point name="'+name+'">');
                                            m++;
                                            line.splice(m,0,'                   <gc:latitude units="[deg]" value="'+latitude+'"/'+">");
                                            m++;
                                            line.splice(m,0,'                   <gc:longitude units="[deg]" value="'+longitude+'"/'+">");
                                            m++;
                                            if (distance!=0){
                                                    line.splice(m,0,'                   <gc:distance units="[m]" value="'+distance+'"/'+">");
                                                    m++;
                                            }
                                            line.splice(m,0,'           </spi:point>');
                                            m++;
                                            line.splice(m,0,'               <spi:point name="'+name2+'">');
                                            m++;
                                            line.splice(m,0,'                   <gc:latitude units="[deg]" value="'+latitude2+'"/'+">");
                                            m++;
                                            line.splice(m,0,'                   <gc:longitude units="[deg]" value="'+longitude2+'"/'+">");
                                            m++;
                                            if (distance2!=0){
                                                    line.splice(m,0,'                   <gc:distance units="[m]" value="'+distance2+'"/'+">");
                                                    m++;
                                            }
                                            line.splice(m,0,'           </spi:point>');
                                            m++;
                                            line.splice(m,0,'       </spi:segmentDoA>');
                                            m++;
                                            line.splice(m,0,'   </fido:constraint>');
                                            m++;
                            FI=line.join("||");
                            xajax_modify_fi(FI);
                            setTimeout("xajax_show_repository('fi',document.main_form.repo_fi_select.options[document.main_form.repo_fi_select.selectedIndex].value)",800);
                            readAgain();
                    }
                    
                    
            }
            
            /*
             * Función que dibuja los FS, las constraints y el mapa
             */
            function readAgain(){
                parser();
                writeCons();
                writeFS();
                if(del==1){
                    setTimeout("writeFS();",10);
                }
                del=0;
            }
            
            var discard=-1;
            var advanced=cont4;
            var cont4=0;
            var FS_old = new Array();
            var FI_old= new Array();
            var IC_old= new Array();
            var gc_constraints_old= new Array();
            var initial_condition_old= new Array();
            /*
             * Función que guarda estados anteriores
             */
            function oldVersionFS(){
                FS_old[cont4]=flight_segments;
                FI_old[cont4]=FI;
                IC_old[cont4] = IC;
                gc_constraints_old[cont4]=gc_constraints;
                initial_condition_old[cont4]=initial_condition;
                
                cont4++;
                discard=cont4-1;
            }
            
            /*
             * Función que guarda estados anteriores y restaura hacia atras
             */
            function undo_changes(){
                advanced=discard+1;
                if(discard<0){
                    alert("You have done all changes possible");
                }else{
                    flight_segments.length=0;
                    flight_segments=FS_old[discard];
                    FI="";
                    FI=FI_old[discard];
                    IC="";
                    IC=IC_old[discard];
                    gc_constraints.length=0;
                    gc_constraints=gc_constraints_old[discard];
                    initial_condition.length=0;
                    initial_condition=initial_condition_old[discard];
                    xajax_modify_fi(FI);
                    xajax_modify_ic(IC);
                    setTimeout("xajax_show_repository('fi',document.main_form.repo_fi_select.options[document.main_form.repo_fi_select.selectedIndex].value)",800);
                    parser();
                    writeFS();
                    writeCons();
                    discard--; 
                }
            }
            
            /*
             * Función que guarda estados anteriores y restaura hacia adelante
             */
            function redo_changes(){
                if(advanced==cont4){
                    alert("You have done all changes possible");
                }else{
                    flight_segments.length=0;
                    flight_segments=FS_old[advanced];
                    FI="";
                    FI=FI_old[advanced];
                    IC="";
                    IC=IC_old[advanced];
                    gc_constraints.length=0;
                    gc_constraints=gc_constraints_old[advanced];
                    initial_condition.length=0;
                    initial_condition=initial_condition_old[advanced];
                    xajax_modify_fi(FI);
                    xajax_modify_ic(IC);
                    setTimeout("xajax_show_repository('fi',document.main_form.repo_fi_select.options[document.main_form.repo_fi_select.selectedIndex].value)",800);
                    parser();
                    writeFS();
                    writeCons();
                    advanced++;
                }
            }
            

        </script>
    </head>
    <body onLoad="load()">

<!-- Navigation Tabs-->
<div id="navigation">
</div>

<br><br>
<input type="button" id="logout" name="logout_button" value="Log Out" onClick="xajax_logout()" />
<input type="button" id="options" name="options_button" value="User Options" onclick=window.location.href="options.php" />

<!-- Main options-->
<form id="main" name="main_form">
	<p><h1>Flight Intent Repository</h1>
	<div id="fi_select">
            <select id="repo_fi" name="repo_fi_select" onchange="writeFI();showXML()">
		<option value=0>---Select One File---</option>
		<?php
		mysql_connect("localhost","root","gpds");
		mysql_select_db(apache_getenv("REMOTE_user"));
		$result=mysql_query("select * from fi order by name");
		$result2=mysql_query("select * from selected_tab_fi");
		$row2=mysql_fetch_array($result2);
		while ($row=mysql_fetch_array($result)){
			if ($row["path"]==$row2["path"]){
				echo '<option value='.$row["name"].' selected>'.$row["name"].'</option>';
			}
			else{
				echo '<option value='.$row["name"].'>'.$row["name"].'</option>';
			}
		}
		?>
            </select>
	</div>
	</p>
        
        <p>
	<input type="button" id="new_fi" name="new_button" value="New" onClick="new_fp('fi','name_fi','fi_fi','add_fp','edit','repo_fi','remove_fp','show','generate','view_log')" />
	<input type="button" id="edit_fi" name="edit_button" value="Edit" disabled=true onClick="edit_fp('fi','fi_fi','show','add_fp','generate','view_log','name_ai','name_tra','view_log')" />
        <input type="button" id="view_fi" name="view_fi_button" value="View" onClick="viewFI();showXML()" />
	</p>
        
        <div id="ic_new">
        <p><h1>Initial Conditions Repository</h1>
	<div id="ic_select">
            <select id="repo_ic_new" name="repo_ic_select" onchange="writeIC();showXML()">
		<option value=0>---Select One File---</option>
		<?php
		mysql_connect("localhost","root","gpds");
		mysql_select_db(apache_getenv("REMOTE_user"));
		$result=mysql_query("select * from ic order by name");
		$result2=mysql_query("select * from selected_tab_ic");
		$row2=mysql_fetch_array($result2);
		while ($row=mysql_fetch_array($result)){
			if ($row["path"]==$row2["path"]){
				echo '<option value='.$row["name"].' selected>'.$row["name"].'</option>';
			}
			else{
				echo '<option value='.$row["name"].'>'.$row["name"].'</option>';
			}
		}
		?>
            </select>
	</div>
	</p>
        
        <p>
	<input type="button" id="new_ic" name="new_button" value="New" onClick="new_fp('ic','name_fi','fi_fi','add_fp','edit','repo_fi','remove_fp','show','generate','view_log')" />
	<input type="button" id="edit_ic" name="edit_button_ic" value="Edit" disabled=true onClick="edit_fp('ic','fi_fi','show','add_fp','generate','view_log','name_ai','name_tra','view_log')" />
        <input type="button" id="view_ic" name="view_ic_button" value="View" onClick="viewIC();showXML()" />
	</p>
        </div>
        
	<p><h1>Flight Plan Edition</h1>
        <input type="button" id="show_xml" name="show_xml_button" value="XML Edition" disabled="true" onClick="showXML()" />
        <input type="button" id="show_fields" name="show_fields_button" value="Fields Edition" onClick="showFields()" />
        <div id="XML_edition">
	<h2>Name:</h2>
	<div id="fp_name">
	<input type="text" id="name_fp" name="name_ic_textarea" disabled=true onKeyPress="return block(event)"/>
	</div>
	<h2>File:</h2>
	<div id="fp_text">
	<textarea id="fp_fp" name="ic_ic_textarea" rows="20" cols="80"></textarea>
	</div>
        <br><input type="button" id="add_fp" name="add_fp_button" value="Add File" disabled=true onClick="addFile()" />
	<input type="button" id="remove_fp" name="remove_button" value="Remove File" disabled=true onClick="removeFile();" /><br>
        <input type="button" id="anchor" name="anchor_button" value="Anchor Map" disabled=true onClick="xajax_anchor_button();" />
        <input type="button" id="fido_translate" name="fido_translate_button" value="Fido Translate" onClick="browser();" />
        <br>
        </div>
        <div id="Fields_edition" style="display: none">
        <br>
        <h2>Flight Segments:</h2>
        <div id="fp_name1" style="width:490px;height:200px;padding:10px;border:1px solid #aaaaaa;"></div>
        <br>
        <h2>Constraints:</h2>
        <div id="options_constraints">
            <div id="point_constraint" style="width:23px;height:10px;background: red;float: left;margin: 6px; "></div>
                <h1 style="position: relative;top: -11px;float: left">Point</h1>
            <div id="segment_constraint" style="width:23px;height:10px;background: blue;float: left;margin: 6px; "></div>
                <h1 style="position: relative;top: -11px;float: left">Segment</h1>
            <div id="volume_constraint" style="width:23px;height:10px;background: #FFCC00;float: left;margin: 6px; "></div>
                <h1 style="position: relative;top: -11px;float: left">Volume</h1>
            <div id="others_constraint" style="width:23px;height:10px;background: #643370;float: left;margin: 6px; "></div>
                <h1 style="position: relative;top: -11px;float: left">Others</h1>
        </div><br>
        <div id="fp_name2" style="width:490px;height:200px;padding:10px;border:1px solid #aaaaaa;"></div>
        <br>
        <h2>Objetives:</h2>
        <div id="fp_name3" style="width:490px;height:200px;padding:10px;border:1px solid #aaaaaa;"></div>
        <br>
        <div id="optionsFS">
            <h3>Options:</h3>
            <div id="optionsBlockFS" ondrop="drop(event)" style="width:168px;height:570px;padding:10px;border:10px solid #313147;">
                <div>
                    <h1>Flight Segments</h1>
                    <div id="NPArea">
                        <div class="square" id="opt1" draggable="true" title="New Point"  ondragstart="drag(event,'NP')" ondragend="endDrag(event)" >New Point</div>
                    </div>
                    <div id="OPArea">
                        <div class="square" id="opt2" draggable="true" title="Modify Initial Condition"  ondragstart="drag(event,'IC')" ondragend="endDrag(event)" >Mod IC</div>
                    </div>
                    <div id="MPArea">
                        <div class="square" id="opt3" draggable="true" title="Modify Point"  ondragstart="drag(event,'MP')" ondragend="endDrag(event)" >Mod Point</div>
                    </div>
                    <div id="MPArea" style="width:43px;height: 30px;padding: 0 10px 15px;margin: 10px;float: left;border: 4px">
                        <div  id="opt4" draggable="true" title="Modify Point"  ondragstart="drag(event,'MP2')" ondragend="endDrag(event)" ></div>
                    </div>
                </div>
                
                <h1>Constraints</h1>
                    <div id="OPArea1">
                        <img src="images/point.jpg" id="opt5" title="Point Constraint" style="width:50px;height:50px;margin: 10px;float: left" draggable="true" ondragstart="drag(event,'PC')" ondragend="endDrag(event)">
                    </div>
                    <div id="OPArea2">
                        <img src="images/segment.jpg" id="opt6" title="Segment Constraint"  style="width:50px;height:50px;margin: 10px;float: left" draggable="true" ondragstart="drag(event,'SC')" ondragend="endDrag(event)">
                    </div>
                    <div id="OPArea3">
                        <img src="images/polygon.jpg" id="opt7" title="Polygon Constraint"  style="width:50px;height:50px;margin: 10px;float: left" draggable="true" ondragstart="drag(event,'PolC')" ondragend="endDrag(event)">
                    </div>
                    <div id="OPArea4">
                        <div id="opt8" draggable="true" title="Other Type Constraint"  style="position: relative;top: 10px;width:58px;height: 30px;padding: 0 10px 15px;margin: 5px;background: #643370;border: 4px solid slateblue;float: left;" ondragstart="drag(event,'OC')" ondragend="endDrag(event)" >
                            <h1>Others</h1>
                        </div>
                    </div>
                
                <div id="Bin" style="position: relative;top: 40px;">
                    <img src="images/bin.jpg" id="recycle_bin" style="position: relative;top: 10px;width:170px;height:170px;float: left" ondrop="drop(event);delete_element(event)" ondragover="allowDrop(event)">
                </div>
            </div>
            
        </div>
            <input type="button" id="undo" name="add_fp_button" value="Undo Change" onClick="undo_changes()" />
            <input type="button" id="redo" name="add_fp_button" value="Redo Change" onClick="redo_changes()" />
            <input type="button" id="anchor_fields" name="anchor_button_fields" value="Anchor Map" onClick="xajax_anchor_button();" />
        </div>
        
	</p>
	<div class="generation"><h1>Generation Process</h1>
	<h2>Aircraft Intent Name:</h2><input type="text" id="name_ai" name="name_ai_textarea" disabled=true onKeyPress="return block(event)"/>	
	<h2>Trajectory Name:</h2><input type="text" id="name_tra" name="name_tra_textarea" disabled=true onKeyPress="return block(event)"/>
	<br><br>
	<div id="generate_div"></div>
	<input type="button" id="view_log" name="view_log_button" value="View Log Details" disabled=true onClick="xajax_open_log()" />
        <br><input type="button" id="save_log" name="save_log_button" value="Save Log Details" disabled=true onClick="xajax_call_download()" />
	</div>
	<div id="generating">
	</div>
        <div id="mapGen">
            <div id="fi_representation"></div>
            <div id="marker_initial"></div>
            <div id="markers_fidoSegment"></div>
            <div id="markers_selectConstraint"></div>
            <div id="markers_fidoConstraint"></div>
        </div>
        <br><div id="current_version_fp">
	Current version of TRAP number 10089
	</div>
</form>

<div id="browser" style="display: none">
    <form id="mainBrowser" name="main_browser" method="post" enctype="multipart/form-data">
        <br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:1em;font-weight:bold;">Convert FACT to XML File </span>     
        <br><br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:bold;">FI Name: </span>
        &nbsp;&nbsp;<input type="text" id="name_FACT" name="name_FACT_fi_textarea" value="" />
        <br><br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:bold;">IC Name: </span>
        &nbsp;&nbsp;<input type="text" id="name_FACT" name="name_FACT_ic_textarea" value="" />
        <br><br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:bold;">Choose File FACT : </span>
        &nbsp;&nbsp;</span><select id="selectBro" name="selectBro" onchange="closer();handleFileSelect(document.main_browser.name_FACT_fi_textarea.value,document.main_browser.name_FACT_ic_textarea.value,document.main_browser.selectBro.options[document.main_browser.selectBro.selectedIndex].value)"><option value=0>---Select One File---</option></select>
        <br><br>&nbsp;&nbsp;<input type="button" id="cancel_browser" name="cancel_browser_button" value="Cancel" onClick="closer()" ><br><br>
    </form>
</div>

<div id="select_points" style="display: none">
    <form id="mainFS" name="main_formFS">
        <br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:1em;font-weight:bold;">Choose Type of Points</span>
                <br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">New Point : </span>
                &nbsp;&nbsp;<input type="button" id="new_twaypoint" name="new_twaypoint_button" value="New Point" onClick="closer();addFS_new();" >
                <br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">OCM Point : 
                &nbsp;&nbsp;</span><select id="selectPo" name="selectPo" onchange="closer();addFS_old(document.main_formFS.selectPo.options[document.main_formFS.selectPo.selectedIndex].value)"><option value=0>---Select One Point---</option></select>
                <br><br>&nbsp;&nbsp;<input type="button" id="cancel_choose_twaypoint" name="cancel_call_adder_front_twaypoint_button" value="Cancel" onClick="closer();readAgain()" >
    </form>
</div>
<div id="select_points2" style="display: none">
    <form id="mainFSN" name="main_formFSN">
        <br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:1em;font-weight:bold;">Flight Segment Addition (in front)</span>
        <br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Twaypoint Name : </span>
        &nbsp;&nbsp;<input type="text" id="name_twaypoint" name="name_twaypoint_textarea" value="twaypoint"/>
               <br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Latitude: </span>
        &nbsp;&nbsp;<input type="text" id="latitude_twaypoint" name="latitude_twaypoint_textarea" value="" />
               <br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Longitude: </span>
        &nbsp;&nbsp;<input type="text" id="longitude_twaypoint" name="longitude_twaypoint_textarea" value="" /><br>
        &nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Distance: </span>
        &nbsp;&nbsp;<input type="text" id="distance_twaypoint" name="distance_twaypoint_textarea" value="" />
        <br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.6em;font-weight:normal;">***Leave empty boxes to keep old values</span>
               <br><br>&nbsp;&nbsp;<input type="button" id="ok_call_adder_front_twaypoint" name="ok_call_adder_front_twaypoint_button" value="Ok" onClick="closer(); sizeNameNPFront()" >
        &nbsp;&nbsp;<input type="button" id="cancel_call_adder_front_twaypoint" name="cancel_call_adder_front_twaypoint_button" value="Cancel" onClick="closer();readAgain();" >
    </form>
</div>
<div id="select_points3" style="display: none">
    <form id="mainFSN2" name="main_formFSN2">
        <br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:1em;font-weight:bold;">Flight Segment Addition (in front)</span>
        <br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Twaypoint Name : </span>
        &nbsp;&nbsp;<input type="text" id="name_twaypoint" name="name_twaypoint_textarea" value="twaypoint"/>
               <br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Latitude: </span>
        &nbsp;&nbsp;<input type="text" id="latitude_twaypoint2" name="latitude_twaypoint_textarea" value="" />
               <br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Longitude: </span>
        &nbsp;&nbsp;<input type="text" id="longitude_twaypoint2" name="longitude_twaypoint_textarea" value="" /><br>
        &nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Distance: </span>
        &nbsp;&nbsp;<input type="text" id="distance_twaypoint2" name="distance_twaypoint_textarea" value="" />
        <br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.6em;font-weight:normal;">***Leave empty boxes to keep old values</span>
               <br><br>&nbsp;&nbsp;<input type="button" id="ok_add_new_point" name="ok_add_new_point_button" value="Ok" onClick="closer();sizeNameNPBehind();" >
        &nbsp;&nbsp;<input type="button" id="cancel_call_adder_behind_twaypoint" name="cancel_call_adder_behind_twaypoint_button" value="Cancel" onClick="closer();readAgain();" >
    </form>
</div>
<div id="select_points4" style="display: none">
    <form id="mainFSIC" name="main_formFSIC">
        <br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:1em;font-weight:bold;">Modify Initial Condition</span>
               <br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Lambda: </span>
        &nbsp;&nbsp;<input type="text" id="latitude_twaypoint3" name="lambda_twaypoint3_textarea" value="" />
               <br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Phi: </span>
        &nbsp;&nbsp;<input type="text" id="longitude_twaypoint3" name="phi_twaypoint3_textarea" value="" /><br>
        <br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.6em;font-weight:normal;">***Leave empty boxes to keep old values</span>
               <br><br>&nbsp;&nbsp;<input type="button" id="ok_call_adder_behind_twaypoint" name="ok_modify_initial_condition_button" value="Ok" onClick="closer();checker_initial_point(document.main_formFSIC.lambda_twaypoint3_textarea.value, document.main_formFSIC.phi_twaypoint3_textarea.value);" >
        &nbsp;&nbsp;<input type="button" id="cancel_modify_initial_condition" name="cancel_modify_initial_condition_button" value="Cancel" onClick="closer();readAgain();" >
    </form>
</div>
<div id="modify_points" style="display: none">
    <form id="mainMP" name="main_formMP">
            <br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:1em;font-weight:bold;">Modify Flight Segment</span>
            <br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">New Twaypoint Name : </span>
            &nbsp;&nbsp;<input type="text" id="name_fs_composite_null" name="name_fs_composite_null_textarea" value=""/><br>
            &nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">New Latitude: </span>
            &nbsp;&nbsp;<input type="text" id="latitude_fs_composite_null" name="latitude_fs_composite_null_textarea" value=""/>
                   <br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">New Longitude: </span>
            &nbsp;&nbsp;<input type="text" id="longitude_fs_composite_null" name="longitude_fs_composite_null_textarea" value="" />
                   <br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">New Distance: </span>
            &nbsp;&nbsp;<input type="text" id="distance_fs_composite_null" name="distance_fs_composite_null_textarea" value="" />
                   <br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.6em;font-weight:normal;">***Leave empty boxes to keep old values</span>
            <br><br>&nbsp;&nbsp;<input type="button" id="ok_modify_initial_condition_twaypoint" name="ok_modify_initial_condition_twaypoint_button" value="Ok" onClick="closer();sizeNameMP() " >
            &nbsp;&nbsp;<input type="button" id="cancel_modify_initial_condition_twaypoint" name="cancel_modify_initial_condition_twaypoint" value="Cancel" onClick="closer();" >
    </form>
</div>
<div id="select_point_constraint"style="display: none" >
    <form id="mainFSC" name="main_formFSC">
        <br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:1em;font-weight:bold;">Point Constraint</span>
        <br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Type of Constraint : </span>
        &nbsp;&nbsp;</span><select id="selectMP" name="selectMP">
                <option value=0>---Select One Type---</option>
                <option value="altitude">Altitude [ft]</option>
                <option value="bearing">Bearing [deg]</option>
                <option value="coefficient">Coefficient [adim]</option>
                <option value="colatitude">Colatitude [deg]</option>
                <option value="density">Density [kgm3]</option>
                <option value="distance">Distance [km]</option>
                <option value="latitude">Latitude [deg]</option>
                <option value="pitch">Pitch [deg]</option>
                <option value="longitude">Longitude [deg]</option>
                <option value="mass">Mass [kg]</option>
                <option value="parameter">Parameter [adim]</option>
                <option value="pressure">Pressure [bar]</option>
                <option value="speed">Speed [kt]</option>
                <option value="temperature">Temperature [degK]</option>
                <option value="time">Time [min]</option>
            </select>
        <br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Min Value : </span>
        &nbsp;&nbsp;<input type="text" id="f0_constant" name="f0_constant_textarea" value=""/>
        <br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Max Value : </span>
        &nbsp;&nbsp;<input type="text" id="f0_constant2" name="f0_constant2_textarea" value=""/>
        <br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Minimum Value Altitude : </span>
        &nbsp;&nbsp;<input type="text" id="minimum2_altitude" name="minimum_altitude_textarea" value=""/>
        <br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Maximum Value Altitude : </span>
        &nbsp;&nbsp;<input type="text" id="maximum2_altitude" name="maximum_altitude_textarea" value=""/>
        <br><br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Point OCM : </span>
        &nbsp;&nbsp;</span><select id="selectPCP" name="selectPCP"><option value=0>---Select One Point---</option></select>
        <br><br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">New Point : </span>
        &nbsp;&nbsp;<input type="button" id="ok_call_adder_behind_" name="" value="OK" onclick="add_new_point_constraint()">
        <div id="divPointCons"></div>
               <br><br>&nbsp;&nbsp;<input type="button" id="done_point_constraint" name="done_point_constraint_button" value="Done" onClick="closer(); checker_point_constraint(document.main_formFSC.selectPCP.options[document.main_formFSC.selectPCP.selectedIndex].value);" >
        &nbsp;&nbsp;<input type="button" id="cancel_point_constraint" name="cancel_point_constraint_button" value="Cancel" onClick="closer();readAgain();" >
    </form>
</div>
<div id="select_segment_constraint"style="display: none" >
    <form id="mainFSC2" name="main_formFSC2">
        <br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:1em;font-weight:bold;">Segment Constraint</span>
        <br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Type of Constraint : </span>
        &nbsp;&nbsp;</span><select id="selectSC" name="selectSC">
                <option value=0>---Select One Type---</option>
                <option value="altitude">Altitude [ft]</option>
                <option value="bearing">Bearing [deg]</option>
                <option value="coefficient">Coefficient [adim]</option>
                <option value="colatitude">Colatitude [deg]</option>
                <option value="density">Density [kgm3]</option>
                <option value="distance">Distance [km]</option>
                <option value="latitude">Latitude [deg]</option>
                <option value="pitch">Pitch [deg]</option>
                <option value="longitude">Longitude [deg]</option>
                <option value="mass">Mass [kg]</option>
                <option value="parameter">Parameter [adim]</option>
                <option value="pressure">Pressure [bar]</option>
                <option value="speed">Speed [kt]</option>
                <option value="temperature">Temperature [degK]</option>
                <option value="time">Time [min]</option>
            </select>
        <br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Min Value : </span>
        &nbsp;&nbsp;<input type="text" id="f0_constant" name="f0_constant_textarea2" value=""/>
        <br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Max Value : </span>
        &nbsp;&nbsp;<input type="text" id="f0_constant2" name="f0_constant2_textarea2" value=""/>
        <br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Minimum Value Altitude : </span>
        &nbsp;&nbsp;<input type="text" id="minimum2_altitude" name="minimum_altitude_textarea2" value=""/>
        <br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Maximum Value Altitude : </span>
        &nbsp;&nbsp;<input type="text" id="maximum2_altitude" name="maximum_altitude_textarea2" value=""/> 
        <div id="first_point"> 
        <br><br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:bold;">First Point </span>
        <br><br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Point OCM : </span>
        &nbsp;&nbsp;</span><select id="selectSCP" name="selectSCP" ><option value=0>---Select One Point---</option></select>
        <br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">New Point : </span>
        &nbsp;&nbsp;<input type="button" id="ok_call_adder_behind_" name="" value="New Point" onclick="checker_segment_constraint(1,0,0)">
        <div id="firstPointSegment">
        </div>
        </div>
        <div id="second_point">
        <br><br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:bold;">Second Point </span>
        <br><br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Point OCM : </span>
        &nbsp;&nbsp;</span><select id="selectSCP2" name="selectSCP2" ><option value=0>---Select One Point---</option></select>
        <br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">New Point : </span>
        &nbsp;&nbsp;<input type="button" id="ok_call_adder_behind_" name="" value="New Point" onclick="checker_segment_constraint(2,0,0)">
        <div id="secondPointSegment">
        </div>
        </div>
               <br><br>&nbsp;&nbsp;<input type="button" id="ok_segment_constraint" name="ok_segment_constraint_button" value="Done" onClick=" closer();checker_segment_constraint(3,document.main_formFSC2.selectSCP.options[document.main_formFSC2.selectSCP.selectedIndex].value,document.main_formFSC2.selectSCP2.options[document.main_formFSC2.selectSCP2.selectedIndex].value)" >
        &nbsp;&nbsp;<input type="button" id="cancel_segment_constraint" name="cancel_segment_constraint_button" value="Cancel" onClick="closer();readAgain();" >
    </form>
</div>
<div id="select_volume_constraint"style="display: none" >
    <form id="mainFSC3" name="main_formFSC3">
        <br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:1em;font-weight:bold;">Volume Constraint</span>
        <br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Type of Constraint : </span>
        &nbsp;&nbsp;</span><select id="selectVC" name="selectVC">
                <option value=0>---Select One Type---</option>
                <option value="altitude">Altitude [ft]</option>
                <option value="bearing">Bearing [deg]</option>
                <option value="coefficient">Coefficient [adim]</option>
                <option value="colatitude">Colatitude [deg]</option>
                <option value="density">Density [kgm3]</option>
                <option value="distance">Distance [km]</option>
                <option value="latitude">Latitude [deg]</option>
                <option value="pitch">Pitch [deg]</option>
                <option value="longitude">Longitude [deg]</option>
                <option value="mass">Mass [kg]</option>
                <option value="parameter">Parameter [adim]</option>
                <option value="pressure">Pressure [bar]</option>
                <option value="speed">Speed [kt]</option>
                <option value="temperature">Temperature [degK]</option>
                <option value="time">Time [min]</option>
            </select>
        <br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Min Value : </span>
        &nbsp;&nbsp;<input type="text" id="f0_constant_volume" name="f0_constant_volume_textarea" value=""/>
        <br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Max Value : </span>
        &nbsp;&nbsp;<input type="text" id="f0_constant_volume2" name="f0_constant_volume2_textarea2" value=""/>
        <br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Minimum Value Altitude : </span>
        &nbsp;&nbsp;<input type="text" id="minimum_volume_altitude" name="minimum_altitude_volume_textarea" value=""/>
        <br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Maximum Value Altitude : </span>
        &nbsp;&nbsp;<input type="text" id="maximum_altitude_volume" name="maximum_altitude_volume_textarea" value=""/>
        <br><br>&nbsp;&nbsp;<input type="text" id="number_points" name="number_points_textarea" disabled="true" value="Number of Selected Points is 0"/>
        <br><br>
        &nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">New Point : </span>
        <input type="button" id="number_points_constraints" name="number_points_constraints_button" value="Add Point" onclick="select_number_points()">
        &nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Point OCM : </span>
    </span><select id="selectVCP" name="selectVCP" onchange="clear_volume_constraint(document.main_formFSC3.selectVCP.options[document.main_formFSC3.selectVCP.selectedIndex].value)"><option value=0>---Select One Point---</option></select>
        <div id="points_id_vol"></div>
               <br><br>&nbsp;&nbsp;<input type="button" id="ok_volume_constraint" name="ok_volume_constraint_button" value="Done" onClick="closer(); adder_volume_constraint(document.main_formFSC3.selectVC.options[document.main_formFSC3.selectVC.selectedIndex].value,document.main_formFSC3.f0_constant_volume_textarea.value,document.main_formFSC3.f0_constant_volume2_textarea2.value,document.main_formFSC3.minimum_altitude_volume_textarea.value,document.main_formFSC3.maximum_altitude_volume_textarea.value,numberPointsVol,nameVol,latitudeVol,longitudeVol,distanceVol);" >
        &nbsp;&nbsp;<input type="button" id="cancel_volume_constraint" name="cancel_volume_constraint_button" value="Cancel" onClick="closer();readAgain();" >
    </form>
</div>
<div id="select_others_constraint"style="display: none" >
    <form id="mainFSC4" name="main_formFSC4">
        <br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:1em;font-weight:bold;">Others Type Constraint</span>
        <br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Name of Constraint : </span>
        &nbsp;&nbsp;<input type="text" id="name_constant" name="name_constant_textarea" value=""/>
        <br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Select Path : </span>
        &nbsp;&nbsp;</span><select id="selectOCP" name="selectOCP" >
                <option value=0>---Select One Type---</option>
                <option value="leg">Leg</option>
                <option value="star">STAR</option>
                <option value="sid">SID</option>
                <option value="approach">Final Approach</option>
                <option value="airway">Airway</option>
                <option value="airway_segment">Airway Segment</option>
            </select>
        <br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Type of Constraint : </span>
        &nbsp;&nbsp;</span><select id="selectOCT" name="selectOCT">
                <option value=0>---Select One Type---</option>
                <option value="altitude">Altitude [ft]</option>
                <option value="bearing">Bearing [deg]</option>
                <option value="coefficient">Coefficient [adim]</option>
                <option value="colatitude">Colatitude [deg]</option>
                <option value="density">Density [kgm3]</option>
                <option value="distance">Distance [km]</option>
                <option value="latitude">Latitude [deg]</option>
                <option value="pitch">Pitch [deg]</option>
                <option value="longitude">Longitude [deg]</option>
                <option value="mass">Mass [kg]</option>
                <option value="parameter">Parameter [adim]</option>
                <option value="pressure">Pressure [bar]</option>
                <option value="speed">Speed [kt]</option>
                <option value="temperature">Temperature [degK]</option>
                <option value="time">Time [min]</option>
            </select>
        <br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Min Value : </span>
        &nbsp;&nbsp;<input type="text" id="f0_constant3" name="f0_constant_textarea3" value=""/>
        <br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Max Value : </span>
        &nbsp;&nbsp;<input type="text" id="f0_constant4" name="f0_constant2_textarea3" value=""/>
        <br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Minimum Value Altitude : </span>
        &nbsp;&nbsp;<input type="text" id="minimum3_altitude" name="minimum_altitude_textarea3" value=""/>
        <br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Maximum Value Altitude : </span>
        &nbsp;&nbsp;<input type="text" id="maximum3_altitude" name="maximum_altitude_textarea3" value=""/> 
        <div id="first_point_others"> 
        <br><br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:bold;">First Point </span>
        <br><br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Point OCM : </span>
        &nbsp;&nbsp;</span><select id="selectOCP2" name="selectOCP2" ><option value=0>---Select One Point---</option></select>
        <br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">New Point : </span>
        &nbsp;&nbsp;<input type="button" id="ok_call_adder_behind_" name="" value="New Point" onclick="checker_others_constraint(1,0,0)">
        <div id="firstPointOthers">
        </div>
        </div>
        <div id="second_point_others">
        <br><br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:bold;">Second Point </span>
        <br><br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">Point OCM : </span>
        &nbsp;&nbsp;</span><select id="selectOCP3" name="selectOCP3" ><option value=0>---Select One Point---</option></select>
        <br><br>&nbsp;&nbsp;<span style="font-family:verdana;font-size:0.8em;font-weight:normal;">New Point : </span>
        &nbsp;&nbsp;<input type="button" id="ok_call_adder_behind_" name="" value="New Point" onclick="checker_others_constraint(2,0,0)">
        <div id="secondPointOthers">
        </div>
        </div>
               <br><br>&nbsp;&nbsp;<input type="button" id="ok_other_constraint" name="ok_other_constraint_button" value="Done" onClick=" closer();checker_others_constraint(3,document.main_formFSC4.selectOCP2.options[document.main_formFSC4.selectOCP2.selectedIndex].value,document.main_formFSC4.selectOCP3.options[document.main_formFSC4.selectOCP3.selectedIndex].value)" >
        &nbsp;&nbsp;<input type="button" id="cancel_other_constraint" name="cancel_other_constraint_button" value="Cancel" onClick="closer();readAgain();" >
    </form>
</div>
<div id="lock" style="display: none">
    <div id="exec">
        <img src="images/processing.gif" id="image" style="display: none"/>
        <div id="check">
            <div id="div1"></div>
        </div> 
        <div id="progB" style="display: none">
            <progress id="prog3"  value="0" max="100"></progress>
            <div id="numValue3" style="color:white">0%</div>
            <progress id="prog4"  value="0" max="100" style="display: none"></progress>
            <progress id="prog2"  value="0" max="100"></progress>
            <div id="numValue2" style="color:white">0%</div>
        </div>
    </div>
</div>
</body>
</html>
